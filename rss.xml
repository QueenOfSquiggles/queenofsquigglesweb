<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Queen Of Squiggles&#x27;s Blog</title>
      <link>https://queenofsquiggles.github.io/</link>
      <description>The personal blog for all of the Queen&#x27;s news, ramblings, portfolio stuffs, and more!</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://queenofsquiggles.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sat, 19 Oct 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Engine Switch 2024</title>
          <pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/engine-switch-2024/</link>
          <guid>https://queenofsquiggles.github.io/meta/engine-switch-2024/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/engine-switch-2024/">&lt;p&gt;To be real, this post has been a long time coming. I’ve been toying in my head with how I want to go about this. So hey, here it goes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Godot_is_seriously_awesome&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_is_seriously_awesome&quot; aria-label=&quot;Anchor link for: Godot_is_seriously_awesome&quot;&gt;Godot is seriously awesome&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before anyone gets all tribalistic about this: Godot is incredible. It is an amazing software that lets people with even the most minimal experience make games. And almost every week I personally see another reason to love this funky little game engine. So before we begin, please please please don’t think that just becauses I have a newfound love of bevy that it means it’s better than Godot. Game Engines are (usually) subjective. Use the tool that works for you and is enjoyable to use!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Bevy_is_also_seriously_awesome&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Bevy_is_also_seriously_awesome&quot; aria-label=&quot;Anchor link for: Bevy_is_also_seriously_awesome&quot;&gt;Bevy is also seriously awesome&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll lead with a brief description, shamelessly stolen from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;&quot;&gt;Bevy’s website&lt;&#x2F;a&gt;. Bevy is “A refreshingly simple data-driven game engine built in Rust[;] Free and Open Source Forever!”&lt;&#x2F;p&gt;
&lt;p&gt;There are a few key areas that I wanna drill down for why I think Bevy is so cool, without needing to compare it to any other engines.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a side note, my hot take is that Bevy is more accurately a “framework” rather than an “engine” since my definition of engines, frameworks, and libraries break down as such:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An engine is an executable software that dispatches your code (typically a scripting language) as it sees fit based on the engine’s design&lt;&#x2F;li&gt;
&lt;li&gt;A framework is code that gets compiled (or included for non compiled languages) into your application and takes control of the application’s main thread.&lt;&#x2F;li&gt;
&lt;li&gt;A library is code that gets compiled into your application but does not take control over the application’s main thead (save situations like blocking and sleeping)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It is probably of note that these definitions are distinctly different from existing attempts such as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gamefromscratch.com&#x2F;gamedev-glossary-library-vs-framework-vs-engine&#x2F;&quot;&gt;GameFromScratch&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- I think I like using this label system for managing hardcoded links --&gt;
&lt;h3 id=&quot;Rust&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Rust&quot; aria-label=&quot;Anchor link for: Rust&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy is written in rust, users write in rust, and (with some limitations) any platform that rust supports targeting should be able to run the compiled application.&lt;&#x2F;p&gt;
&lt;p&gt;Because of Rust’s language features, memory safety is just inherent to the development of the game.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ECS&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ECS&quot; aria-label=&quot;Anchor link for: ECS&quot;&gt;ECS&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ECS (Entity Component System) is a style of development you may have heard of if you’ve been in game development long enough. It’s a design that allows everything to be broken down into &lt;em&gt;entities&lt;&#x2F;em&gt; which are defined by their attached &lt;em&gt;components&lt;&#x2F;em&gt; which store data that can be queried and transformed by &lt;em&gt;systems&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Overall it is really conducive to Data Driven Design, which is a really cool paradigm that operates fairly differently than traditional OOP (Object Oriented Programming) that you’d find in Unity or Godot.&lt;&#x2F;p&gt;
&lt;p&gt;Yeah I know it’s a comparison to other engines but I wanted to illuminate a key detail here as a fun tool we can use later!.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Free_and_Open_Source&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Free_and_Open_Source&quot; aria-label=&quot;Anchor link for: Free_and_Open_Source&quot;&gt;Free and Open Source&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you’re someone reading this blog and know me from social media, you’re probably already on this and hopefully agree that having open source code for the tools you use (especially as a programmer) is a massive boon. Adding in that the engine itself is written the same as the games, and that drops the barrier to contribute code by a significant margin!.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Simple&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Simple&quot; aria-label=&quot;Anchor link for: Simple&quot;&gt;Simple&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This might not get a whole lot of attention but a key detail about Bevy is the simplicity. Components are typical rust structs, systems are just rust functions. Everything is fairly simple to set up and makes liberal usage of &lt;code&gt;Default::default()&lt;&#x2F;code&gt; and builder patterns. And this simplicity doesn’t get in the way of writing more advanced code systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What_I’ve_been_up_to&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_I’ve_been_up_to&quot; aria-label=&quot;Anchor link for: What_I’ve_been_up_to&quot;&gt;What I’ve been up to&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Since checking out bevy, I started working on a couple different projects to whet my appetite for this engine.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Games&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Games&quot; aria-label=&quot;Anchor link for: Games&quot;&gt;Games&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’ve started out on one game and I’m planning to get working on a second as time allows.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Watery_Wails&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Watery_Wails&quot; aria-label=&quot;Anchor link for: Watery_Wails&quot;&gt;Watery Wails&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Watery Wails is a horror game inspired by the &lt;em&gt;Five Nights At Freddy’s&lt;&#x2F;em&gt; series of games. Notably the original few games. It is also heavily inspired by experiences in my past including working at a pool as a lifeguard and some pretty tragic things I ended up witnessing there. Which is why I joke that it’s “made with trauma” (probably not a great joke but it helps me cope).&lt;&#x2F;p&gt;
&lt;p&gt;This game is planned to include a breadth of changes from my previous style of development. Notably usage of Bevy, unit testing, Hierarchical Task Network Planning (think super-charged GOAP), and tools for making translation files.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Magical_Farming,_Cooking,_and_Ranching_Game_(Title_TBD)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Magical_Farming,_Cooking,_and_Ranching_Game_(Title_TBD)&quot; aria-label=&quot;Anchor link for: Magical_Farming,_Cooking,_and_Ranching_Game_(Title_TBD)&quot;&gt;Magical Farming, Cooking, and Ranching Game (Title TBD)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This is a game both new and old. Previously I had tried to make a magical farming game in Godot that was inspired by Slime Rancher. It had cheesefruit crops, cute rats to ranch, and a super basic “spell” that acted as the vacuum tool.&lt;&#x2F;p&gt;
&lt;p&gt;The new addition is the cooking component. I think it would be fun to make the player play through little mini-games to prepare different foods. And then they could serve these magically imbued foods to their clients: adventuring parties! I’m hoping I can even add some fun references to some more well known “adventuring parties”. Though I may need to be vague is cases of copyright and such.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Prioritization&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Prioritization&quot; aria-label=&quot;Anchor link for: Prioritization&quot;&gt;Prioritization&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I’m not certain how I want to prioritize the different games. I’ve found my interest in horror wanes the more stable of a situation I’m in. So if I’m stressed,  I find solace in horror. But without that stress the horror is still enjoyable, but less interesting than ther swath of other games I could be working on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;So_why_leave_Godot?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_why_leave_Godot?&quot; aria-label=&quot;Anchor link for: So_why_leave_Godot?&quot;&gt;So why leave Godot?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have various reasons, but I would boil it down to primarily &lt;em&gt;Object Oriented Programming&lt;&#x2F;em&gt;. While I can’t blame OOP for everything , one of the major pain points I have hadc in various game projects was in rooted in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inheritance_(object-oriented_programming)&quot;&gt;Inheritance&lt;&#x2F;a&gt;. Modern day Object Oriented Design (OOD) has so many different solutions to resolve this. One such solution pushed among the Godot community is “Design By Composition”. That being, create new objects by compositing different components that are at least mostly self-contained. And that is definitely a solution I employed while working with Godot. But I’ve been working on games for over a decade now. And almost that entire time has been in OOD contexts. A brief history of the systems I’ve used to make games in the past:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MIT’s Scratch&lt;&#x2F;li&gt;
&lt;li&gt;Raw Java&lt;&#x2F;li&gt;
&lt;li&gt;LWJGL (Java)&lt;&#x2F;li&gt;
&lt;li&gt;LibGDX (Java)&lt;&#x2F;li&gt;
&lt;li&gt;Unity (C#)&lt;&#x2F;li&gt;
&lt;li&gt;Godot (C#)&lt;&#x2F;li&gt;
&lt;li&gt;Godot (GDscript)&lt;&#x2F;li&gt;
&lt;li&gt;Godot (Rust)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy (Rust)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While the journey has not been entirely linear, this journey has been heavily in the trenches of Object Oriented Programming. And in many ways I was starting to feel like I was just going through the motions to make some features. I craved some novelty, to return to the original reason I had started learning to make games in the first place.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Where_did_I_start?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Where_did_I_start?&quot; aria-label=&quot;Anchor link for: Where_did_I_start?&quot;&gt;Where did I start?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I started learning to write code in seventh grade (roughly age 12 for non-Americans). I was going to a private school that had such a weird mix of pivilige and non-privilige. Like it was still a private school with funding and such, but I was the “poor kid” in that group for where I lived, dressed, and such. The other side that was strange about the school, is there was no system for advanced learning. A trait I seemingly have always possessed is being a fast learner. My greatest strength will always be my ability to learn. And in the classes I was taking, I was exceptionally bored. Another fun fact about that school is that because of how America&#x2F;Minnesota handled education (at the time), none of the teachers were actually required to have a teaching license or even really any experience teaching. I had a Math teacher I would try to ask questions of and I’d just get a blank stare. I remember asking “Hey do we ever get to use &lt;em&gt;modulus&lt;&#x2F;em&gt; in this year?” and my teacher didn’t even know what that was. Which I guess modulus is a Discrete Math concept, not necessary for teaching trigonometry, but it would have been nice.&lt;&#x2F;p&gt;
&lt;p&gt;So I was exceptionally bored, I rarely had homework because it was so dumbed down. So I dove headfirst into what was immediately available: &lt;del&gt;becoming a better person&lt;&#x2F;del&gt; &lt;strong&gt;videogames&lt;&#x2F;strong&gt;. I was priviliged enough to basically always have a computer. I never really did console gaming besides Gameboy and DS. Of course Minecraft had just come out and I was obsessed. It was full of wonder and mystery, crying myself to sleep because someone online called me a “noob” and I didn’t know what it meant, and vast creativity. It didn’t take long for me to find mods and started wanted to make my own.&lt;&#x2F;p&gt;
&lt;p&gt;I got into programming, crucially, because I lacked the intellectual stimulation that makes me feel complete. I don’t just crave new challenges, I need them. What better challenge to tackle creating games using an entirely new design paradigm?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;So_why_Bevy?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_why_Bevy?&quot; aria-label=&quot;Anchor link for: So_why_Bevy?&quot;&gt;So why Bevy?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Besides all of the previous reasons to like Bevy that I mentioned earlier, Bevy is much closer to the kind of development that I enjoy. Bevy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Provides me with new design challenges to overcome&lt;&#x2F;li&gt;
&lt;li&gt;Gives me much more breathing room to tinker as I see fit.&lt;&#x2F;li&gt;
&lt;li&gt;Enables a modular development approach that I much prefer
&lt;ul&gt;
&lt;li&gt;You can even see my attempts to make modularity work in Godot through several of my Squiggles Zone &#x2F; Sqore based projects such as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QueenOfSquiggles&#x2F;WhereTheDeadLie&quot;&gt;Where The Dead Lie&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QueenOfSquiggles&#x2F;squiggle-pt&quot;&gt;Gruesome Claim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;Why_now?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Why_now?&quot; aria-label=&quot;Anchor link for: Why_now?&quot;&gt;Why now?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Recently I’ve been working on applying to some game industry jobs. And a few of them had quite interesting application requirements that really forced me to look past recent history and see my “career” with code in its entirety. Having done that, I realized how prolific I’ve been over the years. I’ve privated so many of the games I made because they included my full deadname as well as my ex’s name that I worked with back in highschool. But seriously I’ve been making a ton of games over the years. And my driving light has always been facing a challenge and overcoming it. The human spirit is indominatible and deserves all the spoils.&lt;&#x2F;p&gt;
&lt;p&gt;For me, this has become such an intrinsic element of my personal identity. I am a game &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.merriam-webster.com&#x2F;dictionary&#x2F;artisan&quot;&gt;artisan&lt;&#x2F;a&gt; before I’m a game developer. And I much prefer that terminology. Ity truely is an art for me. And no doubt I’m not alone in feeling that way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What’s_the_plan?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What’s_the_plan?&quot; aria-label=&quot;Anchor link for: What’s_the_plan?&quot;&gt;What’s the plan?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My plan, for the foreseeable future, is to pull on this thread of Bevy and Rust. Given I can easily create unit tests for different systems without needing to mock all the other modules affected by it, I can make better guarantees on functionality than I could with Godot. Stripping the shackles of OOD frees me to develop more systemic approaches to different functionalities. And I hope will be much more conducive to the types of games I want to make. Of course time will tell. But for now, I gotta say I’m having the most fun making games I’ve had in a long while. Even if my free time is severely limited recently.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Embedding GIFs</title>
          <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/guides/embedding-gifs/</link>
          <guid>https://queenofsquiggles.github.io/guides/embedding-gifs/</guid>
          <description xml:base="https://queenofsquiggles.github.io/guides/embedding-gifs/">&lt;h2 id=&quot;Hey_look!_A_new_post&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Hey_look!_A_new_post&quot; aria-label=&quot;Anchor link for: Hey_look!_A_new_post&quot;&gt;Hey look! A new post&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Yeah I’m moving the discussion about how I embed tenor GIFs out of the &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;guides&#x2F;fsm-vs-bt&#x2F;&quot;&gt;FSMs versus Behaviour Trees&lt;&#x2F;a&gt; page to make that page more readable and make a coherent page for different approaches to embedding gifs easily. As of writing, I’m adding a third recipe here so hopefully this is appreciated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;GIF_Embedding&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GIF_Embedding&quot; aria-label=&quot;Anchor link for: GIF_Embedding&quot;&gt;GIF Embedding&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;In_Jekyll&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#In_Jekyll&quot; aria-label=&quot;Anchor link for: In_Jekyll&quot;&gt;In Jekyll&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;_includes&#x2F;tenor.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;margin: auto; width: {{ include.width }}; border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3px &lt;&#x2F;span&gt;&lt;span&gt;solid black; padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenor-gif-embed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_postid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ include.data_postid }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-share-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_aspect_ratio&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ include.data_aspect_ratio }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ include.url }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {% if include.caption %}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ include.caption }} &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in any article (or page) I can just use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;{% include tenor.html data_postid=&amp;quot;THE-POST-ID&amp;quot; data_aspect_ratio=&amp;quot;ASPECT&amp;quot; width=&amp;quot;DESIRED-WIDTH&amp;quot; url=&amp;#39;EMBED-URL&amp;#39; caption=&amp;quot;OPTIONAL-CAPTION&amp;quot; %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the three values are stripped from the embed code for the gif: &lt;code&gt;data_postid&lt;&#x2F;code&gt;, &lt;code&gt;data_aspect_ratio&lt;&#x2F;code&gt;, and &lt;code&gt;url&lt;&#x2F;code&gt;. Those ensure the image is actually loaded. Then &lt;code&gt;width&lt;&#x2F;code&gt; controls how wide on the screen they are. I prefer &lt;code&gt;50%&lt;&#x2F;code&gt; for my gifs in this article. The the &lt;code&gt;caption&lt;&#x2F;code&gt; is an optional tag that will add some text below the gif.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;In_Hugo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#In_Hugo&quot; aria-label=&quot;Anchor link for: In_Hugo&quot;&gt;In Hugo&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For Hugo you need to use shortcodes. Which are not terribly different from Jekyll’s includes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;layouts&#x2F;shortcodes&#x2F;tenor.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;margin: auto; width: {{ .Get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}; border: 3px solid black; padding: 10px;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenor-gif-embed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_postid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_postid&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-share-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_aspect_ratio&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_aspect_ratio&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ if .Get &amp;quot;fallback&amp;quot; }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;fallback&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ else }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;No fallback provided!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ end }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;GIF embed failed. &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Click to view source.&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ if .Get &amp;quot;caption&amp;quot; }}
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Caption: &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ .Get &amp;quot;caption&amp;quot; }} &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ end }}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And loading the shortcode can be done in different ways (line breaks are ignored with Hugo’s shortcodes). Note that a space between &lt;code&gt;{{&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;&lt;&#x2F;code&gt; is only present because it would otherwise be rendered as normal in this page.&lt;&#x2F;p&gt;
&lt;p&gt;Easier to read:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;{{ &amp;lt; tenor 
&lt;&#x2F;span&gt;&lt;span&gt; data_postid=&amp;quot;8246706&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; data_aspect_ratio=&amp;quot;1.43103&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; width=&amp;quot;50%&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; url=&amp;#39;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt; caption=&amp;quot;Goku from Dragon Ball Z power up to &amp;#39;super saiyin&amp;#39;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; fallback=&amp;quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Shorter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;{{ &amp;lt; tenor data_postid=&amp;quot;8246706&amp;quot; data_aspect_ratio=&amp;quot;1.43103&amp;quot; width=&amp;quot;50%&amp;quot; url=&amp;#39;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&amp;#39; caption=&amp;quot;Goku from Dragon Ball Z power up to &amp;#39;super saiyin&amp;#39;&amp;quot; fallback=&amp;quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&amp;quot; &amp;gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;In_Zola&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#In_Zola&quot; aria-label=&quot;Anchor link for: In_Zola&quot;&gt;In Zola&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Yet another update to this. Zola has a templating system much more similar to Jekyll than hugo. One step forwards; two steps back 😅&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;templates&#x2F;shortcodes&#x2F;tenor.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;display: flex; flex-direction: column; justify-items: center; align-items: center; &amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{% if background %} bg-{{background}} {% else %} bg-secondary {% endif %} rounded&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50%&lt;&#x2F;span&gt;&lt;span&gt;; padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.5rem&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenor-gif-embed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-postid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data_postid }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-share-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-aspect-ratio&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data_aspect_ratio }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ fallback }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ url }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;GIF embed fallback in use. &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{% if background %} btn-{{background}} {% else %} btn-secondary {% endif %} rounded-bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.5rem&lt;&#x2F;span&gt;&lt;span&gt;; max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45%&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Caption: &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;{{ caption }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>Blog Update Feb. 2024 - C++ Development</title>
          <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/blog-update-cpp-engine-dev/</link>
          <guid>https://queenofsquiggles.github.io/meta/blog-update-cpp-engine-dev/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/blog-update-cpp-engine-dev/">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Caution&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hot Takes Inside!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;General_Update&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#General_Update&quot; aria-label=&quot;Anchor link for: General_Update&quot;&gt;General Update&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hey y’all! I haven’t been making much “Content™️” but I’ve been doing a lot of stuff otherwise! I’ve been talking with more professional game developers trying to figure out how I can break into the game development industry and actuall start a career. It’ll be one year since my graduation soon and I’d like to find some kind of employment in my field 😅&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Blog_Technical&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blog_Technical&quot; aria-label=&quot;Anchor link for: Blog_Technical&quot;&gt;Blog Technical&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As a technical detail, I switched the system used to create the blog. I was using Jekyll to create a static website and I switched to Hugo for doing the same. There’s a lot of benefits to switched to hugo. Writing is easier because it automatically refreshes my browser when detecting a change, manages images a lot nicer, and generally supports a much more robust website. I’m using a custom framework “HB (Hugo Bootstrap) Framework” (see the footer for links &amp;amp; details).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Resume_updates&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Resume_updates&quot; aria-label=&quot;Anchor link for: Resume_updates&quot;&gt;Resume updates&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I imagine unless you’re a tech recruiter (which if you are, why are you reading this? Hire me already!) you’re probably not watching my resume. But now after taking with several more professional developers I was able to garner some critiques on my resume. I’ve even had a recruiter say they remembered me based off of the pictures in my resume. (Go put pictures in your resume right now!)&lt;&#x2F;p&gt;
&lt;p&gt;I added some posts for some recent games that I had forgotten to do write-ups for. But they are currently really bare-bones at best. Mostly just showing off screenshots more than anything. I’m nervous I won’t be able to write a proper write-up for these games since its been so long since I made them, and I’d have to re-learn my own code-base to remember what I was doing and why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;C++???&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#C++???&quot; aria-label=&quot;Anchor link for: C++???&quot;&gt;C++???&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Yes! It has been a long while since I’ve done any development in C++. Mainly because I have had no reason to. I started programming with Java and made games with a pixel-raster system written in pure Java. And eventually worked up to LWJGL (which gave access to OpenGL draw calls). But for the most part, I have been doing scripting with game engines since I wanted to make games, and was less concerned with having fine-grain control over the intricacies of the runtime.&lt;&#x2F;p&gt;
&lt;p&gt;Some people have told me that any moment I spend brushing up on my C++ is not a moment wasted, with respect towards employment in the game industry. So I wanted to make sure I am not just capable but highly proficient in C++ game development.&lt;&#x2F;p&gt;
&lt;p&gt;I had two main project goals. One of which is complete with patches added from time to time. The other is a bit larger and I am still working through it as it is a full game written in C++.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_new_standard&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_new_standard&quot; aria-label=&quot;Anchor link for: A_new_standard&quot;&gt;A new standard&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
img::render(src, alt)
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;927&quot;&gt;XKCD reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am rather picky about build systems. And one of my biggest complaints when it comes to c++ build systems is how non-opinionated (wishy-washy) they are! What I really love about a build system like rust’s &lt;code&gt;cargo build&lt;&#x2F;code&gt; or C#’s &lt;code&gt;dotnet build&lt;&#x2F;code&gt; is that they expect a particular project layout, with a specific configuration file that details exactly what the build system needs to know to prep the code into an executable state.&lt;&#x2F;p&gt;
&lt;p&gt;When I searched for C++ build systems. The main ones that got recommended were “Make” and “CMake”.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;The_problem_with_Make&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_problem_with_Make&quot; aria-label=&quot;Anchor link for: The_problem_with_Make&quot;&gt;The problem with Make&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Make is a super generic build system for linux. You define a serious of tasks and each task and list zero or more tasks that it depends on. And by chaining these with arcane combinations of symbols, you can craft a moderately usable build system. And in that sense I’d consider it only slightly more efficient than just writing a shell script for all the &lt;code&gt;g++&lt;&#x2F;code&gt; calls I want.&lt;&#x2F;p&gt;
&lt;p&gt;The trouble as well is there is little to be said about a standard. The only standard is the name of the script file (I dare not call it a configuration file!). From there you can actually use Make to do just about anything. You could have a make-file that downloads images from a website, formats them, and exports them to a particular directory. Which is impressive. But again, that’s scripting, not necessarily a build system.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;The_problem_with_CMake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_problem_with_CMake&quot; aria-label=&quot;Anchor link for: The_problem_with_CMake&quot;&gt;The problem with CMake&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;CMake, or “the build system for creating make files”. It is arguably a very robust system which enables cross platform development and coordination of large code bases with less effort than most major build systems. Additionally, it is truely not a scripting system but an actual build system. Using the incredibly odd language system you can define variables and perform processes and… I promise it’s technically not a scripting system again.&lt;&#x2F;p&gt;
&lt;p&gt;The main detail in CMake that makes it more promising is that it doesn’t require you to write out your &lt;code&gt;g++&lt;&#x2F;code&gt; calls (since that would really break the cross platform capabilities). So all you have to do is define a project target and attach source files to that target. Simple right? Well every time you make, delete, or move a file, you need to change one &lt;strong&gt;or more&lt;&#x2F;strong&gt; &lt;code&gt;CMakeLists.txt&lt;&#x2F;code&gt; files.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;My_best_effort&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#My_best_effort&quot; aria-label=&quot;Anchor link for: My_best_effort&quot;&gt;My best effort&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I wanted a stupid simple build system that expects a specific project layout but uses that to create a very dynamic build approach. I never really intended for it to be used by anyone but myself so I named it “SSBS”, which is an acronym for “Squiggles Stupid Build System” but also sounds like a ship name, “S.S. Bullshit”. Please clap I am very clever 😢.&lt;&#x2F;p&gt;
&lt;p&gt;The build system itself is rather small and written in C++ for compiling C++ on linux specifically. I considered developing for cross platform. But the appeal of a simple Makefile to bootstrap the project was appealing.&lt;&#x2F;p&gt;
&lt;p&gt;Basically what it does is searches recursively in a &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt; directory for any &lt;code&gt;.c&lt;&#x2F;code&gt;, &lt;code&gt;.h&lt;&#x2F;code&gt;, &lt;code&gt;.cpp&lt;&#x2F;code&gt;, and &lt;code&gt;.hpp&lt;&#x2F;code&gt; files and adds them to a source list. It then generates &lt;code&gt;g++&lt;&#x2F;code&gt; commands for each source file and emits the objects into a similar tree structure as source in the &lt;code&gt;build&#x2F;&lt;&#x2F;code&gt; directory. Additionally, the output of the &lt;code&gt;g++&lt;&#x2F;code&gt; call is emitted to a log file. Then once the calls are complete, it reads the log files to parse out errors, warnings, and notes. (For now, I couldn’t manage to capture the actual output of the &lt;code&gt;g++&lt;&#x2F;code&gt; call and this is the best solution since linux has a piping system for commands).&lt;&#x2F;p&gt;
&lt;p&gt;Then it prints out all of the errors, warnings, and notes (with a little bit of style using a single-header library). It also ends with a breakdown of whether it succeeded or failed and how many errors, warnings, and notes were found.&lt;&#x2F;p&gt;
&lt;p&gt;I could probably write a lot more about SSBS. But unless literally anyone besides me finds interest in it, I might not? But I realize I might have to because it’s pretty telling for my skills and drive to create solutions for problems and easing friction of development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_new_game?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_new_game?&quot; aria-label=&quot;Anchor link for: A_new_game?&quot;&gt;A new game?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’m still playing around with name ideas. So far I like, “Watery Wails” since it is an interesting title, gives some but not all details of the content, and is also relatively unique. (I had considered “Sunken Souls” briefly but I know people working on a game called “Sunken …” that I don’t wanna be terribly similar in name to. To avoid competition.)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Engine_Development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Engine_Development&quot; aria-label=&quot;Anchor link for: Engine_Development&quot;&gt;Engine Development&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The area of the games industry I am most excited about is engine &amp;amp; tool development. And so for that purpose, this game is mostly an excuse to make a super basic game engine. Though unlike popular game engines such as “Godot” and less important engines like “Unity” have robust scripting capabilities, a straightforward GUI, and decent scene structure systems, the engine I am making is much closer to a library or framework. Technically it is a framework but I really want to be able to say I  made a custom engine so I’m calling it an engine.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of this engine is to be highly specialized. The reason for that is the more specialized a system is, the easier it is to get it feature complete. I really like making 3D PBR horror games with as much style as I can muster.&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;blockquote&gt;
&lt;p&gt;Important note: I got this model online, I didn’t model it myself.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here you can see a few interesting details:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The object with multiple different PBR materials attached&lt;&#x2F;li&gt;
&lt;li&gt;Albedo, Normal, ORM mapping enabled&lt;&#x2F;li&gt;
&lt;li&gt;ImGUI used to display basic debug information (for now!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some details you can’t really see here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Resource management system (prevents loading the same file twice)&lt;&#x2F;li&gt;
&lt;li&gt;Smart-pointer backed systems&lt;&#x2F;li&gt;
&lt;li&gt;Render batching through single render passes for objects with a common shader program.
&lt;ul&gt;
&lt;li&gt;I’m toying with the idea of further sorting by material, but that would be a bit extra work and I’m not going to optimize much until I actually encounter performance issues.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Robust input action system through a TOML file specification
&lt;ul&gt;
&lt;li&gt;Includes gamepad support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Game Objects&lt;&#x2F;li&gt;
&lt;li&gt;Transform objects (position, rotation, and scale packaged together and easily loaded into model &lt;em&gt;transform&lt;&#x2F;em&gt; matrix)&lt;&#x2F;li&gt;
&lt;li&gt;A custom GLSL &lt;code&gt;#include&lt;&#x2F;code&gt; system (which allows for shared information across many shader files).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My goals for the engine, “Next Steps”:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Support static environment irradiance maps in the PBR rendering (to make reflections and such more realistic)&lt;&#x2F;li&gt;
&lt;li&gt;Access mouse input from the input system (very little work, it’s just a bit lower priority than others)&lt;&#x2F;li&gt;
&lt;li&gt;OpenAL integration for sound effects and streamed music. (My current task as of writing)&lt;&#x2F;li&gt;
&lt;li&gt;Some kind of GUI system
&lt;ul&gt;
&lt;li&gt;I’m tempted to opt for ImGUI as the GUI system for the game as a whole, but I think making my own GUI system would be significantly better because it would give me skills I could translate into a UI&#x2F;UX position if that’s what gets my “foot in the door” in the game industry.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;Game_Development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Development&quot; aria-label=&quot;Anchor link for: Game_Development&quot;&gt;Game Development&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The actual gameplay of this game is almost entirely theoretical at this moment. Since I really need a ton of engine systems in place before I’m comfortable actually building gameplay systems.&lt;&#x2F;p&gt;
&lt;p&gt;The overall goal is to be similar to &lt;em&gt;Five Nights At Freddy’s&lt;&#x2F;em&gt; (Specifically the first game) and &lt;em&gt;I’m On Observation Duty&lt;&#x2F;em&gt; (maybe I should give my game a longer title to fit in?? More syllables == better game right?)&lt;&#x2F;p&gt;
&lt;p&gt;The game will take place at a pool since I’m drawing on my experience when I worked as a lifeguard. I had my fair share of terrifying experiences there, and I want to try to translate the fear and axiety of literally having people’s lives in your hands into the game. And a hefty amount of frustration for the parents that would literally abandon their kids to the pool because it was cheaper than daycare. (Basically take all of the corporatism parody of later FNAF games and translate that into parody of negligent parents and I think I’m there?)&lt;&#x2F;p&gt;
&lt;p&gt;One of my main struggles is finding ways to share what I’m making. Until I am ready to work on the game itself, any screenshots would just be “Hey look at this raw code that made such and such system more efficient!” (Imagine trying to write alt text for that!)&lt;&#x2F;p&gt;
&lt;h5 id=&quot;Release?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Release?&quot; aria-label=&quot;Anchor link for: Release?&quot;&gt;Release?&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;I have absolutely no clue when a release date would be. But I can say that it will be available for linux and &lt;em&gt;possibly&lt;&#x2F;em&gt; windows. I need to do a bit more research into how cross compilation for MacOS is on linux, but if I have to buy a developer’s license the cost is too high for whatever meager profit I’ll be making on this game. If I somehow break $50 I’m literally going to have a party or something.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Why_this_blog_post?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Why_this_blog_post?&quot; aria-label=&quot;Anchor link for: Why_this_blog_post?&quot;&gt;Why this blog post?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Well I wanted to give a lot of general updates. But also I wanted to talk about my C++ development a little bit since it’s probably going to take a long while before it’s actually done.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Portfolio</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/about/</link>
          <guid>https://queenofsquiggles.github.io/about/</guid>
          <description xml:base="https://queenofsquiggles.github.io/about/">&lt;h2 id=&quot;Notable_Projects&quot;&gt;Notable Projects&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;Open_Source_Contributions&quot;&gt;Open Source Contributions&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;Godot_Rust&quot;&gt;Godot Rust&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Godot Rust is a library that allows for writing rust code that integrates with the Godot Game Engine, whether for specific game scripting or for more general purpose tools development&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Recipes Section Documentation Guides
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;godot-rust.github.io&#x2F;book&#x2F;recipes&#x2F;custom-resources.html&quot;&gt;Custom Resources&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;godot-rust.github.io&#x2F;book&#x2F;recipes&#x2F;editor-plugin&#x2F;index.html&quot;&gt;Editor Plugins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;godot-rust.github.io&#x2F;book&#x2F;recipes&#x2F;engine-singleton.html&quot;&gt;Engine Singletons&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;godot-rust.github.io&#x2F;book&#x2F;recipes&#x2F;custom-icons.html&quot;&gt;Custom Icons&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that some of these pages may have been updated since my last contribution&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;Games&quot;&gt;Games&lt;&#x2F;h3&gt;


&lt;div class=&quot;container flex flex-row flex-wrap mx-auto gap-4 justify-center&quot;&gt;
    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;couch.png&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Gruesome Claim &lt;&#x2F;h2&gt;
			&lt;small&gt;
				A short horror game with a focus on realism and advanced AI pathing techniques.
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;wtdl-img-5.png&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Where The Dead Lie - January 2023 &lt;&#x2F;h2&gt;
			&lt;small&gt;
				made in roughly a week to test my skills as a game developer and the feature of the Godot 4 beta releases.
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;screenshots_1.png&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; This Metal Heart Still Beats - September 2022 &lt;&#x2F;h2&gt;
			&lt;small&gt;
				This game was made for Ludum Dare 51, which had the theme ‘Every 10 seconds’.
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;ascension_header.png&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Ascension Of The Lamb - July 2022 &lt;&#x2F;h2&gt;
			&lt;small&gt;
				a ‘Retro PBR’ game about exploring a mysterious cult bunker
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
&lt;&#x2F;div&gt;&lt;h3 id=&quot;Tech_Demos&quot;&gt;Tech Demos&lt;&#x2F;h3&gt;


&lt;div class=&quot;container flex flex-row flex-wrap mx-auto gap-4 justify-center&quot;&gt;
    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;demo_physics.gif&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Project Furball &lt;&#x2F;h2&gt;
			&lt;small&gt;
				A tech art project and tutorial creating a simple shell fur system that reacts to movement and is highly customizable.
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&amp;#x2F;tech&amp;#x2F;shell-fur-breakdown&amp;#x2F;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;image1.png&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Godot Lighting Demo &lt;&#x2F;h2&gt;
			&lt;small&gt;
				A small educational tool showing off how different lighting models affect the appearance of a simple scene.
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&amp;#x2F;tech&amp;#x2F;godot-lighting-exploration&amp;#x2F;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;tool_preview_1.png&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Godot SDF Gen - May 2022 &lt;&#x2F;h2&gt;
			&lt;small&gt;
				Godot SDF Gen is a small tool I made for myself and others to easily generate ‘Signed Distance Field’ textures, which can be used to create a variety of fun effects
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&amp;#x2F;tools&amp;#x2F;godot-sdf-gen&amp;#x2F;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
&lt;&#x2F;div&gt;&lt;h3 id=&quot;Educational&quot;&gt;Educational&lt;&#x2F;h3&gt;


&lt;div class=&quot;container flex flex-row flex-wrap mx-auto gap-4 justify-center&quot;&gt;
    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;banner-notext.jpg&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Behaviour Trees vs State Machines &lt;&#x2F;h2&gt;
			&lt;small&gt;
				A technical edutainment breakdown of the use cases and logic behind behaviour trees and finite state machines in game development
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&amp;#x2F;guides&amp;#x2F;fsm-vs-bt&amp;#x2F;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
    

&lt;div class=&quot;not-prose flex justify-center&quot;&gt;
	&lt;div class=&quot;grow card bg-base-200 shadow-xl max-w-md&quot;&gt;
		&lt;figure&gt;
			&lt;img src=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;about&#x2F;banner.jpg&quot; &#x2F;&gt;
		&lt;&#x2F;figure&gt;
		&lt;div class=&quot;card-body&quot;&gt;
			&lt;h2&gt; Game Design using Obsidian &lt;&#x2F;h2&gt;
			&lt;small&gt;
				A guide on how to organize and plan small game development projects using the free notes app, Obsidian. Which includes relevant examples from my game project, ‘Contact Range’
			&lt;&#x2F;small&gt;
			&lt;div class=&quot;card-actions justify-end&quot;&gt;
				&lt;a href=&quot;&amp;#x2F;guides&amp;#x2F;game-design-using-obsidian&amp;#x2F;&quot; class=&quot;btn btn-primary&quot;&gt;Read more&lt;&#x2F;a&gt;
			&lt;&#x2F;div&gt;
		&lt;&#x2F;div&gt;
	&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

    
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Technology_Experience&quot;&gt;Technology Experience&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;Software&quot;&gt;Software&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Software&lt;&#x2F;th&gt;&lt;th&gt;Years&lt;&#x2F;th&gt;&lt;th&gt;Type&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Godot&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;Hobby development&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Unity&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;Hobby Development&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Blender&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3D Game art&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Krita&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;2D Game art&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Inkscape&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;Vector Art (primarily icons)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Office Suite&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;Word processing, Sheets, Presentation, etc…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;Languages&quot;&gt;Languages&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Web&lt;&#x2F;th&gt;&lt;th&gt;Scripting&lt;&#x2F;th&gt;&lt;th&gt;System&#x2F;Native&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;C#&lt;&#x2F;td&gt;&lt;td&gt;C#&lt;&#x2F;td&gt;&lt;td&gt;C#&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Python&lt;&#x2F;td&gt;&lt;td&gt;Python&lt;&#x2F;td&gt;&lt;td&gt;Rust&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;HTML&lt;&#x2F;td&gt;&lt;td&gt;GDScript&lt;&#x2F;td&gt;&lt;td&gt;Java&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CSS&lt;&#x2F;td&gt;&lt;td&gt;lua&lt;&#x2F;td&gt;&lt;td&gt;C++&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;JavaScript&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TypeScript&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Shopify&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;Hobbies&quot;&gt;Hobbies&lt;&#x2F;h2&gt;
&lt;p&gt;I enjoy a variety of things including&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cooking&lt;&#x2F;li&gt;
&lt;li&gt;At home, improvised film review&lt;&#x2F;li&gt;
&lt;li&gt;Spending time with my family&lt;&#x2F;li&gt;
&lt;li&gt;Hiking&lt;&#x2F;li&gt;
&lt;li&gt;Camping&lt;&#x2F;li&gt;
&lt;li&gt;Playing games myself&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Ascension Of The Lamb</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/games/ascension-of-the-lamb/</link>
          <guid>https://queenofsquiggles.github.io/games/ascension-of-the-lamb/</guid>
          <description xml:base="https://queenofsquiggles.github.io/games/ascension-of-the-lamb/">&lt;h2 id=&quot;Game_Overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Overview&quot; aria-label=&quot;Anchor link for: Game_Overview&quot;&gt;Game Overview&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Ascension Of The Lamb&lt;&#x2F;em&gt; is a “Retro PBR” game about exploring a mysterious cult bunker.&lt;&#x2F;p&gt;
img::render(src, alt)&lt;!-- ![A dark, dirty tunnel illuminated by a weak flashlight](ascension_gallery_1.png) --&gt;
&lt;h2 id=&quot;Story_of_the_Creation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Story_of_the_Creation&quot; aria-label=&quot;Anchor link for: Story_of_the_Creation&quot;&gt;Story of the Creation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I participated in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gogodotjam.com&#x2F;the-jam&#x2F;&quot;&gt;Go Godot Jam 3&lt;&#x2F;a&gt;, which to save you a click is a game jam coordinated by the Godot community, specifically ‘Redefine Gamedev’, who is a fairly active member of the community. The jam was very exciting, with online social events planned for participants and hosted by various well known community members.&lt;&#x2F;p&gt;
&lt;p&gt;I participated in the “Classic” experience, which was the easier of the two. We had roughly 9 days to make the game and were allowed to work on a team. I did end up working alone. But I was still determined to finish this game. I was excited to get working on making horror games. And for this one, I wanted to focus on setting up a proper atmosphere. Which if the feedback I got was honest, I think I succeeded there.&lt;&#x2F;p&gt;
&lt;p&gt;The Theme for the jam was “Evolution” and I wanted to take that into an artistic interpretation of the cultists believing they would “evolve” or rather ascend into a higher form of life. The cult itself was inspired by some of the famous American cults from the 80s and 90s.&lt;&#x2F;p&gt;
img::render(src, alt)&lt;h2 id=&quot;Gameplay&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gameplay&quot; aria-label=&quot;Anchor link for: Gameplay&quot;&gt;Gameplay&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The game is essentially a walking simulator. There is a simple physics simulation system that I used to make some simple puzzles and encourage exploration. There are two main &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tvtropes.org&#x2F;pmwiki&#x2F;pmwiki.php&#x2F;Main&#x2F;LockAndKeyPuzzle&quot;&gt;“lock and key”&lt;&#x2F;a&gt; puzzles which serve to stop the player and encourage them to explore the area more.&lt;&#x2F;p&gt;
img::render(src, alt)&lt;h2 id=&quot;Visual_Style_-_Retro_PBR&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Visual_Style_-_Retro_PBR&quot; aria-label=&quot;Anchor link for: Visual_Style_-_Retro_PBR&quot;&gt;Visual Style - Retro PBR&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For this game, I wanted to create a Playstation-similar style. I personally don’t have any nostalgia for the Playstation, but I’ve seen a lot of other small indie horror games using the Playstation style to evoke a nostalgic feeling in the players. I wanted to add my own twist to it so I tweaked the parameters a bit. I kept the texture size of 128x128 and the dithering. But I swapped the standard blocky &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bayer_filter&quot;&gt;bayer-matrix dithering&lt;&#x2F;a&gt; for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;momentsingraphics.de&#x2F;BlueNoise.html&quot;&gt;blue noise dithering&lt;&#x2F;a&gt;. I used two noise textures scrolling in different directions across the screen to affect the dithering which gave every surface a almost pulsating effect. Additionally, while I was going for a Retro look, I opted to use &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Physically_based_rendering&quot;&gt;PBR textures&lt;&#x2F;a&gt;, specifically albedo, metallic, normal, and roughness.&lt;&#x2F;p&gt;
&lt;p&gt;I got some praise for this visual effect and I’ve taken to calling it “Retro PBR” as a general way to describe Retro-similar visuals that utlize a PBR rendering pipeline.&lt;&#x2F;p&gt;
&lt;p&gt;I did struggle a lot with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.opengl-tutorial.org&#x2F;intermediate-tutorials&#x2F;tutorial-16-shadow-mapping&#x2F;&quot;&gt;“shadow acne”&lt;&#x2F;a&gt;. It was quite difficult because this version of Godot had some issues with the 3D rendering. It was generally considered unfit for making 3D games, but I tried anyway.&lt;&#x2F;p&gt;
img::render(src, alt)&lt;h2 id=&quot;Overall_Reception&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Overall_Reception&quot; aria-label=&quot;Anchor link for: Overall_Reception&quot;&gt;Overall Reception&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The game did fairly well considering how it was made. Feedback ranged but there were a few common notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Writing is very good&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Atmosphere is well set up&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
The game lacks action, which makes it less fun to play&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Some players suggested adding jumpscares to make more of a haunted house experience&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
img::render(src, alt)img::render(src, alt)&lt;h2 id=&quot;My_comments_on_the_game&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#My_comments_on_the_game&quot; aria-label=&quot;Anchor link for: My_comments_on_the_game&quot;&gt;My comments on the game&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I feel that this game was a success for where I was at my experience level for the time. I had some specific goals and I accomplished them. Because I went for an artistic interpretation of the jam theme, it did not do very well. Likewise, I encountered several issues with my workflow such as a lack of experience in Blender, which I used for creating the level geometry, as well as struggling with the 3D capabilities of Godot 3, which uses a fairly outdated &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.khronos.org&#x2F;opengles&#x2F;&quot;&gt;OpenGL ES 3&lt;&#x2F;a&gt; based rendering engine.&lt;&#x2F;p&gt;
&lt;p&gt;I think like many of my projects, this game served as an opportunity for me to learn. The feedback I got for this game really helped me hone my craft and I am incredibly grateful to everyone involved in the jam for helping me grow.&lt;&#x2F;p&gt;
img::render(src, alt)img::render(src, alt)&lt;h2 id=&quot;Widget&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Widget&quot; aria-label=&quot;Anchor link for: Widget&quot;&gt;Widget&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;div class=&quot;container max-w-md&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;itch.io&#x2F;embed&#x2F;1562397?dark=true&quot; width=&quot;45%&quot; frameborder=&quot;0&quot;&gt;
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;queenofsquiggles.itch.io&amp;#x2F;the-ascension-of-the-lamb&quot;&gt;
            The Ascension Of The Lamb by QueenOfSquiggles
        &lt;&#x2F;a&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h1 id=&quot;Gallery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gallery&quot; aria-label=&quot;Anchor link for: Gallery&quot;&gt;Gallery&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_header.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_header.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_header.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_1.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_1.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_2.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_2.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_2.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_3.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_3.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_3.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_4.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_4.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_4.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_5.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_5.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_5.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_6.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_6.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_6.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_7.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_7.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_7.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;ascension-of-the-lamb&#x2F;ascension_gallery_8.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;ascension_gallery_8.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;ascension_gallery_8.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Contact Range</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/games/contact-range/</link>
          <guid>https://queenofsquiggles.github.io/games/contact-range/</guid>
          <description xml:base="https://queenofsquiggles.github.io/games/contact-range/">&lt;h2 id=&quot;Release_Trailer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Release_Trailer&quot; aria-label=&quot;Anchor link for: Release_Trailer&quot;&gt;Release Trailer&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;div class=&quot;not-prose container mx-auto justify-center&quot;&gt;
    &lt;iframe class=&quot;w-full aspect-video&quot; height=&quot;auto&quot;
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;7z3I9_15p2w&quot;
        webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;Trailer is made from 100% in-game footage&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;contact-range&#x2F;sensor_array.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;sensor_array.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;sensor_array.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;contact-range&#x2F;pilot.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;pilot.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;pilot.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;contact-range&#x2F;captain.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;captain.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;captain.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;contact-range&#x2F;wrench.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;wrench.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;wrench.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Gruesome Claim</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/games/gruesome-claim/</link>
          <guid>https://queenofsquiggles.github.io/games/gruesome-claim/</guid>
          <description xml:base="https://queenofsquiggles.github.io/games/gruesome-claim/">&lt;h2 id=&quot;Gruesome_Claim&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gruesome_Claim&quot; aria-label=&quot;Anchor link for: Gruesome_Claim&quot;&gt;Gruesome Claim&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This game was my foray into photo-realism with Godot 4. The game itself relied heavily on third party, high quality assets. The focus on my work on it was to create interesting mechanics.&lt;&#x2F;p&gt;
&lt;p&gt;The premise of the game is that you play as an insurance investigator checking in on a client who seems to have suddenly stopped paying.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Interesting_Pathing_Constraints&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Interesting_Pathing_Constraints&quot; aria-label=&quot;Anchor link for: Interesting_Pathing_Constraints&quot;&gt;Interesting Pathing Constraints&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Teardrop (That funky clown doll), has three distinct stages of presence, with increasing threat to the player.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Ominous_Presence&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Ominous_Presence&quot; aria-label=&quot;Anchor link for: Ominous_Presence&quot;&gt;Ominous Presence&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Teardrop takes up two different, static poses during this phase. As the player aclimates themselves with the game space, they can be unnerved by Teardrop, but are not in any real danger.&lt;&#x2F;p&gt;
&lt;p&gt;The first setpiece is her in a rocking chair and the second is her &lt;del&gt;masturbating&lt;&#x2F;del&gt; lounging on a couch in a different room.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Obstruction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Obstruction&quot; aria-label=&quot;Anchor link for: Obstruction&quot;&gt;Obstruction&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;After the player has found a few of the insurance claim items, Teardrop converts to a stage where she will find a suitable location to teleport to. She will only teleport if the player is not able to see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Her current location&lt;&#x2F;li&gt;
&lt;li&gt;Her target location&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This helps with the premise that she is actually moving to these locations off-screen. While standing she plays a simple animation and watches the player. If the player gets too close she will “jumpscare” them (which is a game over). As long as the player pays attention to where they are going, they are in very little danger during this phase.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Weeping_Angel&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Weeping_Angel&quot; aria-label=&quot;Anchor link for: Weeping_Angel&quot;&gt;Weeping Angel&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Literally in the code of the game I called the sensor for her being on-screen the “Weeping Angel Sensor”. Given that, you can guess how she operates. She will crawl along the floor and stop moving once the player looks at her. Though that isn’t entirely accurate. She is offset by a small timer at both ends, meaning you cn look away very quickly without triggering her motion, and once looking at her, she will continue to move for a short time. This solves two problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The player needs to look where they are going without entirely losing track of Teardrop&lt;&#x2F;li&gt;
&lt;li&gt;The player might &lt;em&gt;never notice&lt;&#x2F;em&gt; what is happening without her moving for a short second after being seen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;Interesting_Navigation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Interesting_Navigation&quot; aria-label=&quot;Anchor link for: Interesting_Navigation&quot;&gt;Interesting Navigation&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;I honestly had forgotten to fill this out, but I was able to see what I did when I made an update to the game on September 14th, 2024.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are two different methods of navigation that Teardrop uses. The most efficient way to find a path from point A to point B is using a Navigation Mesh. But Teardrop also makes use of a more dynamic raycast based sensor system that allows her to avoid obstacles (mainly preventing her from hugging the wall which makes corners unfair for the player).
A combination of the guidance from a traditional pathing system and a dynamic sensor based steering system allows her to semi-organically navigate the apartment. Unfortunately this interesting system isn’t really shown off terribly well since she doesn’t move on screen much, the scene is very static, and there’s just the one of her.&lt;&#x2F;p&gt;
&lt;p&gt;I think in the future I definitely want to revisit this approach for monster AI agents. Perhaps when I finally get around to fleshing out Watery Wails???&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Gallery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gallery&quot; aria-label=&quot;Anchor link for: Gallery&quot;&gt;Gallery&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;entrance.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;entrance.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;entrance.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;back_hallway.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;back_hallway.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;back_hallway.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;lamp_desk.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;lamp_desk.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;lamp_desk.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;clock.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;clock.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;clock.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;couch.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;couch.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;couch.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;camera.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;camera.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;camera.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;gruesome-claim&#x2F;storage.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;storage.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;storage.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>This Metal Heart Still Beats</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/games/this-metal-heart-still-beats/</link>
          <guid>https://queenofsquiggles.github.io/games/this-metal-heart-still-beats/</guid>
          <description xml:base="https://queenofsquiggles.github.io/games/this-metal-heart-still-beats/">&lt;h2 id=&quot;Game_Overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Overview&quot; aria-label=&quot;Anchor link for: Game_Overview&quot;&gt;Game Overview&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This game was made for Ludum Dare 51, which had the theme “Every 10 seconds”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Story&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Story&quot; aria-label=&quot;Anchor link for: Story&quot;&gt;Story&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I made the game a story of a person and their robotic partner, Ava, who has short circuited. You as the player have to try to fix their wiring while they are in a ‘sleep mode’ that ticks their circuits every ten seconds. The game is mostly a puzzle game of having Ava clean up some trash. The circuits are intentionally similar to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dev.epicgames.com&#x2F;documentation&#x2F;en-us&#x2F;unreal-engine&#x2F;blueprints-visual-scripting-in-unreal-engine?application_version=5.1&quot;&gt;Unreal’s Blueprints&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Technical_Information&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Technical_Information&quot; aria-label=&quot;Anchor link for: Technical_Information&quot;&gt;Technical Information&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At the time of development, the Godot Engine Development Team had announced they would be sunsetting the “Visual Script” language for Godot. It was a visual scripting language option similar to Blueprints, but lacking in many ways, which led to the sunsetting. There were many flaws with it, one of the key flaws was that it was slower to make functionality in Visual Script than it was to write it in GDScript. And the logical flow of Visual Script was nearly identical to GDScript.&lt;&#x2F;p&gt;
&lt;p&gt;Thinking of these problems, and often referencing Unreal Engine’s documentation on Blueprints, I decided to try to make a small programming puzzle game. I made sure to focus on “macro level” functions. So instead of smaller components I worked on specific actions and sequencing.&lt;&#x2F;p&gt;
&lt;p&gt;I used an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dzone.com&#x2F;articles&#x2F;design-patterns-event-bus&quot;&gt;Event Bus&lt;&#x2F;a&gt; to decouple the different interlocked systems. Mainly I used the Event Bus to push events for each of the node actions.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: in this case “node” is referring to the nodes in the visual scripting system within the game. However it is worth noting that Godot’s basic elements of structure are also called “node” because the structure of a program in Godot is in a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;tutorials&#x2F;scripting&#x2F;scene_tree.html&quot;&gt;Tree of Nodes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There were several subscribers to these events. The logging system would print out information about what actions are being taken, or if a sensor event is going unhandled. Ava would listen to the action events and perform them in sequence with a small time delay and some smooting to make the actions more appealing. However, because they used an Event Bus and neither depended on each other, I was able to insert events manually and debug each component on its own, which saved valuable time in the game jam.&lt;&#x2F;p&gt;
&lt;p&gt;Surprisingly enough, Godot’s UI system has the structure for a basic node and sockets GUI. I customized them with a custom theme and worked to make sure they were usable for the game.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Technical_Failings&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Technical_Failings&quot; aria-label=&quot;Anchor link for: Technical_Failings&quot;&gt;Technical Failings&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;Missing_Failure_State&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Missing_Failure_State&quot; aria-label=&quot;Anchor link for: Missing_Failure_State&quot;&gt;Missing Failure State&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I originally wanted the tension of the game to come from making a mistake. I planned on having the fail state be when Ava’s circuits tick while the circuits are being manipulated, or are in an invalid configuration. However, I didn’t finish this system, and I put too much effort to prevent the players from creating an invalid configuration.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Event_System&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Event_System&quot; aria-label=&quot;Anchor link for: Event_System&quot;&gt;Event System&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Events were scripted in GDScript, which largely relies on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Duck_typing&quot;&gt;Duck Typing&lt;&#x2F;a&gt; over &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nominal_type_system&quot;&gt;nominative typing&lt;&#x2F;a&gt;. As such using specific Event classes to differentiate and encapsulate the event data didn’t make a lot of sense. Or at least would have been too cumbersome in that paradigm. So I opted for a string serialization, which can be seen in the log. Ava’s actions are printing the unedited event string. This event string had to be constructed and subsequently parsed by each subscriber. In this case there were only two subscribers and a very short list of possible events. So handling this was relatively simple. But since working on this game, I’ve opted to use C# over GDScript in order to make more coherent Event Bus structures using delegates and C# events. C# is available as an optional scripting language for Godot, and there has been talk of making it included in the “standard build” of Godot 4, but as of writing this is not the case.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Free_Movement&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Free_Movement&quot; aria-label=&quot;Anchor link for: Free_Movement&quot;&gt;Free Movement&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Despite forcing an integer based movement system, and a 2D tile based world, the motion is actually in pixels and not in tiles. So if someone tells Ava to move 3 units to the left, they will slide 3 pixels to the left instead of 3 tiles, which was generally expected of a puzzle game of this nature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Reception&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Reception&quot; aria-label=&quot;Anchor link for: Reception&quot;&gt;Reception&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The game was made for the “Compo” version of the jam, which is 48 hours long instead of 72 hours. It ranked 142nd out of 2421 submitted projects (623 of which were in the Compo). This places it in the top 6% of games submitted in the competition. If you are interested in more information about Ludum Dare 51, the host has created an interesting &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ldjam.com&#x2F;events&#x2F;ludum-dare&#x2F;51&#x2F;stats&quot;&gt;Statistics Page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Widget&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Widget&quot; aria-label=&quot;Anchor link for: Widget&quot;&gt;Widget&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;div class=&quot;container max-w-md&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;itch.io&#x2F;embed&#x2F;1726321?dark=true&quot; width=&quot;45%&quot; frameborder=&quot;0&quot;&gt;
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;queenofsquiggles.itch.io&amp;#x2F;this-metal-heart-still-beats&quot;&gt;
            This Metal Heart Still Beats by QueenOfSquiggles
        &lt;&#x2F;a&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Gallery&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gallery&quot; aria-label=&quot;Anchor link for: Gallery&quot;&gt;Gallery&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;this-metal-heart-still-beats&#x2F;screenshots_1.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;screenshots_1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;screenshots_1.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;this-metal-heart-still-beats&#x2F;screenshots_2.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;screenshots_2.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;screenshots_2.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;this-metal-heart-still-beats&#x2F;screenshots_4.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;screenshots_4.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;screenshots_4.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;this-metal-heart-still-beats&#x2F;screenshots_3.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;screenshots_3.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;screenshots_3.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Where The Dead Lie</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/games/where-the-dead-lie/</link>
          <guid>https://queenofsquiggles.github.io/games/where-the-dead-lie/</guid>
          <description xml:base="https://queenofsquiggles.github.io/games/where-the-dead-lie/">&lt;h2 id=&quot;Game_Overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Overview&quot; aria-label=&quot;Anchor link for: Game_Overview&quot;&gt;Game Overview&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Where The Dead Lie is a short horror experience made in roughly a week to test my skills of game development and the features of Godot 4’s beta release 16.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Goals_and_Lessons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Goals_and_Lessons&quot; aria-label=&quot;Anchor link for: Goals_and_Lessons&quot;&gt;Goals and Lessons&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For this game I wanted to try out the features of Godot 4. Mainly the new Vulkan based rendering engine and the various refactors made for the C# scripting system. Additionally, I wanted to stretch my skills a bit by trying a genre of games that I had never made before, jumpscare horror games. While I had a general idea of how jumpscare horror games (JHG) work, I had never properly made one of these games myself and wanted to see if I could.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, I wanted to work on balancing priorities between my games and my school work. So I also wanted to make sure that the game never got more important to me than my school work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Goals&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Goals&quot; aria-label=&quot;Anchor link for: Goals&quot;&gt;Goals&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Make a Jumpscare Horror Game&lt;&#x2F;li&gt;
&lt;li&gt;Utilize the new Vulkan Renderer and “Signed Distance Field Global Illumination” (SDFGI)&lt;&#x2F;li&gt;
&lt;li&gt;Use lessons from &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;@ascension-of-the-lamb.md&quot;&gt;Ascension Of The Lamb&lt;&#x2F;a&gt; to create a creepy atmosphere&lt;&#x2F;li&gt;
&lt;li&gt;Get some practice with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.blender.org&#x2F;&quot;&gt;Blender&lt;&#x2F;a&gt; to make semi-realistic models&lt;&#x2F;li&gt;
&lt;li&gt;Don’t let the game get a higher priority than school work&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Lessons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Lessons&quot; aria-label=&quot;Anchor link for: Lessons&quot;&gt;Lessons&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I learned a lot from making this game. Firstly I learned that making a JHG can be quite fun, even if I don’t personally enjoy the genre as much. Additionally, I did a lot of work improving my asset workflow.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Asset_Workflow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Asset_Workflow&quot; aria-label=&quot;Anchor link for: Asset_Workflow&quot;&gt;Asset Workflow&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;For 3D models, I found that it was worth it to look for 3rd party assets under permissive licenses in some cases. Not necessarily because I couldn’t model them myself, but because allowing myself to use someone else’s asset saved me time which could be focused more and the tricky parts of the game.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, I was comfortable enough in Blender to make changes to existing models as needed. And I did this often to tweak embedded materials and sometimes the geometry as well.&lt;&#x2F;p&gt;
&lt;p&gt;Some changes I made include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Changing the Godot Robot to a blue metal instead of a rough blue&lt;&#x2F;li&gt;
&lt;li&gt;Changing the DSLR Camera to a simple metal&lt;&#x2F;li&gt;
&lt;li&gt;Simplifying the geometry of the DLSR Camera&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Lessons_Review&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Lessons_Review&quot; aria-label=&quot;Anchor link for: Lessons_Review&quot;&gt;Lessons Review&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Overall, I feel that I learned a lot. I got much better with using Blender for procedural material baking as well as texture painting. I learned techniques to cut the bake time down to several seconds per texture instead of several minutes per texture.&lt;&#x2F;p&gt;
&lt;p&gt;I also learned about the Godot 4 Vulkan Forwar+ Rendering pipeline. I was able to utilize more robust materials and larger textures to create very realistic scenes, while still including an air of fantasy to it through the monster and the general setting.&lt;&#x2F;p&gt;
&lt;p&gt;I also learned how to properly animate a character in Blender, utilizing Inverse Kinematics to make the animation process much easier.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Goals_Review&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Goals_Review&quot; aria-label=&quot;Anchor link for: Goals_Review&quot;&gt;Goals Review&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Make a Jumpscare Horror Game&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Utilize the new Vulkan Renderer and “Signed Distance Field Global Illumination” (SDFGI)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Use lessons from &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;@ascension-of-the-lamb.md&quot;&gt;Ascension Of The Lamb&lt;&#x2F;a&gt; to create a creepy atmosphere&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Get some practice with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.blender.org&#x2F;&quot;&gt;Blender&lt;&#x2F;a&gt; to make semi-realistic models&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Don’t let the game get a higher priority than school work&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Overall, I met my goals. The only one I failed with it letting it get in the way of school work. I’m incredibly passionate about game development. But when I allow myself to indulge in this passion, some other parts of my life tend to fade into the background. Now I was able to get everything done. Both the game and my school work. And I only had one late assignment during development. And that assignment was only late by about six hours.&lt;&#x2F;p&gt;
&lt;p&gt;So in summary, I’ve been growing in my ability to synthesize lessons from provious projects. I’ve also been gaining momentum with learning softwares.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Software_Used&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Software_Used&quot; aria-label=&quot;Anchor link for: Software_Used&quot;&gt;Software Used&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Godot 4 Beta 16
&lt;ul&gt;
&lt;li&gt;Beta versions available on the download repo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Krita
&lt;ul&gt;
&lt;li&gt;General 2D texturing and UI Elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;GIMP
&lt;ul&gt;
&lt;li&gt;Technical texture processing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Blender
&lt;ul&gt;
&lt;li&gt;3D Modelling&lt;&#x2F;li&gt;
&lt;li&gt;Texture Painting&lt;&#x2F;li&gt;
&lt;li&gt;Procedural Material Design&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rodzilla’s Material Maker
&lt;ul&gt;
&lt;li&gt;Procedural Material Generation&lt;&#x2F;li&gt;
&lt;li&gt;ORM Texture Generation
&lt;ul&gt;
&lt;li&gt;Ambient Occlusion&lt;&#x2F;li&gt;
&lt;li&gt;Roughness&lt;&#x2F;li&gt;
&lt;li&gt;Metalness&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Audacity
&lt;ul&gt;
&lt;li&gt;Audio Processing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;The_Windows_Debacle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_Windows_Debacle&quot; aria-label=&quot;Anchor link for: The_Windows_Debacle&quot;&gt;The Windows Debacle&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For whatever reason, the game would freeze on windows upon release. I use a Linux desktop for all of my daily purposes so I wasn’t able to properly test on Windows myself. I’m incredibly grateful to the various people who were able to provide system information and logs to help with the solving of the issue. We finally found a solution when I submitted an issue to the Godot Engine Repository. There I learned that there was a bug in the version of Godot where certain Resource failures could result in infinite recursion. Specifically the segment in my game that was triggering it was the font. I chose to try out the System Font feature and chose a few system fonts that I was familiar with “Noto Sans” and “Fira Sans”. Unfortunately, most Windows PCs didn’t have these fonts installed, which resulted in the bug.&lt;&#x2F;p&gt;
&lt;p&gt;Switching to a resource that used a Noto Sans TTF file fixed the problem, and I pushed it out to my players to enjoy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Marketing_and_Sales_Review&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Marketing_and_Sales_Review&quot; aria-label=&quot;Anchor link for: Marketing_and_Sales_Review&quot;&gt;Marketing and Sales Review&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For this game I did fairly minimal marketing. The game was released with fairly minimal fanfare. Despite this there was a surge in downloads upon release. In part due to the sale I made where for the first week of release the game could be claimed for free. After which the game costs $1 minimum, with a recommended $5. This sale was listed on a reddit thread and the game held a position in the “New and Popular” section for Horror games on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;&quot;&gt;Itch IO&lt;&#x2F;a&gt;. As of writing, the game has 1350 views, 109 downloads, and 3 purchases. Considering the effort put into this game, I feel this is a pretty good outcome. The genre is fairly saturated, so asking for money will tend to hurt downloads overall.&lt;&#x2F;p&gt;
&lt;p&gt;I think in th future, I might make the release sale much shorter. Most of the downloads occured during the sale, and only a few people chose to purchase. As much as I like to think myself a philanthropist, I really need that money to sustain my life. In the future, I think I’ll be removing options for free downloads. And for the demos, I’ll actually restrict the content of the game as opposed to allowing the full version of the game. I thought the “Pirate Version” was a fun way to describe it, and I set it to prompt the players to donate to me or purchase the game to remove the prompt. It opens pages in their browser and is generally annoying, but still a free way to play the entirety of the game.&lt;&#x2F;p&gt;
&lt;p&gt;Since the end of the sale, the Pirate Versions have been outpacing the paid versions in terms of releases.&lt;&#x2F;p&gt;
&lt;p&gt;In the future, I’ll change a lot in terms of marketing and sale style. I’m hoping that my next game will do much better. I’ll be utilizing Godot’s &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;tutorials&#x2F;export&#x2F;feature_tags.html#custom-features&quot;&gt;“Release Feature”&lt;&#x2F;a&gt; system to manage building demos that are restricted versions of the main game.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Butler,_and_Incremental_Patches&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Butler,_and_Incremental_Patches&quot; aria-label=&quot;Anchor link for: Butler,_and_Incremental_Patches&quot;&gt;Butler, and Incremental Patches&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the past, I’ve used GitHub and GitHub actions to push incremental builds to my projects. One issue I did have was with the autoamtic versioning and with the fact that I had limited processing minutes available on my free account.&lt;&#x2F;p&gt;
&lt;p&gt;I learned about a tool make by the Itch IO team called “Butler”, which was a command line tool for uploading the game with automatic incremental patches and consistent download channels on the project page. Despite being fairly comfortable in the terminal, I was hesitant to use Butler on my computer. But after trying it with this game I think it will be my default approach to uploading game builds going forwards.&lt;&#x2F;p&gt;
&lt;p&gt;I especially appreciate the “channel” approach which means that each named “channel” results in one downloadable file. And each channel can be updated independantly. Additonally, the versioning can be overridden or the default incrementer can be used.&lt;&#x2F;p&gt;
&lt;p&gt;For my next project, I’m planning on making a shell script to run through pushing all of the versions to their respective channels. Or possibly a python script to make it platform independant.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Screenshots&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Screenshots&quot; aria-label=&quot;Anchor link for: Screenshots&quot;&gt;Screenshots&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;wtdl-img-2.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;wtdl-img-2.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;wtdl-img-2.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;wtdl-img-1.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;wtdl-img-1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;wtdl-img-1.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;wtdl-img-3.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;wtdl-img-3.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;wtdl-img-3.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;wtdl-img-4.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;wtdl-img-4.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;wtdl-img-4.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;games&#x2F;where-the-dead-lie&#x2F;wtdl-img-5.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;wtdl-img-5.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;wtdl-img-5.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Widget&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Widget&quot; aria-label=&quot;Anchor link for: Widget&quot;&gt;Widget&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;div class=&quot;container max-w-md&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;itch.io&#x2F;embed&#x2F;1900264?dark=true&quot; width=&quot;45%&quot; frameborder=&quot;0&quot;&gt;
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;queenofsquiggles.itch.io&amp;#x2F;where-the-dead-lie&quot;&gt;
            Where The Dead Lie by QueenOfSquiggles
        &lt;&#x2F;a&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Indie Game Design Using Obsidian</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/guides/game-design-using-obsidian/</link>
          <guid>https://queenofsquiggles.github.io/guides/game-design-using-obsidian/</guid>
          <description xml:base="https://queenofsquiggles.github.io/guides/game-design-using-obsidian/">&lt;blockquote&gt;
&lt;p&gt;This guide is primarily aimed at game developers who may not have explored options for project organization and management. If that’s not you, enjoy learning about my personal workflow&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;Obsidian,_a_note-taking_app_with_(mostly)_good_features&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Obsidian,_a_note-taking_app_with_(mostly)_good_features&quot; aria-label=&quot;Anchor link for: Obsidian,_a_note-taking_app_with_(mostly)_good_features&quot;&gt;Obsidian, a note-taking app with (mostly) good features&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As much as I do love FOSS (Free and Open Source Software), &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;&quot;&gt;Obsidian&lt;&#x2F;a&gt; is my favourite app to use for notes and organizing my ideas. I’ve used it for everything from project management, sequence planning, personal to-do lists, notes for a story I’m writing, and even school notes!&lt;&#x2F;p&gt;
&lt;p&gt;One of the most valuable uses I’ve found is organizing my thoughts for game design!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Scaffolding_Ideas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Scaffolding_Ideas&quot; aria-label=&quot;Anchor link for: Scaffolding_Ideas&quot;&gt;Scaffolding Ideas&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Obsidian uses a superset of Markdown, which is a pretty nifty language for formatting text. (I’m even using it for formatting this blog!)&lt;&#x2F;p&gt;
&lt;p&gt;Because of this, the text is pretty quick to format without needing to leave your keyboard.&lt;&#x2F;p&gt;
img::render(src, alt)&lt;h3 id=&quot;Callouts_in_Obsidian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Callouts_in_Obsidian&quot; aria-label=&quot;Anchor link for: Callouts_in_Obsidian&quot;&gt;Callouts in Obsidian&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can see in the picture above that I’m using a “callout” to mark some useful resources for developing &lt;em&gt;Contact Range&lt;&#x2F;em&gt;. I didn’t end up using all of them to be fair. But the callouts can be super helpful for specific ideas and there’s a few different kinds of them with associated colours and names.&lt;&#x2F;p&gt;
&lt;p&gt;This is the syntax I used above. Note that it acts as an extension of the ‘quote’ formatting that uses &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; prefix to each line. The heading is specified by square brackets (&lt;code&gt;[]&lt;&#x2F;code&gt;), and an exclamation point (&lt;code&gt;!&lt;&#x2F;code&gt;) prefixed key-word.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Markdown &quot;&gt;&lt;code class=&quot;language-Markdown&quot; data-lang=&quot;Markdown&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt;[!hint]+ Useful Resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt; ... text ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also if you note that the square brackets are ended by &lt;code&gt;+&lt;&#x2F;code&gt;, that’s a collapse notation. It tells Obsidian that we want to be able to collapse the callout down to the header, but by default we want it to display as full. For defaulting to collapsed, you would rather use &lt;code&gt;-&lt;&#x2F;code&gt;. Following that is the title of the callout. If you omit it, the keyword default title will be used as a heading. For example &lt;code&gt;!help&lt;&#x2F;code&gt; would become “Help”&lt;&#x2F;p&gt;
&lt;p&gt;My most used key-words are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hint&lt;&#x2F;li&gt;
&lt;li&gt;help&lt;&#x2F;li&gt;
&lt;li&gt;info&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is usually because my notes focus on expressing information. And so the callouts are extra information that would be used.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Headings&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Headings&quot; aria-label=&quot;Anchor link for: Headings&quot;&gt;Headings&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Headings in any text document are incredibly useful. In obsidian, they are automatically built into a table of contents on the right pane.&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;p&gt;This pane is collapseable for when you really want to focus, but is super helpful for larger documents.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Super-charged_Links&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Super-charged_Links&quot; aria-label=&quot;Anchor link for: Super-charged_Links&quot;&gt;Super-charged Links&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Remember what I said about Obsidian using a &lt;em&gt;superset&lt;&#x2F;em&gt; of Markdown. Here’s where that matters. So links work just like regular markdown, even for images. To review, the format is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Markdown &quot;&gt;&lt;code class=&quot;language-Markdown&quot; data-lang=&quot;Markdown&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;[Link Text](https:&#x2F;&#x2F;www.your-link.net)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![Image Alt-Text](&#x2F;path&#x2F;to&#x2F;your&#x2F;image.jpg)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Obsidian introduces a new type of link called a “Note Link”. It allows you to reference other note pages you have written which helps to connect different elements that each have their own concise pages. I use this more for writing stories, so each character, faction, location, etc… will get their own page with links connecting everything where relevant.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Markdown &quot;&gt;&lt;code class=&quot;language-Markdown&quot; data-lang=&quot;Markdown&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[Full Name Of The Note You Want To Link]]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Important to note:&lt;&#x2F;strong&gt; the page name will provide auto-complete suggestions, but it is most helpful when your pages uses unique names across the “vault” (obsidian’s currently scoped directory).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Let’s_Make_a_Game&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Let’s_Make_a_Game&quot; aria-label=&quot;Anchor link for: Let’s_Make_a_Game&quot;&gt;Let’s Make a Game&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that you’re equipped with a basic understanding of how to write effective notes in Obsidian, let’s look at how that relates to game development and design.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Putting_Down_Ideas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Putting_Down_Ideas&quot; aria-label=&quot;Anchor link for: Putting_Down_Ideas&quot;&gt;Putting Down Ideas&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You will probably want to start with a document where you just “brain dump” on the page. Text notes are good. All you are doing at this phase is getting ideas on ‘paper’, or page perhaps. Once it’s all written down you can start to review what you wrote and see if any ideas coalesce. If you are working as part of a team, sharing the document and reviewing it together could be better. But most of my experience is solo dev, so &lt;em&gt;it’s just me babyyyy&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;After getting the ideas organized and cleaned up, you can start working on the next few phases.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Organizing_Sequences&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Organizing_Sequences&quot; aria-label=&quot;Anchor link for: Organizing_Sequences&quot;&gt;Organizing Sequences&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So you’ve got a game idea now and you want the player to do X, Y, Z, using items Alpha, Beta, Gamma, and talking to NPCs 1, 2, and 3. How do we organize that!?!?&lt;&#x2F;p&gt;
&lt;p&gt;My solution is to use a “core plugin” called “canvas”.&lt;&#x2F;p&gt;
&lt;p&gt;To setup canvas you need to open the settings menu with the cog icon in the bottom left corner. Then go to “Core Plugins” and enable “Canvas”. Optionally, you can fiddle with the options for Canvas using the cog button on the same line, or in the left pane under the “Core Plugins” header. My preferred change is to set “Default location for new canvas files” to “Same folder as current file”. By default they drop to the vault’s root directory.&lt;&#x2F;p&gt;
&lt;p&gt;A canvas is a generic node graphing tool that you can use to make &lt;em&gt;beautiful spaghetti&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;p&gt;You might want to open that image in a separate tab if you want to be able to read the text. Otherwise, just trust that I’m being truthful.&lt;&#x2F;p&gt;
&lt;p&gt;There are three main types of nodes allowed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Generic Text&lt;&#x2F;li&gt;
&lt;li&gt;Note&lt;&#x2F;li&gt;
&lt;li&gt;Picture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Generic text is just a block that you can put text into and style it how you like. If you look closely I used headers in some nodes to mark the “quest lines”. Note Nodes allow you to link an existing notes into the canvas as a resizable node. You can even scroll through the entire document from the canvas if you like. Finally Image Nodes are as expected, an embedded image. Combined with the ability to create connections between nodes, assign directional arrows, colours for node blocks and connections, and a theoretically infinite canvas, organizing structures of information is definitely possible.&lt;&#x2F;p&gt;
&lt;p&gt;For my purposes I made every room, item, and ‘quest action’ into a node. Then I connected them to help me map the players progress through the ship. I wanted to ensure they spent time in all of the rooms since the aliens were going to spread throughout the ship and attack the player in any of the rooms.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are reading through the canvas above and have played Contact Range, you might have noticed that not everything from the canvas was implemented. Sorry about that! That’s what happens during game jams, ruthless feature cutting&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;Managing_the_Project&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Managing_the_Project&quot; aria-label=&quot;Anchor link for: Managing_the_Project&quot;&gt;Managing the Project&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have experience with DevOps you’re probably good to skip this. Unless you wanna help me find any mistakes I made &amp;lt;3&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So with your ideas put together and some rough (or maybe not so rough) sequencing figured out, now you need to break it down into manageable and–most importantly–actionable tasks. This is where “Project Management” (PM) rears its ugly head. Most of PM work is not exceptionally difficult in theory, but almost always is difficult in practice. There are so many different methods for organizing tasks into small chunks that can be assigned to individual team members. My favourite is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kanban&quot;&gt;Kanban Board&lt;&#x2F;a&gt;. It’s a fairly simple process. You organize tasks into “cards” that describe the task and maybe some additional meta-data like who’s assigned to it and&#x2F;or what category of task it is (art, code, sfx, etc…). For me, I usually skip the assignment step since it’s usually all me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;game-design-using-obsidian&#x2F;personal-todo-kanban.jpg&quot; alt=&quot;A Kanban Board of my personal life tasks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example of a kanban board. Specifically one I use to organize my personal life tasks. Once something makes it to the “Done” channel I like to archive it so it doesn’t clutter up the view. If you are perceptive, you probably noticed that I’m still using Obsidian. There is a “Community Plugin” (not maintained by the Obsidian Devs) called “Kanban” by “mgmeyers” that I use almost religiously. It adds a type of note that is a Kanban board which allows you to specify which lanes you want. There is also tools for things like due dates, tagging, and styles. You can even make styles react to the tags or date proximity on the card. For example, when I used this for school I made green, orange, and red colour styles based on how urgently the task needed to be done (based on 7+ days out, 3+ days out, or less than 3 days away, respectively)&lt;&#x2F;p&gt;
&lt;p&gt;You can even add styling specific to a single Kanban board or have those settings globally. Which is super powerful.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Endless_Cards&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Endless_Cards&quot; aria-label=&quot;Anchor link for: Endless_Cards&quot;&gt;Endless Cards&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;A simple approach is to make a card for each “thing” you need to do. So for each asset to make, it gets a card. For every system that needs code, that’s a card. For every QA work done at a step in the process, that’s another card! And when the moon hits your eye like a big pizza pie, that’s &lt;del&gt;another card&lt;&#x2F;del&gt; &lt;em&gt;amore!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There’s a ton of solutions for figuring out how to organize your cards. In my experience the solution that’s best is &lt;em&gt;the one that works for you and your needs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One such solution that I use for projects larger than a game jam are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scrumandkanban.co.uk&#x2F;theme-epic-story-task&#x2F;&quot;&gt;“Epic Cards”&lt;&#x2F;a&gt;. It’s a way to create a hierarchy of tasks and categorize them into a particular order. I’ve seen many people use Epics almost like versioning. So once that “Epic” is complete that’s 0.1 more version points. (For clarity, I mean a project at version 1.2 would go to 1.3 after the 1.3.X epic is compeleted. And subversions, 1.2.X, would increment as stable changes are made.)&lt;&#x2F;p&gt;
&lt;p&gt;Of course that’s not the only way to organize your tasks. I highly recommend looking into modern technique of project management if you are more interested in this. Without being more familiar with what industry standards look like, I’m hesitant to make a particular recommendation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Building_to_Completion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Building_to_Completion&quot; aria-label=&quot;Anchor link for: Building_to_Completion&quot;&gt;Building to Completion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Now you’ve got your idea, the sequences, and your tasks all organized. That was the easy part. Your next steps are to make it all happen. This is where you “get your hands dirty” and work on the code&#x2F;art&#x2F;model&#x2F;shader&#x2F;SFX&#x2F;music&#x2F;VFX&#x2F;API&#x2F;etc… necessary for your project!&lt;&#x2F;p&gt;
&lt;p&gt;From here I can’t quite help you. Or rather, I can’t in this article. Obsidian is an excellent tool for organizing all of the game design components. But once you transition to the development, Obsidian is mostly useful as a refernce. Best of luck. I hope you have an enjoyable project! Or at least an &lt;em&gt;interesting&lt;&#x2F;em&gt; one!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Choreographer Design Documentation</title>
          <pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tech/choreographer-design/</link>
          <guid>https://queenofsquiggles.github.io/tech/choreographer-design/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tech/choreographer-design/">&lt;h2 id=&quot;Blog_Post_Note&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blog_Post_Note&quot; aria-label=&quot;Anchor link for: Blog_Post_Note&quot;&gt;Blog Post Note&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update (August 24th, 2024)&lt;&#x2F;strong&gt;: This effort&#x2F;project has since been abandoned. However anyone wishing to take this idea further is quite welcome to!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hey, this is the same markdown that is in the choreographer git repository. And one is significantly more likely to be updated. This is the version that was initially uploaded on December 19th, 2023. If you are from the future reading this, it is entirely possible the design has changed by some amount to accommodate changes in our reality. Otherwise please enjoy my mess :3&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Preface:&lt;&#x2F;strong&gt; For simplicity, this document is written in present tense for specific end-goals and in future tense for possible but unlikely goals. This project could be considered to be “complete” once all present tense declarations are true.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;Choreographer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Choreographer&quot; aria-label=&quot;Anchor link for: Choreographer&quot;&gt;Choreographer&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Choreographer (C11R) is a GDExtension based scripting language for Godot 4.2+.&lt;&#x2F;p&gt;
&lt;p&gt;Similar to Unreal Engine’s Blueprints system, it uses a Node-Graph Event system to manage code paths. Where an Event is equivalent to a “method” or “function” and is not necessarily related to Events in the context of an Observer Pattern.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;User_Groups&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#User_Groups&quot; aria-label=&quot;Anchor link for: User_Groups&quot;&gt;User Groups&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There are three core user groups of interest for Choreographer:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Game developers&lt;&#x2F;li&gt;
&lt;li&gt;Tooling Developers&lt;&#x2F;li&gt;
&lt;li&gt;Team Collaboration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;Game_Developers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Developers&quot; aria-label=&quot;Anchor link for: Game_Developers&quot;&gt;Game Developers&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Game developers are (usually) less concerned with what they use to make a game and more concerned with actually finishing and releasing their game. To that end, Choreographer is intended to be highly usable for increasing efficacy of development as well as lowering the barrier to entry for developers who may not have experience with traditional programming languages.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Tooling_Developers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Tooling_Developers&quot; aria-label=&quot;Anchor link for: Tooling_Developers&quot;&gt;Tooling Developers&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Tooling developers enjoy creating tools for Game Developers to use. They enjoy clean and documented systems which allow them to create interesting resources with minimal effort. Tooling developers are more likely to contribute back to the source project if they deem it worthy and&#x2F;or interesting.
In order to serve tools developers, as well as to leverage their skills, Choreographer provides a simple “Block” registration system which allows custom logic blocks to be registered from a plugin and can be used from within the Choreographer Scripting Interface&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Team_Collaboration_&#x2F;_Professional_Development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Team_Collaboration_&amp;#x2F;_Professional_Development&quot; aria-label=&quot;Anchor link for: Team_Collaboration_&amp;#x2F;_Professional_Development&quot;&gt;Team Collaboration &#x2F; Professional Development&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Teams, both for smaller ventures like game jams and larger ventures like a complete game company, require specific features that may not necessarily be needed for individuals. For example teams will benefit from being able to leverage Version Control Systems such as git to collaborate more effectively. Additionally, teams are typically comprised of people with a diversity of skills and experience. In order to best leverage their unique skills and talents, they need to be able to leverage each other in mutually beneficial ways.&lt;&#x2F;p&gt;
&lt;p&gt;In order to best serve teams and professional groups, Choreographer uses a text-based (XML) file format, which allows easily readable files which can ease aches and pains from merge conflicts.
Additionally, the same feature which allows tooling developers to register custom logic blocks allows individual team members to provide logic blocks internally to their own team. And those highly specialized logic blocks can be used to increase the efficiency and ease of development for all team members.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Language_Specification&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Language_Specification&quot; aria-label=&quot;Anchor link for: Language_Specification&quot;&gt;Language Specification&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;Definitions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Definitions&quot; aria-label=&quot;Anchor link for: Definitions&quot;&gt;Definitions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;“Script” - a single file and class of Choreographer.
“Block” - a single node in the graph of a script.
“Event” - a method contained in a C11R Script comprised of a directed acyclic graph of Blocks.
“Connection” - a relationship between two Blocks marked by a line
“Emit”&#x2F;“Emitting” - refers to a situation where the connection is on the right side of the block meaning it is an output
“Receive”&#x2F;“Receiving” - refers to a situation where the connection is on the left side of the block meaning it is an input&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Graph_Systems_Review_(Mathematical)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Graph_Systems_Review_(Mathematical)&quot; aria-label=&quot;Anchor link for: Graph_Systems_Review_(Mathematical)&quot;&gt;Graph Systems Review (Mathematical)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The graphs in Choreographer are “directed acyclic graphs”, which is a specific type of graph which allows for validation of certain properties. For simplicity the details are described here:&lt;&#x2F;p&gt;
&lt;p&gt;“Directed” - connections between nodes go in a particular direction and can but are not necessarily bi-directional
“Acyclic” - there are no sequences of connections in the graph which would allow a “cycle”, or a chain that loops infinitely.&lt;&#x2F;p&gt;
&lt;p&gt;Directed and Acyclic graphs are both long-standing mathematical descriptions and have a plethora of algorithms available for managing them.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of the mathematical description, “nodes” can also be referred to as “vertices”, but in this specific case we call them “Blocks” to avoid confusion with the &lt;code&gt;Node&lt;&#x2F;code&gt; types in Godot.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Event_Systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Event_Systems&quot; aria-label=&quot;Anchor link for: Event_Systems&quot;&gt;Event Systems&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Each &lt;code&gt;Event&lt;&#x2F;code&gt; is a sequence of operations. A specific type of connection called the &lt;code&gt;Event Connection&lt;&#x2F;code&gt; is connected across the graph to determine the flow of logic. Other connections are of a value type, called &lt;code&gt;Value Connection&lt;&#x2F;code&gt;. Internally, these are an &lt;code&gt;enum Connection&lt;&#x2F;code&gt; which allows every connection to be one of each type, not both, and not nothing(&lt;code&gt;null&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Event_Connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Event_Connection&quot; aria-label=&quot;Anchor link for: Event_Connection&quot;&gt;&lt;code&gt;Event Connection&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Event Connections work through a push system. Once the block emitting the event connection completes execution, the event connections which are marked as active are used to find the next Block(s) in the event graph.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Value_Connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Value_Connection&quot; aria-label=&quot;Anchor link for: Value_Connection&quot;&gt;&lt;code&gt;Value Connection&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Value connections work through a pull system. When a block is triggered to execute, it checks in memory for the input data. If any receiving port has stale (&lt;code&gt;null&lt;&#x2F;code&gt;) data, it first triggers the emitting block to regenerate that data, this can trigger recursively if necessary.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Block_Definitions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Block_Definitions&quot; aria-label=&quot;Anchor link for: Block_Definitions&quot;&gt;Block Definitions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Blocks can be defined in a variety of ways depending on the source of their creation.&lt;&#x2F;p&gt;
&lt;p&gt;All block definitions require a data segment and a logic segment as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Name (String)&lt;&#x2F;li&gt;
&lt;li&gt;Documentation (String) (Optional)&lt;&#x2F;li&gt;
&lt;li&gt;Inputs (Array&amp;lt;Connection&amp;gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Outputs (Array&amp;lt;Connection&amp;gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Execution Function (sig: &lt;code&gt;fn(Vec&amp;lt;Connection&amp;gt;) -&amp;gt; Vec&amp;lt;Connection&amp;gt;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Input Icons (Array&amp;lt;String&amp;gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Output Icons (Array&amp;lt;String&amp;gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Core_Library&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Core_Library&quot; aria-label=&quot;Anchor link for: Core_Library&quot;&gt;Core Library&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The Core Library, or the collection of Block Definitions made available by Choreographer itself, are all namespaced to “core”. These block definitions are the basic units of logic for Choreographer and are registered internally by defining them as rust structs that implement the &lt;code&gt;IBlock&lt;&#x2F;code&gt; trait and submitting them to the &lt;code&gt;ChoreographerServer&lt;&#x2F;code&gt; registry.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Third_Party_Libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Third_Party_Libraries&quot; aria-label=&quot;Anchor link for: Third_Party_Libraries&quot;&gt;Third Party Libraries&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Third Party Libraries are collections of blocks registered by some means besides Choreographer. This is the intended way to add specificity to Choreographer.&lt;&#x2F;p&gt;
&lt;p&gt;While it is potentially possible to define and register these block definitions through an additional GDExtension project, it is recommended to write custom block definitions in GDScript and register them through a plugin.&lt;&#x2F;p&gt;
&lt;p&gt;The reasoning behind this is that I am not entirely certain how to use Choreographer as a library for type definitions without simply appending it to the project as a dependency, which could potentially cause problems with FFI. Should someone smarter than me know how this part of GDExtension&#x2F;FFI works and is able to help with this side, registering custom blocks through GDExtension could become possible. However, please remember that the end user will require a binary for every platform they may want to publish their game on, and as such the number of GDExtension libraries in their project will exponentially increase the difficulty of exporting if those libraries are not pre-compiled for the user’s target platforms (Think Mobile and Apple platforms, which are tricky).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;How_Third_Party_Block_Definitions_work_internally&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_Third_Party_Block_Definitions_work_internally&quot; aria-label=&quot;Anchor link for: How_Third_Party_Block_Definitions_work_internally&quot;&gt;How Third Party Block Definitions work internally&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Internally, there is a “CustomBlock” block definition which redirects standard &lt;code&gt;IBlock&lt;&#x2F;code&gt; function calls to a series of &lt;code&gt;Callable&lt;&#x2F;code&gt;s point at particular function names.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the future, when abstract method definitions become available, I want this to be refactored to use abstract methods instead, which should ease the pain of development&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The method of storage for these callables should be &lt;code&gt;Option&amp;lt;Callable&amp;gt;&lt;&#x2F;code&gt; such that when encountering a value of &lt;code&gt;None&lt;&#x2F;code&gt;, we can emit a warning message and skip processing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Virtual_Heap_Memory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Virtual_Heap_Memory&quot; aria-label=&quot;Anchor link for: Virtual_Heap_Memory&quot;&gt;Virtual Heap Memory&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Choreographer uses a heap memory abstraction. That is, a &lt;code&gt;Vec&amp;lt;Option&amp;lt;Variant&amp;gt;&amp;gt;&lt;&#x2F;code&gt; which allows indices to serve as a memory address and value checking on the rust-side of things.&lt;&#x2F;p&gt;
&lt;p&gt;The organization of the heap is as such:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Script local variables (effectively static as variables cannot be de-initialized until the script itself is dropped)&lt;&#x2F;li&gt;
&lt;li&gt;Temporary Event execution memory (dropped upon event completion)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;An option available to the user could be to choose between memory usage and performance. For example, to save performance costs, the memory heap could simply be nulled (&lt;code&gt;None&lt;&#x2F;code&gt;) out rather than resizing the &lt;code&gt;Vec&lt;&#x2F;code&gt;. But this could create a memory cost as each execution unit increases the size of the nothing array. The immediate deletion would remove need for some kind of garbage collection system, which I see as a band-aid for bad memory management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each script is in charge of its own virtual heap memory.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, though it is referred to as “virtual” the data being stored is also literally in the program’s heap memory. But by virtualizing it the scripts create an effective memory arena such that the entire block of memory can be dropped all at once when the script instance is dropped.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;How_do_individual_blocks_interact_with_the_virtual_heap?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_do_individual_blocks_interact_with_the_virtual_heap?&quot; aria-label=&quot;Anchor link for: How_do_individual_blocks_interact_with_the_virtual_heap?&quot;&gt;How do individual blocks interact with the virtual heap?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The script execution maps inputs and outputs to virtual heap addresses (&lt;code&gt;usize&lt;&#x2F;code&gt; value) such that when an output is calculated it is assigned to the address that inputs requiring that value are also targeting. A value goes stale once there are no remaining inputs that target that address, and as such can be dropped.&lt;&#x2F;p&gt;
&lt;p&gt;It is possible to develop a system by which stale memory is detected throughout the execution of an event graph, this would certainly increase the efficiency of larger event graphs, however this may be difficult to implement based on a variety of factors. Testing will be needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Choreographer_Scripting_Interface_(CSI)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Choreographer_Scripting_Interface_(CSI)&quot; aria-label=&quot;Anchor link for: Choreographer_Scripting_Interface_(CSI)&quot;&gt;Choreographer Scripting Interface (CSI)&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The CSI is a visual representation of the data model contained in memory and in the corresponding &lt;code&gt;.c11r&lt;&#x2F;code&gt; file. Hence, the reasonable approach towards developing the CSI is to use the Model-View-Controller system.&lt;&#x2F;p&gt;
&lt;p&gt;The CSI is effectively the View and Controller as the Model is the only component required for execution at runtime. CSI displays a graph of blocks using Godot’s &lt;code&gt;GraphEdit&lt;&#x2F;code&gt; systems. And all changes are marshalled out to the controller component which in turn serializes changes in data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;The_.c11r_format&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_.c11r_format&quot; aria-label=&quot;Anchor link for: The_.c11r_format&quot;&gt;The &lt;code&gt;.c11r&lt;&#x2F;code&gt; format&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Choreographer Script files use the &lt;code&gt;c11r&lt;&#x2F;code&gt; extension and are in the well tested XML file format. The logic behind using XML is that it allows attributes to be appended onto a tag, which allows for a more detailed description of individual objects without necessitating deep nesting like JSON would require. Additionally, as HTML is a superset of XML, those familiar with web development should be able to easily read &lt;code&gt;c11r&lt;&#x2F;code&gt; files with minimal effort.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Example_.c11r_data&#x2F;schema&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Example_.c11r_data&amp;#x2F;schema&quot; aria-label=&quot;Anchor link for: Example_.c11r_data&amp;#x2F;schema&quot;&gt;Example &lt;code&gt;.c11r&lt;&#x2F;code&gt; data&#x2F;schema&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c11r&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;godot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;02123&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;godot&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;guid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;02165&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;res:&#x2F;&#x2F;asdaslkhjasd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some_var&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;isconst&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another_var&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;something&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;isconst&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blocks&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IfElse&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blocks&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connections&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;left_id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;left_port&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;right_id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0002&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;right_port&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connections&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            This is a docstring
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gui &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.2;3.6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gui&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.2;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            This is a comment block
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comment&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c11r&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;Testing_Challenges&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Testing_Challenges&quot; aria-label=&quot;Anchor link for: Testing_Challenges&quot;&gt;Testing Challenges&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Unit testing is incredibly helpful for verifying that functions operate as intended when changes are made. Unfortunately for godot-rust, the actual components that interoperate with Godot’s types cannot be used because the definitions are only known when Godot loads the library into memory and initializes it over FFI. What this means is that &lt;em&gt;&lt;strong&gt;no component that uses Godot types can be unit tested without a very specific setup&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;. There are currently tools and attempts to create a custom testing environment for godot-rust, however as of now I believe the most effective way to test a godot-rust project is to extract what logic is possible away from the Godot Types. For example the serialization&#x2F;deserialization systems are based on a submodule that emits and receives structured metadata rather than a Godot type. This allows these systems to be unit tested.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Continuation_of_documentation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Continuation_of_documentation&quot; aria-label=&quot;Anchor link for: Continuation_of_documentation&quot;&gt;Continuation of documentation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This here is all I can think of that should be included at this present moment. Unfortunately I am a mortal and am prone to mistakes, so please let me know if something needs to be changed and&#x2F;or updated by creating an issue in the repository.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Godot Engine Editor Icon Colours</title>
          <pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tech/godot-icon-colours/</link>
          <guid>https://queenofsquiggles.github.io/tech/godot-icon-colours/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tech/godot-icon-colours/">&lt;h2 id=&quot;Colours_LUT&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Colours_LUT&quot; aria-label=&quot;Anchor link for: Colours_LUT&quot;&gt;Colours LUT&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The markdown doesn’t really support custom colours, so see below for examples. (dark reader users make sure you disable it for this website if you wanna see accurate colours!!!!)&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Hex Light&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Hex Dark&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Engine Name&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#478cbf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#478cbf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Godot Blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#414042&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#414042&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Godot Gray&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#000000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bfbfbf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure black&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff0000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff0000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure red&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#00ff00&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#00ff00&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#0000ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#0000ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#808080&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#808080&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;GUI disabled color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b3b3b3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#363636&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;GUI disabled light color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#699ce8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#699ce8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;GUI highlight color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f9f9f9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#606060&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Scrollbar grabber highlight color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#fc7f7f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#cd3838&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Spatial&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#8da5f3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#3d64dd&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4b70ea&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#1a3eac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2D Dark&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#8eef97&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2fa139&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Control&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#003e7a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2b74bb&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Selection (darker blue)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f7f5cf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#615f3a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Gizmo (yellow)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#80ff45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#74ff34&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#45ffa2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2cff98&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Aqua&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#45d7ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#22ccff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#8045ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#702aff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Purple&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff4596&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff2781&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pink&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#75d1e6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#41acc5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Frozen gradient middle&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#84ffee&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#49ccba&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Frozen gradient bottom&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eec315&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#d58c0b&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Color track orange&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#dbee15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b7d10a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Color track yellow&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#288027&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#218309&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Color track green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#a2d2ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4998e3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Shape resource (light blue)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ea7940&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bd5e2c&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3D Position track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff2b88&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bd165f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3D Rotation track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eac840&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bd9d1f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3D Scale track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#3cf34e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#16a827&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Call Method track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2877f6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#236be6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Bezier Curve track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eae440&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#9f9722&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Audio Playback track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#a448f0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#9853ce&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Animation Playback track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#5ad5c4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#0a9c88&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Blend Shape track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#919191&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#6e6e6e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Border part&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#c6ced4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#828f9b&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;New Atlas&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#5abbef&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4fb2e9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;int&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#35d4f4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#27ccf0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;float&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4593ec&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4690e7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;String&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ac73f1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ad76ee&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Vector2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f1738f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ee758e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Rect2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#de66f0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#dc6aed&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Vector3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b9ec41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#96ce1a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Transform2D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f74949&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f77070&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Plane&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ec418e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ec69a3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Quaternion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ee5677&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ee7991&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;AABB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#e1ec41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b2bb19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Basis&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f68f45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f49047&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Transform3D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#417aec&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#6993ec&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;NodePath&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#41ec80&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2ce573&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;RID&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#55f3e3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#12d5c3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#54ed9e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#57e99f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Dictionary&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#cf68ea&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#c050dd&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Functions and expressions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eac968&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#d9b64f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Textures and cubemaps&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;Colour_Details&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Colour_Details&quot; aria-label=&quot;Anchor link for: Colour_Details&quot;&gt;Colour Details&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s all the colours. First colour is the light theme, second is dark. Then some text in each colour to show what it looks like.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Godot_Blue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Blue&quot; aria-label=&quot;Anchor link for: Godot_Blue&quot;&gt;Godot Blue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;478cbf –&amp;gt; 478cbf&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #478cbf;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #478cbf;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Godot_Gray&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Gray&quot; aria-label=&quot;Anchor link for: Godot_Gray&quot;&gt;Godot Gray&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;414042 –&amp;gt; 414042&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #414042;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #414042;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_black&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_black&quot; aria-label=&quot;Anchor link for: Pure_black&quot;&gt;Pure black&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;000000 –&amp;gt; bfbfbf&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #000000;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bfbfbf;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_red&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_red&quot; aria-label=&quot;Anchor link for: Pure_red&quot;&gt;Pure red&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ff0000 –&amp;gt; ff0000&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff0000;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff0000;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_green&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_green&quot; aria-label=&quot;Anchor link for: Pure_green&quot;&gt;Pure green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;00ff00 –&amp;gt; 00ff00&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #00ff00;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #00ff00;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_blue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_blue&quot; aria-label=&quot;Anchor link for: Pure_blue&quot;&gt;Pure blue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;0000ff –&amp;gt; 0000ff&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #0000ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #0000ff;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;GUI_disabled_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GUI_disabled_color&quot; aria-label=&quot;Anchor link for: GUI_disabled_color&quot;&gt;GUI disabled color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;808080 –&amp;gt; 808080&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #808080;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #808080;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;GUI_disabled_light_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GUI_disabled_light_color&quot; aria-label=&quot;Anchor link for: GUI_disabled_light_color&quot;&gt;GUI disabled light color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;b3b3b3 –&amp;gt; 363636&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b3b3b3;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #363636;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;GUI_highlight_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GUI_highlight_color&quot; aria-label=&quot;Anchor link for: GUI_highlight_color&quot;&gt;GUI highlight color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;699ce8 –&amp;gt; 699ce8&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #699ce8;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #699ce8;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Scrollbar_grabber_highlight_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Scrollbar_grabber_highlight_color&quot; aria-label=&quot;Anchor link for: Scrollbar_grabber_highlight_color&quot;&gt;Scrollbar grabber highlight color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f9f9f9 –&amp;gt; 606060&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f9f9f9;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #606060;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Spatial&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Spatial&quot; aria-label=&quot;Anchor link for: Spatial&quot;&gt;Spatial&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;fc7f7f –&amp;gt; cd3838&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #fc7f7f;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #cd3838;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;2D&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2D&quot; aria-label=&quot;Anchor link for: 2D&quot;&gt;2D&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;8da5f3 –&amp;gt; 3d64dd&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #8da5f3;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #3d64dd;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;2D_Dark&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2D_Dark&quot; aria-label=&quot;Anchor link for: 2D_Dark&quot;&gt;2D Dark&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;4b70ea –&amp;gt; 1a3eac&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4b70ea;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #1a3eac;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Control&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Control&quot; aria-label=&quot;Anchor link for: Control&quot;&gt;Control&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;8eef97 –&amp;gt; 2fa139&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #8eef97;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2fa139;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Selection_(darker_blue)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Selection_(darker_blue)&quot; aria-label=&quot;Anchor link for: Selection_(darker_blue)&quot;&gt;Selection (darker blue)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;003e7a –&amp;gt; 2b74bb&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #003e7a;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2b74bb;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Gizmo_(yellow)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gizmo_(yellow)&quot; aria-label=&quot;Anchor link for: Gizmo_(yellow)&quot;&gt;Gizmo (yellow)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f7f5cf –&amp;gt; 615f3a&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f7f5cf;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #615f3a;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Green&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Green&quot; aria-label=&quot;Anchor link for: Green&quot;&gt;Green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;80ff45 –&amp;gt; 74ff34&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #80ff45;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #74ff34;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Aqua&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Aqua&quot; aria-label=&quot;Anchor link for: Aqua&quot;&gt;Aqua&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;45ffa2 –&amp;gt; 2cff98&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #45ffa2;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2cff98;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Blue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blue&quot; aria-label=&quot;Anchor link for: Blue&quot;&gt;Blue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;45d7ff –&amp;gt; 22ccff&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #45d7ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #22ccff;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Purple&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Purple&quot; aria-label=&quot;Anchor link for: Purple&quot;&gt;Purple&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;8045ff –&amp;gt; 702aff&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #8045ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #702aff;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pink&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pink&quot; aria-label=&quot;Anchor link for: Pink&quot;&gt;Pink&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ff4596 –&amp;gt; ff2781&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff4596;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff2781;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Frozen_gradient_middle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Frozen_gradient_middle&quot; aria-label=&quot;Anchor link for: Frozen_gradient_middle&quot;&gt;Frozen gradient middle&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;75d1e6 –&amp;gt; 41acc5&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #75d1e6;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #41acc5;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Frozen_gradient_bottom&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Frozen_gradient_bottom&quot; aria-label=&quot;Anchor link for: Frozen_gradient_bottom&quot;&gt;Frozen gradient bottom&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;84ffee –&amp;gt; 49ccba&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #84ffee;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #49ccba;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Color_track_orange&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Color_track_orange&quot; aria-label=&quot;Anchor link for: Color_track_orange&quot;&gt;Color track orange&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eec315 –&amp;gt; d58c0b&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eec315;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #d58c0b;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Color_track_yellow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Color_track_yellow&quot; aria-label=&quot;Anchor link for: Color_track_yellow&quot;&gt;Color track yellow&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;dbee15 –&amp;gt; b7d10a&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #dbee15;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b7d10a;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Color_track_green&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Color_track_green&quot; aria-label=&quot;Anchor link for: Color_track_green&quot;&gt;Color track green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;288027 –&amp;gt; 218309&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #288027;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #218309;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Shape_resource_(light_blue)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Shape_resource_(light_blue)&quot; aria-label=&quot;Anchor link for: Shape_resource_(light_blue)&quot;&gt;Shape resource (light blue)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;a2d2ff –&amp;gt; 4998e3&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #a2d2ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4998e3;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;3D_Position_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3D_Position_track&quot; aria-label=&quot;Anchor link for: 3D_Position_track&quot;&gt;3D Position track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ea7940 –&amp;gt; bd5e2c&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ea7940;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bd5e2c;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;3D_Rotation_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3D_Rotation_track&quot; aria-label=&quot;Anchor link for: 3D_Rotation_track&quot;&gt;3D Rotation track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ff2b88 –&amp;gt; bd165f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff2b88;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bd165f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;3D_Scale_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3D_Scale_track&quot; aria-label=&quot;Anchor link for: 3D_Scale_track&quot;&gt;3D Scale track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eac840 –&amp;gt; bd9d1f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eac840;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bd9d1f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Call_Method_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Call_Method_track&quot; aria-label=&quot;Anchor link for: Call_Method_track&quot;&gt;Call Method track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;3cf34e –&amp;gt; 16a827&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #3cf34e;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #16a827;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Bezier_Curve_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Bezier_Curve_track&quot; aria-label=&quot;Anchor link for: Bezier_Curve_track&quot;&gt;Bezier Curve track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2877f6 –&amp;gt; 236be6&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2877f6;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #236be6;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Audio_Playback_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Audio_Playback_track&quot; aria-label=&quot;Anchor link for: Audio_Playback_track&quot;&gt;Audio Playback track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eae440 –&amp;gt; 9f9722&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eae440;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #9f9722;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Animation_Playback_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Animation_Playback_track&quot; aria-label=&quot;Anchor link for: Animation_Playback_track&quot;&gt;Animation Playback track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;a448f0 –&amp;gt; 9853ce&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #a448f0;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #9853ce;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Blend_Shape_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blend_Shape_track&quot; aria-label=&quot;Anchor link for: Blend_Shape_track&quot;&gt;Blend Shape track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;5ad5c4 –&amp;gt; 0a9c88&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #5ad5c4;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #0a9c88;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Border_part&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Border_part&quot; aria-label=&quot;Anchor link for: Border_part&quot;&gt;Border part&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;919191 –&amp;gt; 6e6e6e&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #919191;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #6e6e6e;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;New_Atlas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#New_Atlas&quot; aria-label=&quot;Anchor link for: New_Atlas&quot;&gt;New Atlas&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;c6ced4 –&amp;gt; 828f9b&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #c6ced4;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #828f9b;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;int&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int&quot; aria-label=&quot;Anchor link for: int&quot;&gt;int&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;5abbef –&amp;gt; 4fb2e9&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #5abbef;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4fb2e9;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;float&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#float&quot; aria-label=&quot;Anchor link for: float&quot;&gt;float&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;35d4f4 –&amp;gt; 27ccf0&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #35d4f4;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #27ccf0;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;String&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#String&quot; aria-label=&quot;Anchor link for: String&quot;&gt;String&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;4593ec –&amp;gt; 4690e7&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4593ec;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4690e7;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Vector2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Vector2&quot; aria-label=&quot;Anchor link for: Vector2&quot;&gt;Vector2&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ac73f1 –&amp;gt; ad76ee&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ac73f1;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ad76ee;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Rect2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Rect2&quot; aria-label=&quot;Anchor link for: Rect2&quot;&gt;Rect2&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f1738f –&amp;gt; ee758e&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f1738f;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ee758e;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Vector3&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Vector3&quot; aria-label=&quot;Anchor link for: Vector3&quot;&gt;Vector3&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;de66f0 –&amp;gt; dc6aed&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #de66f0;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #dc6aed;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Transform2D&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Transform2D&quot; aria-label=&quot;Anchor link for: Transform2D&quot;&gt;Transform2D&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;b9ec41 –&amp;gt; 96ce1a&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b9ec41;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #96ce1a;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Plane&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Plane&quot; aria-label=&quot;Anchor link for: Plane&quot;&gt;Plane&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f74949 –&amp;gt; f77070&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f74949;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f77070;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Quaternion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Quaternion&quot; aria-label=&quot;Anchor link for: Quaternion&quot;&gt;Quaternion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ec418e –&amp;gt; ec69a3&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ec418e;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ec69a3;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;AABB&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#AABB&quot; aria-label=&quot;Anchor link for: AABB&quot;&gt;AABB&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ee5677 –&amp;gt; ee7991&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ee5677;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ee7991;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Basis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Basis&quot; aria-label=&quot;Anchor link for: Basis&quot;&gt;Basis&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;e1ec41 –&amp;gt; b2bb19&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #e1ec41;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b2bb19;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Transform3D&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Transform3D&quot; aria-label=&quot;Anchor link for: Transform3D&quot;&gt;Transform3D&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f68f45 –&amp;gt; f49047&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f68f45;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f49047;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;NodePath&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#NodePath&quot; aria-label=&quot;Anchor link for: NodePath&quot;&gt;NodePath&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;417aec –&amp;gt; 6993ec&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #417aec;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #6993ec;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;RID&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#RID&quot; aria-label=&quot;Anchor link for: RID&quot;&gt;RID&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;41ec80 –&amp;gt; 2ce573&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #41ec80;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2ce573;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Object&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Object&quot; aria-label=&quot;Anchor link for: Object&quot;&gt;Object&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;55f3e3 –&amp;gt; 12d5c3&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #55f3e3;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #12d5c3;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Dictionary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Dictionary&quot; aria-label=&quot;Anchor link for: Dictionary&quot;&gt;Dictionary&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;54ed9e –&amp;gt; 57e99f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #54ed9e;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #57e99f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Functions_and_expressions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Functions_and_expressions&quot; aria-label=&quot;Anchor link for: Functions_and_expressions&quot;&gt;Functions and expressions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;cf68ea –&amp;gt; c050dd&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #cf68ea;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #c050dd;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Textures_and_cubemaps&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Textures_and_cubemaps&quot; aria-label=&quot;Anchor link for: Textures_and_cubemaps&quot;&gt;Textures and cubemaps&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eac968 –&amp;gt; d9b64f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eac968;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #d9b64f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h2 id=&quot;Why_does_this_exist?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Why_does_this_exist?&quot; aria-label=&quot;Anchor link for: Why_does_this_exist?&quot;&gt;Why does this exist?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I really like to make my SVG icons for tools and such to be reactive to light&#x2F;dark theme colouration swapping. The godot engine has a massive look up table (LUT) for hex codes that it will swap when going from light to dark themes. So long as you use these colours as a palette for your icons, they will look good in both light and dark themes. This page is mainly a reference page for the various colour codes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;How_to_use_this&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_to_use_this&quot; aria-label=&quot;Anchor link for: How_to_use_this&quot;&gt;How to use this&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This reference page is mainly intended for people who want to make editor icons for Godot. However you can assign custom icons for any global class you desire. If you are creating a plugin or some kind of code-base to be distributed to third party developers, it is highly recommended that you use these palette swapping colours so the icon will have a greater chance of having a decent contrast against the background. If not please ensure that your icon has enough internal contrast to be clearly visible. Also please be sure that your icon is not completely reliant on colour for users who may be colour blind. (A main example of this is how &lt;code&gt;Node&lt;&#x2F;code&gt;, &lt;code&gt;Control&lt;&#x2F;code&gt;, &lt;code&gt;Node2D&lt;&#x2F;code&gt;, and &lt;code&gt;Node3D&lt;&#x2F;code&gt; are all the exact same shape but differentiated by colour. That’s a bad practice in general).&lt;&#x2F;p&gt;
&lt;p&gt;If you want more resources on how to author meaningful and efficiently loaded icons, please refer to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;contributing&#x2F;development&#x2F;editor&#x2F;creating_icons.html&quot;&gt;the official godot documentation on this subject&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Shell Fur Breakdown</title>
          <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tech/shell-fur-breakdown/</link>
          <guid>https://queenofsquiggles.github.io/tech/shell-fur-breakdown/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tech/shell-fur-breakdown/">&lt;h2 id=&quot;What_happened???&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_happened???&quot; aria-label=&quot;Anchor link for: What_happened???&quot;&gt;What happened???&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Well you see a little youtuber called “Acerola” made a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;9dr-tRQzij4&quot;&gt;little video&lt;&#x2F;a&gt; and put out a challenge. As a creature fueled by an unholy combination of caffeine and raw impulse, I had to take on this “Acerola Furry Challenge” and exceed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;The_Challenge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_Challenge&quot; aria-label=&quot;Anchor link for: The_Challenge&quot;&gt;The Challenge&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Acerola’s original video did a breakdown for how shell fur works and demonstrated how to get it working in Unity. As an elite Godot game dev, I was able to port most of it over quite easily. Acerola’s challenge was to implement the fur rendering he demonstrated in the video, and then extend the functionality in at least one key way.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;XfrqyR_-jzIAAAAC&amp;#x2F;anime-goku.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;8246706&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.43103&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Goku from Dragon Ball Z power up to &lt;em&gt;super saiyin&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Well_what_is_“Shell_Fur”?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Well_what_is_“Shell_Fur”?&quot; aria-label=&quot;Anchor link for: Well_what_is_“Shell_Fur”?&quot;&gt;Well what is “Shell Fur”?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you already know Shell Fur and just wanna get to the results, you don’t need to read this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Shell Fur is named for the way it implements fur rendering. It utilizes a common method for sub-vertex geometry visualization. If you do work with 3D game development and&#x2F;or tech art, you are probably at least familiar with normal maps, and possibly parallax rendering (height maps) for materials. Both add extra visual detail without requiring extra vertices. Shell fur does a similar effect by layering multiple meshes on top of each other and selectively discarding specific pixels based on some kind of algorithm.
Essentially, if you break the UV coordinates into a smaller grid and then discard pixels at the edges of each cell, you would get a square fur, similar to what Acerola references in the game &lt;em&gt;Viva Pinata&lt;&#x2F;em&gt;. By doing a little extra math you can discard anything outside of a circle in the cell. Then going out along the layers you can shrink the size of the circle. With enough layers, this creates a visual effect that resembles strands of fur.
Something that is incredibly helpful about this method is that while it does increase the vertex count, it does so by such a small margin compared to the details provided. Because we do a lot of our calculations on the pixel level, for a game where furry objects can’t be looked at too closely, it can look quite realistic while not incurring too much of a performance hit.
Of course I love games with style and I found that it can quite easily create stylized effects as well.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;6NRM5QqZja8AAAAC&amp;#x2F;boykisser.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;16777119058470997423&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.985944&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;boykisser-gif-16777119058470997423&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;The boykisser meme character smirking&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;So_what_did_I_do?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_what_did_I_do?&quot; aria-label=&quot;Anchor link for: So_what_did_I_do?&quot;&gt;So what did I do?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First, I simply wanted to get fur working. So I made a &lt;del&gt;simple&lt;&#x2F;del&gt; system that would make duplicates of the mesh and extrude every single vertex slightly out based on the provided “strand length” and “shell count”. Through that we could make the layers, or shells, very easily. Additionally, it felt appropriate to be placing fur on a character rather than on a cube or sphere. So I searched “furry” into sketchfab and found a League of Legends character called “Kindred”. So I used this mesh and it actually didn’t work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;How_do_extrusions_work?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_do_extrusions_work?&quot; aria-label=&quot;Anchor link for: How_do_extrusions_work?&quot;&gt;How do extrusions work?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I used a nifty tool in Godot called &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt;, which has some lovely documentation. Basically it can load a surface from one mesh, perform manipulations on the data, and then push that new mesh to a mesh object (which could be the original mesh but it wasn’t in this case). So what I did is I loaded each surface and iterated throught the vertices. The &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt; provides a lookup to get all face indices touching a given vertex index. Then I got the normals of each connected face and averaged them out. I normalized the average normal and then multiplied it by the shell layer depth. The original vertex is then offset by that value and we move to the next one.&lt;&#x2F;p&gt;
&lt;p&gt;I’m actually really interested to see what kinds of fun procedural mesh generation I can do with the &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt; in the future. I believe I could push new vertex data to it should I have something interesting for it. Maybe I could even make a voxel renderer with greedy tiling?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;It’s_rigged&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#It’s_rigged&quot; aria-label=&quot;Anchor link for: It’s_rigged&quot;&gt;It’s rigged&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So the character model was rigged for an animation, which I thought would be cool to try to make the fur work properly with it. However something about how rigged meshes work means that the original mesh would be properly deformed by the skeleton and the fur meshes would not. It actually resulted in the fur shell meshes doing a T-pose while laying on the ground behind the properly rendering character. Which was quite frustrating. I am not terribly familiar with how skeleton rigs and mesh deforms actually work in terms of the mesh data, so I decided to just strip the rig and make it a static mesh.&lt;&#x2F;p&gt;
&lt;p&gt;With the stripped mesh, everything was working wonderfully.&lt;&#x2F;p&gt;
&lt;p&gt;Next I took on working on different systems that could make the fur look nicer.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;EcSoC2eQGZMAAAAC&amp;#x2F;wow-t-posing.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;17657676&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.31687&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;wow-t-posing-spin-vocaloid-hatsune-miku-gif-17657676&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;A Hatsune Miku model in a t-pose rotating&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;Shader_improvements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Shader_improvements&quot; aria-label=&quot;Anchor link for: Shader_improvements&quot;&gt;Shader improvements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I wanted to make the fur look nicer, and one way to do that was to use some fun shader stuff. In Godot 4 we have &lt;code&gt;instance uniform&lt;&#x2F;code&gt; variables in shaders which are uniform values that can be assigned on a per-&lt;code&gt;MeshInstance3D&lt;&#x2F;code&gt; basis. So I was able to give each shell layer information on what percentage of the depth it was at and also assigning strand colours. Realistically, the strand colours didn’t need to be on a per-instance basis, but I did it so…yeah.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Simulation_improvements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Simulation_improvements&quot; aria-label=&quot;Anchor link for: Simulation_improvements&quot;&gt;Simulation improvements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So you may have noticed that the fur doesn’t really do anything and just sticks straight out. So what I wanted to do was add a basic physics simulation, especially a better one than Acerola made in the video (sorry not surry, bud). I used some basic physics lerping and damped the physics affect factor based on a curve resource.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot; aria-label=&quot;Anchor link for: Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot;&gt;Godot Resources Are Magical And You Better Use Them Or Else&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;VAn-KzIfuvIAAAAC&amp;#x2F;happy-cry.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;17477970&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.39738&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;happy-cry-tears-of-joy-pokemon-team-tocket-gif-17477970&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;James from Pokemon crying happy tears&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Something that was really awesome for me when I first moved to Godot from Unity way back in 2020 (yeah I switched before it was cool) was the sheer quantity of useful resources available to be as a developer. And the ability to just export that and use it to manipulate stuff was incredible. They’ve only gotten better over time. Though &lt;code&gt;Curve&lt;&#x2F;code&gt; is definitely a classic. It’s simply a curve that supports different handle types and can have multiple vertices as well. I generally used it for making a basic smoothstep function, but the curve resource is fully customizable to change the thickness of strands along their length.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to use &lt;code&gt;Curve&lt;&#x2F;code&gt;s not only for visual thickness but also for the simulated “stiffness” of the strands along the length. What that means is that you can choose which parts of the strand are stiff and which aren’t.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Working_in_realtime&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Working_in_realtime&quot; aria-label=&quot;Anchor link for: Working_in_realtime&quot;&gt;Working in realtime&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So all of this is &lt;strong&gt;technically&lt;&#x2F;strong&gt; working in real-time. One trouble is that the fur shells don’t exist until the game starts and a behemoth of mesh generation is done (at startup!!!)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;And_then…?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#And_then…?&quot; aria-label=&quot;Anchor link for: And_then…?&quot;&gt;And then…?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What comes next may surprise you… I made a plugin. Of course I made a plugin. I’m an addict for plugins. Tooling is love and tooling is life.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_Shell_Fur_Plugin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_Shell_Fur_Plugin&quot; aria-label=&quot;Anchor link for: A_Shell_Fur_Plugin&quot;&gt;A Shell Fur Plugin&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently I got to see the lovely GodotCon talk by Miguel (bitbrain) talking about tooling in Godot. It was a great talk and if you love Godot you should really check it out. One of the key things I learned from the talk (at least that is relevant here) is the difference between “addon” and “plugin” in godot. “addon” is literally just something third party. Plugins are specifically code that is registered with the engine and requires the &lt;code&gt;plugin.cfg&lt;&#x2F;code&gt; file for godot to handle it. Basically, all plugins are addons, but not all addons are plugins.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So I got to work on a proper plugin for this shell fur. I had a few hopes, but I wasn’t sure what would all work in-editor so I had to play around with.&lt;&#x2F;p&gt;
&lt;p&gt;A key difference in my approach was in my programming language. For my original development, I chose to use C# since it’s one of my favourite languages to use with Godot. However, for this plugin, I wanted to make it compatible with more projects (and most people don’t use C# to my knowledge. Yes you may gasp now.) So this was ported to GDScript. Since, to my knowledge, there is no transpiler from C# to GDscript, I did basically rewrite everything but in a different language. On the bright side, I got to play with some of the new GDScript features introduced to recent versions of Godot such as &lt;code&gt;static var&lt;&#x2F;code&gt; and typed arrays.&lt;&#x2F;p&gt;
&lt;p&gt;Once I had the basics up and running for the shell fur I wanted to make some spicy stuff (No, no, not that! Where’s the damn spray bottle?). I wanted to see how much of the fur I could get running in the editor. That means mesh generation, real-time editing of fur properties, and physics. It turned out surprisingly well, excepting a few key areas.
Basically, the mesh generation takes a ton of processing time (1.5 seconds in some instances). Which causes a huge stutter if I do it synchronously. But if I try to use a coroutine or a thread, I have to make sure I’m managing data access (async code is hell). I spent days just trying to get different asynchronous bits of code working. In the end I never actually got it to work. I opted to just have buttons at the top (inserted by a custom &lt;code&gt;InspectorPlugin&lt;&#x2F;code&gt;, which are surprisingly easy to set up!). The buttons would either trigger mesh regeneration, or purge the shell meshes. I did have to learn a bit more about editor instanced nodes. For example, if they don’t have an owner, they don’t save. If you don’t have an &lt;code&gt;EditorInterface&lt;&#x2F;code&gt; reference, you can’t tell the editor that it needs to be saved. Oh and that group you’re using to separate out your instanced meshes out from the other meshes in the scene that really need to not be messed with? Yeah you gotta add the group slightly differently to ensure it stays when saving, else it gets purged upon reload.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Lewd Joke Incoming) Plugin development is a either like sex or school team projects: either way I’m getting fucked, all that changes is if I’m having a good time or not.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I had to do a lot of work trying to make the asynchronous code work and ended up failing after trying for almost an entire week. And it’s probably worth mentioning that I’m currently (as of writing) unemployed. I was putting 9-10 hours a day for like 5 days into this and couldn’t make it work. I want to believe there is a fundamental gap in my knowledge that is causing this problem, but I was unable to figure it out with all that time so if you know how to make it work submit a PR or something? It’s open source.&lt;&#x2F;p&gt;
&lt;p&gt;That rant out of the way, what I did manage to get working was basically everything else on my checklist. Additionally, I added the option to provide a texture to the fur, which would let you do more intersting stylings for the fur. And this is where the strand colours being a per-instance and not a per-material uniform gets really fun. (And it was totally on purpose and definitely not a happy accident). The instance colours are multiplied on the texture colour, which lets you have colour variations across instances of the same fur material, for example if you wanted to have a slight variation across several furry creatures. (Frankly if you wanted to make a wetness system you could modify the colour and stiffness. However currently the roughness and metalness are on a per-material basis so a shader rewrite may be needed to make that totally work as desired.) Hey speaking of shader rewrites, I made an option so the fur tool will allow you to load a custom material instead of the default material. So while the default material is pretty robust, if you want a different style you can totally do that. You could even go so far as to have a custom shader so long as the uniforms match the expected names and types.&lt;&#x2F;p&gt;
&lt;p&gt;Also if you are super cool and awesome, there might be a few “easter eggs” in the plugin to find. Mainly because I can’t help myself when I’m banging my head into the wall for days. I needed something fun, so now you get to deal with it. XOXO&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;8mUbihM7AJAAAAAC&amp;#x2F;toradora-palm-top-tiger.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;22688840&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.95122&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;toradora-palm-top-tiger-taiga-aisaka-anime-gif-22688840&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Toradora laughing with the caption ‘menace to society’&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Future_Plans&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Future_Plans&quot; aria-label=&quot;Anchor link for: Future_Plans&quot;&gt;Future Plans&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’m not entirely certain if I have any plans for this addon. I did get an issue requesting support for older Godot version, since &lt;code&gt;static var&lt;&#x2F;code&gt; isn’t actually supported in Godot 4.0. So I rewrote some sections that would allow compatibilty for all currently available 4.X versions. If at some point people want to use it with 4.3 and there’s some breaking change, I could look into upgrading it, but with projects like this I generally do a “lazy maintenance” approach. That is, because I am not personally using this tool in my own projects, I don’t have any real needs for it. I could theoretically develop it forever. So instead I let it sit and if someone submits an issue I’ll look into fixing it, or mark the plugin as archived&#x2F;unmaintained. Really I probably have several repositories that I need to do that for, so if I ever have a boring afternoon I might have to spruce up my GitHub repos.&lt;&#x2F;p&gt;
&lt;p&gt;As this plugin is MIT licensed and fully open source, anyone is free to fork it and make it their own, or even better they can do a pull request for adding new features to the plugin. But that is only really meaningful if there are a decent number of people using the plugin, and as far as I am aware the total number is zero. That could definitely just be my limited ability to see who uses my tools. I really can only see when people star the repo on GitHub. Downloads from there and from the Godot Asset Library are completely opaque and provide no insights as to whether anyone is using my tools. Which can feel disheartening at times since I can’t ever be sure if all of this work is for nothing.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;HtRb68DqNPwAAAAC&amp;#x2F;little-witch-academia-sucy.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;25463727&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.09622&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;little-witch-academia-sucy-shrug-gif-25463727&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Sucy from Little Witch Academia shrugging&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Please_I_beg_of_you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Please_I_beg_of_you&quot; aria-label=&quot;Anchor link for: Please_I_beg_of_you&quot;&gt;Please I beg of you&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;4q5OwnFZJdEAAAAC&amp;#x2F;adorable-pleading.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;22150014&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.8625&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;adorable-pleading-eyes-anime-crying-gif-22150014&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;A young anime girl with a pleading look on her face (I don’t know the character or anime lol)&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If you use a plugin, even once, go tell the creator(s) that you used it. Tell them how you feel about it, especially if you really enjoyed it (And maybe keep things kind and constructive if you had a negative experience). It really means a lot. Frankly, everyone who creates things for others wants to know that people are enojying it. Can you imagine what it would be like if you published a game and the platform you published on didn’t have comments, views, downloads, or anything for analytics??&lt;&#x2F;p&gt;
&lt;p&gt;While I’m on this topic, it really stretches well beyond the confines of game development! I don’t talk about it much, but I recently self published a book. I spent maybe a year or two on it and to this day I have barely any insights into what people think besides my family members that tell me. Everyone who creates for others, deserves to hear that their creations sparked joy, even if it was just for a moment. Even if it was something dumb.&lt;&#x2F;p&gt;
&lt;p&gt;Also the reason I don’t talk about the book much is that it had some pretty personal stuff in it that if I linked in my socials would basically doxx me. My next novel is gonna have absolutely nothing unsafe and it’s gonna be published under a different pen name so I’ll be totally safe to hype it up for my online friends.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Showcase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Showcase&quot; aria-label=&quot;Anchor link for: Showcase&quot;&gt;Showcase&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;fuzzy.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;fuzzy.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;fuzzy.gif&quot; alt=&quot;Showing off how the fur reacts to motion (in a simulation of physics)&quot; title=&quot;Showing off how the fur reacts to motion (in a simulation of physics)&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                Showing off how the fur reacts to motion (in a simulation of physics)
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_pbr.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_pbr.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_pbr.png&quot; alt=&quot;The fur can handle PBR materials as well. Here it&amp;#x27;s a reflective gold, smoothed because it&amp;#x27;s using the base normals of the mesh instead of individual strands&quot; title=&quot;The fur can handle PBR materials as well. Here it&amp;#x27;s a reflective gold, smoothed because it&amp;#x27;s using the base normals of the mesh instead of individual strands&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                The fur can handle PBR materials as well. Here it’s a reflective gold, smoothed because it’s using the base normals of the mesh instead of individual strands
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_physics.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_physics.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_physics.gif&quot; alt=&quot;A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects&quot; title=&quot;A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_texture.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_texture.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_texture.gif&quot; alt=&quot;It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print&quot; title=&quot;It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Behaviour Trees versus State Machines</title>
          <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/guides/fsm-vs-bt/</link>
          <guid>https://queenofsquiggles.github.io/guides/fsm-vs-bt/</guid>
          <description xml:base="https://queenofsquiggles.github.io/guides/fsm-vs-bt/">&lt;!-- 
 Hey hey! this is hard-coded for my-kofi to ensure the classes get injected into tailwind. 
 You&#x27;ll need to make an overriding shortcode in your `templates&#x2F;shortcodes` called `kofi.html
 Just do your best to copy this styling if you want the same as I have. Else use Kofi&#x27;s style
--&gt;

&lt;div class=&quot;flex not-prose container mx-auto justify-center&quot;&gt;
    &lt;div class=&quot;bg-accent p-2 rounded-box shadow-2xl&quot;&gt;
        &lt;a class=&quot;flex flex-col flex-wrap justify-center&quot; href=&#x27;https:&#x2F;&#x2F;ko-fi.com&#x2F;G2G3AP0TR&#x27; target=&#x27;_blank&#x27;
            rel=&quot;noopener noreferrer&quot;&gt;
            &lt;img class=&quot;rounded-full shadow-md&quot; src=&#x27;https:&#x2F;&#x2F;storage.ko-fi.com&#x2F;cdn&#x2F;kofi4.png?v=3&#x27;
                alt=&#x27;Buy Me a Coffee at ko-fi.com&#x27; &#x2F;&gt;
        &lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m trying out a different layout for this post so the text is easier to read. it looked super dense in the typical layout. Let me know what you think! If this style is ugly I might just change it back&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I also activated full &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Weeb_(disambiguation)&quot;&gt;“weeb”&lt;&#x2F;a&gt; mode for this post. I can remove it if it detracts from people’s enjoyment, but I’m hoping it makes reading this &lt;em&gt;even more enjoyable&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;update: the GIF inclusion can break &lt;em&gt;some&lt;&#x2F;em&gt; rss feeds. If you have the option to “load full text” that should fix it. Otherwise the actual website should work too.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;Wait…AI??&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Wait…AI??&quot; aria-label=&quot;Anchor link for: Wait…AI??&quot;&gt;Wait…AI??&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First to dismiss anyone who came in here thinking I was going to talk about &lt;em&gt;ChatGPT&lt;&#x2F;em&gt; or &lt;em&gt;Midjourney&lt;&#x2F;em&gt;. While those are also referred generally as “AI”, the term itself is infinitely more general than “Large Language Model used for generating arbitrary content while also violating every license known to humanity.” This article is focusing on a different sector of artificial intelligence. Specifically one of the more “smoke and mirrors” type of intelligence, which is really where games development thrives!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;AI_and_Games_🤖&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#AI_and_Games_🤖&quot; aria-label=&quot;Anchor link for: AI_and_Games_🤖&quot;&gt;AI and Games 🤖&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Generally, it is easiest to think of AI in games to be primarily used for creating interesting hostile enemies such as the guards in &lt;em&gt;Metal Gear Solid&lt;&#x2F;em&gt; games or the Alien (Xenomorph) in &lt;em&gt;Alien: Isolation&lt;&#x2F;em&gt;. However they are also used for the cute characters in the &lt;em&gt;Animal Crossing&lt;&#x2F;em&gt; games, or the slimes in &lt;em&gt;Slime Rancher&lt;&#x2F;em&gt;. But then getting even past tangible characters, there is “The Director” in &lt;em&gt;Left For Dead 2&lt;&#x2F;em&gt;, which is an AI solution that dynamically adjusts the game based on current conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully I’m getting across the idea that AI in games is significantly more simple than the “AIs” that are sweeping public consciousness right now. In fact they can get so simple that there’s really only two kinds that I’ve ever used. That isn’t to say there &lt;strong&gt;aren’t&lt;&#x2F;strong&gt; other kinds. But that I’ve never had a problem that needed a different solution than either one or the other.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Behaviour_Trees_my_beloved_💕&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Behaviour_Trees_my_beloved_💕&quot; aria-label=&quot;Anchor link for: Behaviour_Trees_my_beloved_💕&quot;&gt;Behaviour Trees my beloved 💕&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Behaviour Trees were my first love. They are absolutely incredible and I would argue that they are functional enough to do some basic scripting with them should the need arise. Now to actually talk about them 😅&lt;&#x2F;p&gt;
&lt;p&gt;Behaviour Trees are closest to a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Flowchart&quot;&gt;“Flow Chart”&lt;&#x2F;a&gt;, which is probably the best way to think about them if you’re just getting started.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;What_is_a_tree?_(In_programming_at_least)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_is_a_tree?_(In_programming_at_least)&quot; aria-label=&quot;Anchor link for: What_is_a_tree?_(In_programming_at_least)&quot;&gt;What is a tree? (In programming at least)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A tree is a generic data structure that is used to hold “nodes” (which generally have some kind of data associated with them), and their relationships between each other. Now technically that description would be called a “Graph”, which is a less restrictive type of data structure.&lt;&#x2F;p&gt;
&lt;p&gt;Trees have some particular rules that each node can have children , which is a one-way relationship where the parent knows its children but the children do not know their parent. Additionally each node can only have a single parent. If you are used to Godot, the “Scene Tree” is a type of tree.&lt;&#x2F;p&gt;
&lt;p&gt;Technically some extra flavour is added such that child nodes &lt;em&gt;can&lt;&#x2F;em&gt; access their parent nodes, but this is distinctly against recommended workflow. You might have heard “Call down; Signal Up”. This is a method that preserves the Tree rules by ensuring that only parent nodes need to know about their child nodes. And never the other way around.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Back_to_Behaviour_Trees&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Back_to_Behaviour_Trees&quot; aria-label=&quot;Anchor link for: Back_to_Behaviour_Trees&quot;&gt;Back to Behaviour Trees&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So knowing that it is a tree data structure used to model some kind of “behaviour”, you might already have some ideas. The nodes available come in a few key types that serve specific purposes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;root (in some cases isn’t technically a node)&lt;&#x2F;li&gt;
&lt;li&gt;compositor&lt;&#x2F;li&gt;
&lt;li&gt;decorator&lt;&#x2F;li&gt;
&lt;li&gt;query&#x2F;condition&lt;&#x2F;li&gt;
&lt;li&gt;action&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The root is fairly boring because all it does is call down whatever child node it has (only one is usually allowed).&lt;&#x2F;p&gt;
&lt;p&gt;All nodes in a behaviour tree use a “tick” (or otherwise named) method to perform their own logic, and then return a state value for that node. Usually “Success”, “Failure”, or “Running” (for when it takes multiple ticks to accomplish the task).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Queries&#x2F;Conditions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Queries&amp;#x2F;Conditions&quot; aria-label=&quot;Anchor link for: Queries&amp;#x2F;Conditions&quot;&gt;Queries&#x2F;Conditions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A query node simply checks against some logical condition and returns “Success” if true and “Failure” if false. Specifically the positive affirmation leaning is helpful such that we don’t use “Is thing not true” conditions, since those can get messy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Actions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Actions&quot; aria-label=&quot;Anchor link for: Actions&quot;&gt;Actions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;An action node tries to do something. Ideally some kind of transformation that creates an external effect. Like applying a force to the character or triggering a VFX. Returns “Success” when completed, “Running” while processing, and “Failure” if something goes wrong.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Compsitors&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Compsitors&quot; aria-label=&quot;Anchor link for: Compsitors&quot;&gt;Compsitors&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A compositor is a node that can have one or more children. Based on the type of compositor (typically two core types), the way the children are iterated through is different.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Result&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Sequence&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Children are iterated through until the first child that returns “Failure”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Select&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Children are iterated through until the first child that returns “Success”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Sequences are really useful for prefixing with conditions in order to have pre-requisites for a particular action. That way you can determine under what condition an action (or actions!) is&#x2F;are taken.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Decorators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Decorators&quot; aria-label=&quot;Anchor link for: Decorators&quot;&gt;Decorators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Decorators are nodes that can only have a single child node. They “decorate” the result of their child node by transforming it in some way. There are a few key types that are generally useful:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Type&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Result&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Succeeder&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns “Success” always (except for when child returns “Running”)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Failer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns “Failure” always (except for when child returns “Running”)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Inverter&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns the opposite of the childs result (except for when child returns “Running”)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Limiter&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns the child’s result the first time (or a customizable number of times) and then always returns “Failure” without calling the child node&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Timer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns the child’s result at first, then uses a countdown timer to determine the next time to use the child node’s result. If not time yet, returns “Failure”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Decorators are pretty fun to apply a logical transformation for results. Remember how conditions are supposed to be positive affirmations? Inverters are where you can check for negative affirmations. ( &lt;em&gt;Don’t tell your therapist about this!&lt;&#x2F;em&gt; 😏 )&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Putting_it_all_together&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Putting_it_all_together&quot; aria-label=&quot;Anchor link for: Putting_it_all_together&quot;&gt;Putting it all together&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
img::render(src, alt)
&lt;p&gt;Here’s a behaviour tree example I mocked up in Obsidian.&lt;&#x2F;p&gt;
&lt;p&gt;You can see the “root” node connects to a “Sequence” which then has two children which are also “sequence” nodes. In certain contexts, it’s usually helpful to name different branches based on what they are supposed to accomplish in totality. So if we read through the tree, it goes through these steps:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Jump_Branch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Jump_Branch&quot; aria-label=&quot;Anchor link for: Jump_Branch&quot;&gt;Jump Branch&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Checking if it’s on the ground&lt;&#x2F;li&gt;
&lt;li&gt;Checking if the “JUMP” input is pressed&lt;&#x2F;li&gt;
&lt;li&gt;Passing both checks, applying a positive Y force.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;Idle_Branch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Idle_Branch&quot; aria-label=&quot;Anchor link for: Idle_Branch&quot;&gt;Idle Branch&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Invert result of
&lt;ul&gt;
&lt;li&gt;Checking if the actors velocity vector length (speed technically) is greater than zero&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Passing the check, requesting the animation “IDLE” to play&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;More_complexity?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#More_complexity?&quot; aria-label=&quot;Anchor link for: More_complexity?&quot;&gt;More complexity?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The awesome thing about behaviuour trees is that the same core nodes apply no matter what scale your tree operates at. There are some more advanced solutions for incredibly massive behaviour trees like in for the enemies in recent &lt;em&gt;Far Cry&lt;&#x2F;em&gt; games. But the same core logic is always being applied.&lt;&#x2F;p&gt;
&lt;p&gt;Also I didn’t even get into the concept of the “Blackboard”, which is basically a &lt;code&gt;Dictionary&lt;&#x2F;code&gt; of values (&lt;code&gt;Variant&lt;&#x2F;code&gt; would be a good choice for Godot) that is accessible to all nodes in the tree when they perform their tick process. The blackboard is used to communicate information across nodes. Such as caching a particular jump strength based on a condition, then using that jump strength in the “Jump Branch”.&lt;&#x2F;p&gt;
&lt;p&gt;Complex logic is pretty easy to do, once you get over the hurdle of the boiler plate. I promise I’m getting to the pros and cons, but first I gotta talk about State Machines!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Finally_talking_about_State_Machines&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Finally_talking_about_State_Machines&quot; aria-label=&quot;Anchor link for: Finally_talking_about_State_Machines&quot;&gt;Finally talking about State Machines&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;State Machines are so incredibly old compared to all of the kinds of AI available to use in games. They are originally a concept from Electrical Engineering. Specifically in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moore_machine&quot;&gt;“Moore”&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mealy_machine&quot;&gt;“Mealy”&lt;&#x2F;a&gt; machines. Those two types of state machines are pretty much the end of what was stolen from electrical engineering and robotics. From there, we added a bit of our own &lt;em&gt;spice&lt;&#x2F;em&gt; to make things more fun.&lt;&#x2F;p&gt;
&lt;p&gt;State machines are actually incredibly simple when we get down to it. Though there are some implementations that are more robust than others. We usually refer to them as “Finite State Machines” because there is a limited (finite) number of states the “machine” can be in. And specifically the machine can only ever be in one state at a single time.&lt;&#x2F;p&gt;
&lt;p&gt;Here an example image first might be more helpful:&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;p&gt;Each state handles it’s own logic as if it was completely independant of the other states. Which should be super familiar for you if you have programming experience. Essentially, if you are using a long &lt;code&gt;if...elseif...elseif...elseif...else&lt;&#x2F;code&gt; chain, or a super massive &lt;code&gt;switch&lt;&#x2F;code&gt; statement, then you might benefit from extracting each clause into a state definition.&lt;&#x2F;p&gt;
&lt;p&gt;In the above example we can see three core states, and the conditions by which they transition to the particular state. It is imporant to note those transitions are one-way directional. States themselves are actually incredibly simple. The complexity comes in when we need to orchestrate transitions based on conditions. A very Godot approach is to use signals, and then have a parent node connect those signals to state change calls. &lt;em&gt;Which is exactly what I did in Squiggles Core 4X (SC4X)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;void _Ready&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateCutscene&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnStateFinished &lt;&#x2F;span&gt;&lt;span&gt;+= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_fsm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChangeState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateMoving&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateMoving&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnStateFinished &lt;&#x2F;span&gt;&lt;span&gt;+= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_fsm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChangeState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateCutscene&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case you aren’t super familiar with C# code, the above code is connecting the &lt;code&gt;OnStateFinished&lt;&#x2F;code&gt; signal from the two types of states available to a lambda expression that calls the &lt;code&gt;_fsm&lt;&#x2F;code&gt; (an instance of &lt;code&gt;FiniteStateMachine&lt;&#x2F;code&gt;) to change the state to a new state. The signals are emitted from the state when they detect a condition where they need to exit and the orchestating node (in this case a “Player Controller”) defines how those are handled. Additionally, we can use external triggers to force a switch if we like. And subclasses of &lt;code&gt;State&lt;&#x2F;code&gt; can even define their own signals to allow multiple types of transitions out.&lt;&#x2F;p&gt;
&lt;p&gt;So we have it working great! A small number of states and the transtions handled by an orchestrating node. Now imagine we have 9 possible states with 16 total transitions! That sounds like a whole lot! How would we even begin to create a solution to that, let alone an &lt;em&gt;elegant&lt;&#x2F;em&gt; one!?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Adding_completixity_to_FSMs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Adding_completixity_to_FSMs&quot; aria-label=&quot;Anchor link for: Adding_completixity_to_FSMs&quot;&gt;Adding completixity to FSMs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
img::render(src, alt)
&lt;p&gt;So this is what would be called a “Hierarchical Finite State Machine” (HFSM). Bascially the solution to complexity is just layering more and more states on top. In the example the “top level states” would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;State Overworld&lt;&#x2F;li&gt;
&lt;li&gt;State Cutscene&lt;&#x2F;li&gt;
&lt;li&gt;State Fishing Minigame&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then “Overworld” and “Fishing Minigame” each have their own sub-FSMs for controlling logic within that state. An essential guide is that for any state implementation, if you are asking it to store more state information and changing behaviour based on that, you should extract that into multiple states. And if those multiple states are closely tied as a coherent group, group them in a sub-state machine (&lt;em&gt;kinky&lt;&#x2F;em&gt; &#x2F;j).&lt;&#x2F;p&gt;
&lt;p&gt;That hierarchy of state machines embedded into state machines is why it is called “Hierarchical.” As far as my experience goes, HFSMs are best used for more complex AI problems. For example, the above example is for a player controller which allows the game to react to the current game state and handle the player’s actions based on that. So the mini-games are just another top-level state (with sub-space). In fact if the game requires &lt;em&gt;many&lt;&#x2F;em&gt; mini-games each with their own needed controls, it may be prudent to make a new top-level state for all mini-games and then have a sub-level for each game state and then another sub-level for the individual action states for those mini-games.&lt;&#x2F;p&gt;
&lt;p&gt;Which, I would argue is rather &lt;em&gt;&lt;strong&gt;elegant&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;MWuIYnle2BsAAAAd&amp;#x2F;spy-x-family-elegant.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;3561089886890940443&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.56604&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;spy-x-family-elegant-elegance-gif-3561089886890940443&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Spy X Family character shouting ‘elegant!’&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Pros_and_Cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pros_and_Cons&quot; aria-label=&quot;Anchor link for: Pros_and_Cons&quot;&gt;Pros and Cons&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at the two now that we’ve gone over how they each work!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Behaviour_Tree_Pros&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Behaviour_Tree_Pros&quot; aria-label=&quot;Anchor link for: Behaviour_Tree_Pros&quot;&gt;Behaviour Tree Pros&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Behaviour trees are absolutely incredible at modelling more complex behaviours and interactions. A lot of enemy AIs in recent years that felt “alive” are because of super-charged behaviour trees. (As well as incredibly smart AI designers!!!) This structure is incredibly powerful for organizing behaviours and conditions in a way that can react to dynamic alterations to the structure. Yeah you can hot-swap branches at runtime and Behaviour Trees will shrug it off like a light rain (when done correctly).&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;mBgSW3COdJUAAAAd&amp;#x2F;yor-forger-spy-x-family.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;26816185&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.77778&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;yor-forger-spy-x-family-spy-x-family-season2-spy-x-family-part2-yor-gif-26816185&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Yor from Spy X Family spinning a blade in a dark forest. It ends with her catching a falling flower at the very tip of the blade.&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;State_Machine_(FSM&#x2F;HFSM)_Pros&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#State_Machine_(FSM&amp;#x2F;HFSM)_Pros&quot; aria-label=&quot;Anchor link for: State_Machine_(FSM&amp;#x2F;HFSM)_Pros&quot;&gt;State Machine (FSM&#x2F;HFSM) Pros&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;FSMs are incredibly simple to build from scratch, and can re-use existing code if you are going through a refactor. Additionally, you can extract them into HFSMs if the need arises. They are incredibly powerful at handling logic when you know a discrete number of states you want the AI to be in, and you have very specific transitions between them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Behaviour_Tree_Cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Behaviour_Tree_Cons&quot; aria-label=&quot;Anchor link for: Behaviour_Tree_Cons&quot;&gt;Behaviour Tree Cons&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There is &lt;strong&gt;so much boilerplate&lt;&#x2F;strong&gt; to get a behaviour tree system up and running. As well as needing to write custom nodes for each unique type of action that you want. If you have a lot of smaller actions that you want various different entities to be able to do slightly differently, that would be a use case, but it is still going to be a huge pain assuming you even are able to overcome the steep learning curve of thinking in trees!&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;A2ihJ4zvpOkAAAAC&amp;#x2F;anya-anya-forger.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;245623370932004073&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.854839&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;anya-anya-forger-spy-x-family-brain-fried-gif-245623370932004073&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Anya from Spy X Family looking confused and burnt out&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;State_Machine_(FSM&#x2F;HFSM)_Cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#State_Machine_(FSM&amp;#x2F;HFSM)_Cons&quot; aria-label=&quot;Anchor link for: State_Machine_(FSM&amp;#x2F;HFSM)_Cons&quot;&gt;State Machine (FSM&#x2F;HFSM) Cons&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;State Machines are much less resiliant to run-time changes because a run-time change would necessitate a re-orchestration of all of the transitions. And if that is something you are doing, you should &lt;em&gt;really&lt;&#x2F;em&gt; make sure you wouldn’t rather use an HFSM for the same solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Conclusion&quot; aria-label=&quot;Anchor link for: Conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I really wish I could just tell you, “X is better than Y and Z, so just use that for everything.” But that’s not how this works. &lt;em&gt;Nothing is ever easy&lt;&#x2F;em&gt;. The lesson I hope you are taking from this article is that you need to find the right &lt;em&gt;&lt;strong&gt;tool&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; for the &lt;em&gt;&lt;strong&gt;job&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media1.tenor.com&amp;#x2F;m&amp;#x2F;7W75SiCsuJUAAAAC&amp;#x2F;tails-speech-bubble.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;26158321&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;tails-speech-bubble-soup-gif-26158321&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Tails from Sonic Boom trying to eat soup with a fork and laughing&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;In case you haven’t noticed, I have emojis now! Thanks to a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;jemoji&quot;&gt;jekyll plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note: this is actually a clever lie now that I’m no longer using Jekyll, or even the next SSG (Static Site Generator) that I used after. I’m onto Zola, which just has emoji shortcode support out of the box. Leaving the link though in case anyone in the future wants to add the feature to their jekyll based blog&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;So_you_want_to_learn_more?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_you_want_to_learn_more?&quot; aria-label=&quot;Anchor link for: So_you_want_to_learn_more?&quot;&gt;So you want to learn more?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s some resources to learn more about particular AIs in games and how to use them in interesting ways. Lotta youtube links because gamedev youtube is my &lt;em&gt;addiction&lt;&#x2F;em&gt; ❤️&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Link&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;tthompso&quot;&gt;‘AI &amp;amp; Games’ (Tommy Thompson) YouTube channel&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Tommy is an excellent resource for learning about cutting edge AI techniques used in gaming, primarily focused on AAA solutions. But my entry to the subject was his channel which went into deep dives on different topics.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;qwOM3v8T33Q&quot;&gt;Heartbeast’s Amazing FSM Tutorial (GDscript)&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;A super straightforward approach to implementing a basic Finite State Machine in Godot 4 using GDScript. I used it as a guide for the State Machine implementation in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QueenOfSquiggles&#x2F;Squiggles-Core-4X&quot;&gt;Squiggles Core 4X&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;beehave&quot;&gt;BitBrain’s Behaviour Tree Addon “Beehave” (GDscript)(MIT)&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;A super amazing behaviour tree implementation that uses a few extra node types to make the trees more robust. Comes with debugging tools so you can inspect what the tree is doing at any given time (even in real-time!!!)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;Bonus!_You_like_memes?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Bonus!_You_like_memes?&quot; aria-label=&quot;Anchor link for: Bonus!_You_like_memes?&quot;&gt;Bonus! You like memes?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You might have noticed the GIFs I used in this post. I made a custom “include” type that I can use for my posts that specifically embeds any tenor GIF with a particular width and then centers it and adds a border. Optionally it can add a caption to the gif as well since I’m not sure how well tenor embedded gifs support captions. Plus that way if it fails to load, the meaning is still there. You can refer to my &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;guides&#x2F;embedding-gifs&#x2F;&quot;&gt;Embedding GIFs&lt;&#x2F;a&gt; page for details.&lt;&#x2F;p&gt;
&lt;!-- 
 Hey hey! this is hard-coded for my-kofi to ensure the classes get injected into tailwind. 
 You&#x27;ll need to make an overriding shortcode in your `templates&#x2F;shortcodes` called `kofi.html
 Just do your best to copy this styling if you want the same as I have. Else use Kofi&#x27;s style
--&gt;

&lt;div class=&quot;flex not-prose container mx-auto justify-center&quot;&gt;
    &lt;div class=&quot;bg-accent p-2 rounded-box shadow-2xl&quot;&gt;
        &lt;a class=&quot;flex flex-col flex-wrap justify-center&quot; href=&#x27;https:&#x2F;&#x2F;ko-fi.com&#x2F;G2G3AP0TR&#x27; target=&#x27;_blank&#x27;
            rel=&quot;noopener noreferrer&quot;&gt;
            &lt;img class=&quot;rounded-full shadow-md&quot; src=&#x27;https:&#x2F;&#x2F;storage.ko-fi.com&#x2F;cdn&#x2F;kofi4.png?v=3&#x27;
                alt=&#x27;Buy Me a Coffee at ko-fi.com&#x27; &#x2F;&gt;
        &lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Blog Update 2023</title>
          <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/blog-update-october-2023/</link>
          <guid>https://queenofsquiggles.github.io/meta/blog-update-october-2023/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/blog-update-october-2023/">&lt;h2 id=&quot;Happy_Halloween&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Happy_Halloween&quot; aria-label=&quot;Anchor link for: Happy_Halloween&quot;&gt;Happy Halloween&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hi there y’all! It’s October, a great time to indulge in horror and spooky things. I’m doing something pretty scary myself, and that’s trying to use this blog more!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What_this_blog_is_for&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_this_blog_is_for&quot; aria-label=&quot;Anchor link for: What_this_blog_is_for&quot;&gt;What this blog is for&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Originally this blog was intended to be a portfolio to help me get a job working in tech, but time and time again I get rejected because “games aren’t real experience.” So if this blog isn’t doing anything helpful for my job prospects, I might as well focus it in more on my interests than anything else!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Game_Post-Mortums&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Post-Mortums&quot; aria-label=&quot;Anchor link for: Game_Post-Mortums&quot;&gt;Game Post-Mortums&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While I’m not a huge fan of the naming, I do like writing up articles talking about the games I’ve made, why I made them and any challenges I faced while doing so. Additionally I like to talk about any interesting tech problems I had to solve as well. I’ve definitely lapsed in writing those, so I do have a backlog to work through!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Tutorials_and_Informational_Guides&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Tutorials_and_Informational_Guides&quot; aria-label=&quot;Anchor link for: Tutorials_and_Informational_Guides&quot;&gt;Tutorials and Informational Guides&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you have already been following my blog, you probably saw my last article, which was definitely in the “Informational Guide” category. I really enjoy sharing information in a way that people can more easily read. Additionally, I want to serve as a way for people to get practice with parts of game development and specifically Godot that they may not have before.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve definitely heard different opinions on shelving my YouTube channel and writing more. But what’s most important to me is that I actually have the time to put things out. If I force myself to do YouTube, I don’t end up posting anything for months because of the time investment. Whereas with this blog, I’m literally taking the first step of making a YouTube video (writing the script), and posting that directly, with some formatting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Games_Discussions&#x2F;Reviews&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Games_Discussions&amp;#x2F;Reviews&quot; aria-label=&quot;Anchor link for: Games_Discussions&amp;#x2F;Reviews&quot;&gt;Games Discussions&#x2F;Reviews&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Another thing that I really enjoy that I haven’t done yet is discussing existing games. I usually jot down notes about different game elements as I play a game and then I refer to those notes when I want to implement a similar result. It’s really helpful for those squishy design things like, “I want the player to feel anxious.” It’s not really a difficult problem to solve, but doing so in a way that also doesn’t hurt the overall enjoyment and gameplay mechanics can be incredibly difficult.&lt;&#x2F;p&gt;
&lt;p&gt;I’m not sure I would be so narcissitic to call myself a games reviewer. But perhaps what I would like to do is rather similar. More so than just pumping out opinions as fast as possible, I like to dig deep. For example, I’ve been trying to beat &lt;em&gt;The Forest&lt;&#x2F;em&gt; pretty much since it came out (arguably starting well before I should have given my age and the content). I want to do this with more games. I’ve already worked on picking apart notes for &lt;em&gt;Resident Evil 7&lt;&#x2F;em&gt;. The only component missing is my hard-mode replay, which got incredibly difficult for me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Closing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Closing&quot; aria-label=&quot;Anchor link for: Closing&quot;&gt;Closing&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have strong aspirations. If you’ve followed me for any length of time you might be skeptical of whether I can actually accomplish this. I think the best I can say is that &lt;strong&gt;I want to do this&lt;&#x2F;strong&gt;. My most common struggle is against the tension between doing what I love, and having an income. So often the two seem to be mutually exclusive. I may start putting a “support me” badge on my posts in hope that people will want to throw me a dollar or two for the information I write. Though without comments implemented on this blog there isn’t a lot of back and forth.&lt;&#x2F;p&gt;
&lt;p&gt;I suppose if you want to contact me, I have a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blobfox.coffee&#x2F;@queenofsquiggles&quot;&gt;mastodon account&lt;&#x2F;a&gt; and an &lt;a href=&quot;mailto:thequeenofsquiggles@gmail.com&quot;&gt;email account&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Godot Lighting Exploration</title>
          <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tech/godot-lighting-exploration/</link>
          <guid>https://queenofsquiggles.github.io/tech/godot-lighting-exploration/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tech/godot-lighting-exploration/">&lt;h2 id=&quot;The_goal&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_goal&quot; aria-label=&quot;Anchor link for: The_goal&quot;&gt;The goal&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I recently competed in Ludum Dare 54 (theme “Limited Space”). One of the problems players have mentioned is the poor performance. Mainly this is due to heavy leaning on &lt;code&gt;VoxelGI&lt;&#x2F;code&gt; and &lt;code&gt;SDFGI&lt;&#x2F;code&gt; which are Godot’s premier techniques for rendering realtime global illumination. What I wanted out of this is to explore what is possible with Godot, and what options are available if I want to lean towards supporting end users on lower end hardware.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at the techniques we have available to us!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;SDFGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#SDFGI&quot; aria-label=&quot;Anchor link for: SDFGI&quot;&gt;SDFGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;SDFGI is a light model managed not by a particular node but as a part of the &lt;code&gt;WorldEnvironment&lt;&#x2F;code&gt;. The technical details of it go way over my head, but basically it uses the geometry of the scene to approximate(?) the global illumination while making heavy use of Signed Distance Fields&lt;&#x2F;p&gt;
&lt;h2 id=&quot;VoxelGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#VoxelGI&quot; aria-label=&quot;Anchor link for: VoxelGI&quot;&gt;VoxelGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;VoxelGI is a semi-realtime model that makes use some some baked data as well as real time calculations. This does limit how fully an environment is able to be lit realistically. However it makes up for that by being quite easy to set up and immediately adds details to the game. The main downside is runtime performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;LightmapGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#LightmapGI&quot; aria-label=&quot;Anchor link for: LightmapGI&quot;&gt;LightmapGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Lightmap Global Illumination uses exclusively pre-baked data. Meaning that while requiring a large file that caches the lighting data, the runtime performance cost is extremely low. (But not zero because nothing is ever easy!)&lt;&#x2F;p&gt;
&lt;p&gt;Because the lighting model is baked ahead of time, you can have highly realistic simulated light for a given space. And on top of that, the node automatically places lighting probes based on your settings. Though there is a lightmap probe node if you want to set some specific probe locations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ReflectionProbe&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ReflectionProbe&quot; aria-label=&quot;Anchor link for: ReflectionProbe&quot;&gt;ReflectionProbe&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Reflection Probe might not be something you think of for lighting model. While extremely useful for creating &lt;em&gt;reflections&lt;&#x2F;em&gt;, it also provides some indirect lighting through the reflection contribution. Because of this, it can provide some added light while also making reflections appear more realistic.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are two modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update Once&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More performant&lt;&#x2F;li&gt;
&lt;li&gt;Does not detect changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Update Always&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Slower&lt;&#x2F;li&gt;
&lt;li&gt;Reacts to changes in the scene&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So when it comes to reflection probes, you may want to evaluate which mode is most effective for your scene in particular. Because I made a purely static scene for this experiment, I used “Update Once”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;The_experiment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_experiment&quot; aria-label=&quot;Anchor link for: The_experiment&quot;&gt;The experiment&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This experiment was to create a somewhat interesting scene. I recently saw the new Dune movie and liked the “mars” themes of this asset pack by Kay Lousberg. So I decided to make a desert planet themed scene.&lt;&#x2F;p&gt;
&lt;p&gt;The main reason I opted to use this asset pack (besides looking really cool) is that LightmapGI requires UV2 data from meshes. And Godot can only generate those for &lt;code&gt;MeshInstance3D&lt;&#x2F;code&gt; nodes that are using an &lt;code&gt;ArrayMesh&lt;&#x2F;code&gt; resource. At least as far as I could tell. With the GLTF models Kay produced, I was able to import them with static light baking enabled (which is &lt;strong&gt;not&lt;&#x2F;strong&gt; on by default)&lt;&#x2F;p&gt;
&lt;p&gt;The experiment was to see if individual light model nodes could all contribute to the same scene, and if disabling individual nodes would affect the illumination contributions negatively.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Designing_a_level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Designing_a_level&quot; aria-label=&quot;Anchor link for: Designing_a_level&quot;&gt;Designing a level&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With the assets I started to make a little story about a landing zone, some bases set up and trucks moving cargo around. The actual details of it were not super important, the goal was to show off the lighting anyway. But making little stories is one of my joys.&lt;&#x2F;p&gt;
&lt;p&gt;Something I discovered is all of the assets use a single material and texture, and it’s their UV coordinates that affect the colour of the mesh. Which is incredibly efficient for space when making a game. However it did not allow me to override individual “materials” of different models. For example I wanted to make the trucks have reflective windshields and more metallic hulls. Instead I opted to duplicate one of the rock meshes and replace the entire material with a slightly rough metallic material. Just to make sure the reflection probes were working as expected.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Initial_bugs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Initial_bugs&quot; aria-label=&quot;Anchor link for: Initial_bugs&quot;&gt;Initial bugs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As it would turn out, moving nodes arround, which I did to make the project easier to parse for people hoping to learn from it, actually breaks &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; nodes. As it would turn out, &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; nodes only search for meshes among their siblings and children (recursively). So if there are components of a specific branch of the scene tree that are inaccessible, the &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; will be unable to discover them!&lt;&#x2F;p&gt;
&lt;p&gt;While frustrating at first, this is actually &lt;em&gt;incredibly&lt;&#x2F;em&gt; useful! What this means is that you can have individual “segments” of your level with different light maps baked. So you could have a segment that the player will see all the time, and a segment that is only seen in cutscenes and even putting those in the same scene file, you can separate the lightmap baking and even use different settings!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Results&quot; aria-label=&quot;Anchor link for: Results&quot;&gt;Results&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It appears that layering static and dynamic light model nodes works rather well! There are some artifacts produced when the settings are changed, but it would appear that overall the quality is extremently high!&lt;&#x2F;p&gt;
&lt;p&gt;If you want to try out the application for yourself, it’s free on my itch. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;queenofsquiggles.itch.io&#x2F;squiggles-godot-lighting-demo&quot;&gt;Download here!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Blog Introduction</title>
          <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/blog-intro/</link>
          <guid>https://queenofsquiggles.github.io/meta/blog-intro/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/blog-intro/">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Introduction&quot; aria-label=&quot;Anchor link for: Introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hello hello! This is the blog introduction. I’m porting over from a hand-crafted HTML website to a Github Pages Jekyll generated static website. This change allows me to have a much more visually appealing website with a fraction of the effort, which leaves me more time to focus on what I love, which is making games!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Notable_Tech_Changes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Notable_Tech_Changes&quot; aria-label=&quot;Anchor link for: Notable_Tech_Changes&quot;&gt;Notable Tech Changes&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;Blog&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blog&quot; aria-label=&quot;Anchor link for: Blog&quot;&gt;Blog&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Due to the change, I took the opportunity to switch over to a blog style website. This will allow me to manage individual posts on their own pages without needing to sift through a massive &lt;code&gt;index.html&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;RSS&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#RSS&quot; aria-label=&quot;Anchor link for: RSS&quot;&gt;RSS&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Because of using Jekyll to generate a blog, this website &lt;em&gt;should&lt;&#x2F;em&gt; support RSS feeds, and possibly Atom feeds as well. Although as of writing I haven’t tested that. I’m trying to have the bare-bones of the website put together before pushing it to production.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Portfolio&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Portfolio&quot; aria-label=&quot;Anchor link for: Portfolio&quot;&gt;Portfolio&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I am using this website not just as a blog but also as a portfolio&#x2F;CV. Because of this the about page is going to be more fomal information about my projects. And I’ll try to share some more technical information about making the games and non-game projects. I’m not entirely sure if this website will help me make it into the game development industry, but at the very least, I’ll have a nice place to make cool posts about my games. Also people more interested in my process can read what I write here, since Mastodon’s microblogging system doesn’t work for the longer posts I want to make.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Godot SDF Gen</title>
          <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tools/godot-sdf-gen/</link>
          <guid>https://queenofsquiggles.github.io/tools/godot-sdf-gen/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tools/godot-sdf-gen/">&lt;h2 id=&quot;Tool_Overview&quot;&gt;Tool Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Godot SDF Gen is a small tool I made for myself and others to easily generate “Signed Distance Field” textures, which can be used to create a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;shaderfun.com&#x2F;2018&#x2F;07&#x2F;01&#x2F;signed-distance-fields-part-7-some-simple-effects&#x2F;&quot;&gt;variety of fun effects&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Purposes&quot;&gt;Purposes&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted to create a small, useful tool with the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;godotengine.org&#x2F;&quot;&gt;Godot Game Engine&lt;&#x2F;a&gt;. Although largely marketed as a &lt;em&gt;game&lt;&#x2F;em&gt; engine, Godot does actually provide a plethera of features beneficial to desktop and mobile tool applications. And that very distinction that the software application can be made in Godot and exported to desktop and mobile with minimal extra effort was very attractive. Given this project, a mobile version didn’t really make sense.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;UI&quot;&gt;UI&lt;&#x2F;h2&gt;
&lt;p&gt;Godot had recently revamped their Theme designing system, which allowed for the user interface to be customized in many ways. I would say that I over did it on this project. I have a much stronger sense for code and narrative than I do for art. Colour blindness may have affected this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Systems&quot;&gt;Systems&lt;&#x2F;h2&gt;
&lt;p&gt;Originally, I created it as a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minimum_viable_product&quot;&gt;Minimal Viable Product (MVP)&lt;&#x2F;a&gt;. I used the built-in Godot UI systems and the scripting language, GDScript to manually read the pixels of an image in and process the kernel to determine the SDF value. After getting it to work, I ported the logic to a shader so it could utilize the GPU’s processing power. Unfortunately, setting the kernel size too high actually crashed my computer for reasons I’m still unsure. I believe it had something to do with my desktop environment, but as I said, I’m not sure. I added in a “safety lock” for keeping the kernel within a certain range. I also added a feature where you could have the program play a small notification sound once processing was completed. This was helpful for processing larger files since I was working mainly with a slower laptop at the time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Reception&quot;&gt;Reception&lt;&#x2F;h2&gt;
&lt;p&gt;The tool went largely unnoticed by the public. It is available freely, but due to the niche feature, it is mostly just helpful for me and my purposes. Which is still a valuable way to spend my time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Screenshots&quot;&gt;Screenshots&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tools&#x2F;godot-sdf-gen&#x2F;tool_preview_1.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;tool_preview_1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;tool_preview_1.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tools&#x2F;godot-sdf-gen&#x2F;tool_preview_2.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;tool_preview_2.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;tool_preview_2.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tools&#x2F;godot-sdf-gen&#x2F;tool_preview_3.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;tool_preview_3.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;tool_preview_3.png&quot; alt=&quot;&quot; title=&quot;&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Widget&quot;&gt;Widget&lt;&#x2F;h2&gt;
&lt;div class=&quot;container max-w-md&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;itch.io&#x2F;embed&#x2F;1538319?dark=true&quot; width=&quot;45%&quot; frameborder=&quot;0&quot;&gt;
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;queenofsquiggles.itch.io&amp;#x2F;godot-sdf-gen&quot;&gt;
            Godot SDF Gen by QueenOfSquiggles
        &lt;&#x2F;a&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
    </channel>
</rss>

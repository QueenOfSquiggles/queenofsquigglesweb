<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Queen Of Squiggles&#x27;s Blog - godot</title>
    <subtitle>The personal blog for all of the Queen&#x27;s news, ramblings, portfolio stuffs, and more!</subtitle>
    <link rel="self" type="application/atom+xml" href="https://queenofsquiggles.github.io/tags/godot/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://queenofsquiggles.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-12-09T00:00:00+00:00</updated>
    <id>https://queenofsquiggles.github.io/tags/godot/atom.xml</id>
    <entry xml:lang="en">
        <title>Choreographer Design Documentation</title>
        <published>2023-12-09T00:00:00+00:00</published>
        <updated>2023-12-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Queen Of Squiggles
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://queenofsquiggles.github.io/tech/choreographer-design/"/>
        <id>https://queenofsquiggles.github.io/tech/choreographer-design/</id>
        
        <content type="html" xml:base="https://queenofsquiggles.github.io/tech/choreographer-design/">&lt;h2 id=&quot;Blog_Post_Note&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blog_Post_Note&quot; aria-label=&quot;Anchor link for: Blog_Post_Note&quot;&gt;Blog Post Note&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update (August 24th, 2024)&lt;&#x2F;strong&gt;: This effort&#x2F;project has since been abandoned. However anyone wishing to take this idea further is quite welcome to!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hey, this is the same markdown that is in the choreographer git repository. And one is significantly more likely to be updated. This is the version that was initially uploaded on December 19th, 2023. If you are from the future reading this, it is entirely possible the design has changed by some amount to accommodate changes in our reality. Otherwise please enjoy my mess :3&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Preface:&lt;&#x2F;strong&gt; For simplicity, this document is written in present tense for specific end-goals and in future tense for possible but unlikely goals. This project could be considered to be “complete” once all present tense declarations are true.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;Choreographer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Choreographer&quot; aria-label=&quot;Anchor link for: Choreographer&quot;&gt;Choreographer&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Choreographer (C11R) is a GDExtension based scripting language for Godot 4.2+.&lt;&#x2F;p&gt;
&lt;p&gt;Similar to Unreal Engine’s Blueprints system, it uses a Node-Graph Event system to manage code paths. Where an Event is equivalent to a “method” or “function” and is not necessarily related to Events in the context of an Observer Pattern.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;User_Groups&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#User_Groups&quot; aria-label=&quot;Anchor link for: User_Groups&quot;&gt;User Groups&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There are three core user groups of interest for Choreographer:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Game developers&lt;&#x2F;li&gt;
&lt;li&gt;Tooling Developers&lt;&#x2F;li&gt;
&lt;li&gt;Team Collaboration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;Game_Developers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Developers&quot; aria-label=&quot;Anchor link for: Game_Developers&quot;&gt;Game Developers&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Game developers are (usually) less concerned with what they use to make a game and more concerned with actually finishing and releasing their game. To that end, Choreographer is intended to be highly usable for increasing efficacy of development as well as lowering the barrier to entry for developers who may not have experience with traditional programming languages.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Tooling_Developers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Tooling_Developers&quot; aria-label=&quot;Anchor link for: Tooling_Developers&quot;&gt;Tooling Developers&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Tooling developers enjoy creating tools for Game Developers to use. They enjoy clean and documented systems which allow them to create interesting resources with minimal effort. Tooling developers are more likely to contribute back to the source project if they deem it worthy and&#x2F;or interesting.
In order to serve tools developers, as well as to leverage their skills, Choreographer provides a simple “Block” registration system which allows custom logic blocks to be registered from a plugin and can be used from within the Choreographer Scripting Interface&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Team_Collaboration_&#x2F;_Professional_Development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Team_Collaboration_&amp;#x2F;_Professional_Development&quot; aria-label=&quot;Anchor link for: Team_Collaboration_&amp;#x2F;_Professional_Development&quot;&gt;Team Collaboration &#x2F; Professional Development&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Teams, both for smaller ventures like game jams and larger ventures like a complete game company, require specific features that may not necessarily be needed for individuals. For example teams will benefit from being able to leverage Version Control Systems such as git to collaborate more effectively. Additionally, teams are typically comprised of people with a diversity of skills and experience. In order to best leverage their unique skills and talents, they need to be able to leverage each other in mutually beneficial ways.&lt;&#x2F;p&gt;
&lt;p&gt;In order to best serve teams and professional groups, Choreographer uses a text-based (XML) file format, which allows easily readable files which can ease aches and pains from merge conflicts.
Additionally, the same feature which allows tooling developers to register custom logic blocks allows individual team members to provide logic blocks internally to their own team. And those highly specialized logic blocks can be used to increase the efficiency and ease of development for all team members.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Language_Specification&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Language_Specification&quot; aria-label=&quot;Anchor link for: Language_Specification&quot;&gt;Language Specification&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;Definitions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Definitions&quot; aria-label=&quot;Anchor link for: Definitions&quot;&gt;Definitions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;“Script” - a single file and class of Choreographer.
“Block” - a single node in the graph of a script.
“Event” - a method contained in a C11R Script comprised of a directed acyclic graph of Blocks.
“Connection” - a relationship between two Blocks marked by a line
“Emit”&#x2F;“Emitting” - refers to a situation where the connection is on the right side of the block meaning it is an output
“Receive”&#x2F;“Receiving” - refers to a situation where the connection is on the left side of the block meaning it is an input&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Graph_Systems_Review_(Mathematical)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Graph_Systems_Review_(Mathematical)&quot; aria-label=&quot;Anchor link for: Graph_Systems_Review_(Mathematical)&quot;&gt;Graph Systems Review (Mathematical)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The graphs in Choreographer are “directed acyclic graphs”, which is a specific type of graph which allows for validation of certain properties. For simplicity the details are described here:&lt;&#x2F;p&gt;
&lt;p&gt;“Directed” - connections between nodes go in a particular direction and can but are not necessarily bi-directional
“Acyclic” - there are no sequences of connections in the graph which would allow a “cycle”, or a chain that loops infinitely.&lt;&#x2F;p&gt;
&lt;p&gt;Directed and Acyclic graphs are both long-standing mathematical descriptions and have a plethora of algorithms available for managing them.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of the mathematical description, “nodes” can also be referred to as “vertices”, but in this specific case we call them “Blocks” to avoid confusion with the &lt;code&gt;Node&lt;&#x2F;code&gt; types in Godot.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Event_Systems&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Event_Systems&quot; aria-label=&quot;Anchor link for: Event_Systems&quot;&gt;Event Systems&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Each &lt;code&gt;Event&lt;&#x2F;code&gt; is a sequence of operations. A specific type of connection called the &lt;code&gt;Event Connection&lt;&#x2F;code&gt; is connected across the graph to determine the flow of logic. Other connections are of a value type, called &lt;code&gt;Value Connection&lt;&#x2F;code&gt;. Internally, these are an &lt;code&gt;enum Connection&lt;&#x2F;code&gt; which allows every connection to be one of each type, not both, and not nothing(&lt;code&gt;null&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Event_Connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Event_Connection&quot; aria-label=&quot;Anchor link for: Event_Connection&quot;&gt;&lt;code&gt;Event Connection&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Event Connections work through a push system. Once the block emitting the event connection completes execution, the event connections which are marked as active are used to find the next Block(s) in the event graph.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Value_Connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Value_Connection&quot; aria-label=&quot;Anchor link for: Value_Connection&quot;&gt;&lt;code&gt;Value Connection&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Value connections work through a pull system. When a block is triggered to execute, it checks in memory for the input data. If any receiving port has stale (&lt;code&gt;null&lt;&#x2F;code&gt;) data, it first triggers the emitting block to regenerate that data, this can trigger recursively if necessary.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Block_Definitions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Block_Definitions&quot; aria-label=&quot;Anchor link for: Block_Definitions&quot;&gt;Block Definitions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Blocks can be defined in a variety of ways depending on the source of their creation.&lt;&#x2F;p&gt;
&lt;p&gt;All block definitions require a data segment and a logic segment as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Name (String)&lt;&#x2F;li&gt;
&lt;li&gt;Documentation (String) (Optional)&lt;&#x2F;li&gt;
&lt;li&gt;Inputs (Array&amp;lt;Connection&amp;gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Outputs (Array&amp;lt;Connection&amp;gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Execution Function (sig: &lt;code&gt;fn(Vec&amp;lt;Connection&amp;gt;) -&amp;gt; Vec&amp;lt;Connection&amp;gt;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Input Icons (Array&amp;lt;String&amp;gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Output Icons (Array&amp;lt;String&amp;gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Core_Library&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Core_Library&quot; aria-label=&quot;Anchor link for: Core_Library&quot;&gt;Core Library&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The Core Library, or the collection of Block Definitions made available by Choreographer itself, are all namespaced to “core”. These block definitions are the basic units of logic for Choreographer and are registered internally by defining them as rust structs that implement the &lt;code&gt;IBlock&lt;&#x2F;code&gt; trait and submitting them to the &lt;code&gt;ChoreographerServer&lt;&#x2F;code&gt; registry.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Third_Party_Libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Third_Party_Libraries&quot; aria-label=&quot;Anchor link for: Third_Party_Libraries&quot;&gt;Third Party Libraries&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Third Party Libraries are collections of blocks registered by some means besides Choreographer. This is the intended way to add specificity to Choreographer.&lt;&#x2F;p&gt;
&lt;p&gt;While it is potentially possible to define and register these block definitions through an additional GDExtension project, it is recommended to write custom block definitions in GDScript and register them through a plugin.&lt;&#x2F;p&gt;
&lt;p&gt;The reasoning behind this is that I am not entirely certain how to use Choreographer as a library for type definitions without simply appending it to the project as a dependency, which could potentially cause problems with FFI. Should someone smarter than me know how this part of GDExtension&#x2F;FFI works and is able to help with this side, registering custom blocks through GDExtension could become possible. However, please remember that the end user will require a binary for every platform they may want to publish their game on, and as such the number of GDExtension libraries in their project will exponentially increase the difficulty of exporting if those libraries are not pre-compiled for the user’s target platforms (Think Mobile and Apple platforms, which are tricky).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;How_Third_Party_Block_Definitions_work_internally&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_Third_Party_Block_Definitions_work_internally&quot; aria-label=&quot;Anchor link for: How_Third_Party_Block_Definitions_work_internally&quot;&gt;How Third Party Block Definitions work internally&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Internally, there is a “CustomBlock” block definition which redirects standard &lt;code&gt;IBlock&lt;&#x2F;code&gt; function calls to a series of &lt;code&gt;Callable&lt;&#x2F;code&gt;s point at particular function names.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the future, when abstract method definitions become available, I want this to be refactored to use abstract methods instead, which should ease the pain of development&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The method of storage for these callables should be &lt;code&gt;Option&amp;lt;Callable&amp;gt;&lt;&#x2F;code&gt; such that when encountering a value of &lt;code&gt;None&lt;&#x2F;code&gt;, we can emit a warning message and skip processing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Virtual_Heap_Memory&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Virtual_Heap_Memory&quot; aria-label=&quot;Anchor link for: Virtual_Heap_Memory&quot;&gt;Virtual Heap Memory&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Choreographer uses a heap memory abstraction. That is, a &lt;code&gt;Vec&amp;lt;Option&amp;lt;Variant&amp;gt;&amp;gt;&lt;&#x2F;code&gt; which allows indices to serve as a memory address and value checking on the rust-side of things.&lt;&#x2F;p&gt;
&lt;p&gt;The organization of the heap is as such:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Script local variables (effectively static as variables cannot be de-initialized until the script itself is dropped)&lt;&#x2F;li&gt;
&lt;li&gt;Temporary Event execution memory (dropped upon event completion)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;An option available to the user could be to choose between memory usage and performance. For example, to save performance costs, the memory heap could simply be nulled (&lt;code&gt;None&lt;&#x2F;code&gt;) out rather than resizing the &lt;code&gt;Vec&lt;&#x2F;code&gt;. But this could create a memory cost as each execution unit increases the size of the nothing array. The immediate deletion would remove need for some kind of garbage collection system, which I see as a band-aid for bad memory management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each script is in charge of its own virtual heap memory.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, though it is referred to as “virtual” the data being stored is also literally in the program’s heap memory. But by virtualizing it the scripts create an effective memory arena such that the entire block of memory can be dropped all at once when the script instance is dropped.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;How_do_individual_blocks_interact_with_the_virtual_heap?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_do_individual_blocks_interact_with_the_virtual_heap?&quot; aria-label=&quot;Anchor link for: How_do_individual_blocks_interact_with_the_virtual_heap?&quot;&gt;How do individual blocks interact with the virtual heap?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The script execution maps inputs and outputs to virtual heap addresses (&lt;code&gt;usize&lt;&#x2F;code&gt; value) such that when an output is calculated it is assigned to the address that inputs requiring that value are also targeting. A value goes stale once there are no remaining inputs that target that address, and as such can be dropped.&lt;&#x2F;p&gt;
&lt;p&gt;It is possible to develop a system by which stale memory is detected throughout the execution of an event graph, this would certainly increase the efficiency of larger event graphs, however this may be difficult to implement based on a variety of factors. Testing will be needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Choreographer_Scripting_Interface_(CSI)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Choreographer_Scripting_Interface_(CSI)&quot; aria-label=&quot;Anchor link for: Choreographer_Scripting_Interface_(CSI)&quot;&gt;Choreographer Scripting Interface (CSI)&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The CSI is a visual representation of the data model contained in memory and in the corresponding &lt;code&gt;.c11r&lt;&#x2F;code&gt; file. Hence, the reasonable approach towards developing the CSI is to use the Model-View-Controller system.&lt;&#x2F;p&gt;
&lt;p&gt;The CSI is effectively the View and Controller as the Model is the only component required for execution at runtime. CSI displays a graph of blocks using Godot’s &lt;code&gt;GraphEdit&lt;&#x2F;code&gt; systems. And all changes are marshalled out to the controller component which in turn serializes changes in data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;The_.c11r_format&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_.c11r_format&quot; aria-label=&quot;Anchor link for: The_.c11r_format&quot;&gt;The &lt;code&gt;.c11r&lt;&#x2F;code&gt; format&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Choreographer Script files use the &lt;code&gt;c11r&lt;&#x2F;code&gt; extension and are in the well tested XML file format. The logic behind using XML is that it allows attributes to be appended onto a tag, which allows for a more detailed description of individual objects without necessitating deep nesting like JSON would require. Additionally, as HTML is a superset of XML, those familiar with web development should be able to easily read &lt;code&gt;c11r&lt;&#x2F;code&gt; files with minimal effort.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Example_.c11r_data&#x2F;schema&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Example_.c11r_data&amp;#x2F;schema&quot; aria-label=&quot;Anchor link for: Example_.c11r_data&amp;#x2F;schema&quot;&gt;Example &lt;code&gt;.c11r&lt;&#x2F;code&gt; data&#x2F;schema&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c11r&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;godot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;02123&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;godot&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;guid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;02165&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;res:&#x2F;&#x2F;asdaslkhjasd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some_var&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;isconst&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;another_var&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;something&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;isconst&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vars&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blocks&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IfElse&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blocks&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connections&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;left_id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;left_port&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;right_id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0002&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;right_port&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connections&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            This is a docstring
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gui &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.2;3.6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gui&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.2;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            This is a comment block
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comment&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c11r&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;Testing_Challenges&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Testing_Challenges&quot; aria-label=&quot;Anchor link for: Testing_Challenges&quot;&gt;Testing Challenges&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Unit testing is incredibly helpful for verifying that functions operate as intended when changes are made. Unfortunately for godot-rust, the actual components that interoperate with Godot’s types cannot be used because the definitions are only known when Godot loads the library into memory and initializes it over FFI. What this means is that &lt;em&gt;&lt;strong&gt;no component that uses Godot types can be unit tested without a very specific setup&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;. There are currently tools and attempts to create a custom testing environment for godot-rust, however as of now I believe the most effective way to test a godot-rust project is to extract what logic is possible away from the Godot Types. For example the serialization&#x2F;deserialization systems are based on a submodule that emits and receives structured metadata rather than a Godot type. This allows these systems to be unit tested.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Continuation_of_documentation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Continuation_of_documentation&quot; aria-label=&quot;Anchor link for: Continuation_of_documentation&quot;&gt;Continuation of documentation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This here is all I can think of that should be included at this present moment. Unfortunately I am a mortal and am prone to mistakes, so please let me know if something needs to be changed and&#x2F;or updated by creating an issue in the repository.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Godot Engine Editor Icon Colours</title>
        <published>2023-11-24T00:00:00+00:00</published>
        <updated>2023-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Queen Of Squiggles
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://queenofsquiggles.github.io/tech/godot-icon-colours/"/>
        <id>https://queenofsquiggles.github.io/tech/godot-icon-colours/</id>
        
        <content type="html" xml:base="https://queenofsquiggles.github.io/tech/godot-icon-colours/">&lt;h2 id=&quot;Colours_LUT&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Colours_LUT&quot; aria-label=&quot;Anchor link for: Colours_LUT&quot;&gt;Colours LUT&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The markdown doesn’t really support custom colours, so see below for examples. (dark reader users make sure you disable it for this website if you wanna see accurate colours!!!!)&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Hex Light&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Hex Dark&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Engine Name&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#478cbf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#478cbf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Godot Blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#414042&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#414042&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Godot Gray&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#000000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bfbfbf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure black&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff0000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff0000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure red&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#00ff00&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#00ff00&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#0000ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#0000ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pure blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#808080&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#808080&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;GUI disabled color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b3b3b3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#363636&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;GUI disabled light color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#699ce8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#699ce8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;GUI highlight color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f9f9f9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#606060&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Scrollbar grabber highlight color&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#fc7f7f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#cd3838&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Spatial&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#8da5f3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#3d64dd&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4b70ea&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#1a3eac&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2D Dark&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#8eef97&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2fa139&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Control&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#003e7a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2b74bb&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Selection (darker blue)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f7f5cf&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#615f3a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Gizmo (yellow)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#80ff45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#74ff34&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#45ffa2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2cff98&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Aqua&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#45d7ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#22ccff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Blue&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#8045ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#702aff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Purple&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff4596&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff2781&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Pink&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#75d1e6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#41acc5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Frozen gradient middle&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#84ffee&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#49ccba&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Frozen gradient bottom&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eec315&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#d58c0b&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Color track orange&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#dbee15&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b7d10a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Color track yellow&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#288027&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#218309&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Color track green&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#a2d2ff&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4998e3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Shape resource (light blue)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ea7940&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bd5e2c&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3D Position track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ff2b88&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bd165f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3D Rotation track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eac840&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#bd9d1f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3D Scale track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#3cf34e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#16a827&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Call Method track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2877f6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#236be6&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Bezier Curve track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eae440&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#9f9722&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Audio Playback track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#a448f0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#9853ce&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Animation Playback track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#5ad5c4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#0a9c88&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Blend Shape track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#919191&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#6e6e6e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Border part&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#c6ced4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#828f9b&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;New Atlas&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#5abbef&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4fb2e9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;int&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#35d4f4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#27ccf0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;float&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4593ec&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#4690e7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;String&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ac73f1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ad76ee&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Vector2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f1738f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ee758e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Rect2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#de66f0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#dc6aed&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Vector3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b9ec41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#96ce1a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Transform2D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f74949&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f77070&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Plane&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ec418e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ec69a3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Quaternion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ee5677&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#ee7991&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;AABB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#e1ec41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#b2bb19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Basis&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f68f45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#f49047&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Transform3D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#417aec&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#6993ec&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;NodePath&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#41ec80&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#2ce573&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;RID&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#55f3e3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#12d5c3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#54ed9e&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#57e99f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Dictionary&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#cf68ea&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#c050dd&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Functions and expressions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;#eac968&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;#d9b64f&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Textures and cubemaps&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;Colour_Details&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Colour_Details&quot; aria-label=&quot;Anchor link for: Colour_Details&quot;&gt;Colour Details&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s all the colours. First colour is the light theme, second is dark. Then some text in each colour to show what it looks like.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Godot_Blue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Blue&quot; aria-label=&quot;Anchor link for: Godot_Blue&quot;&gt;Godot Blue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;478cbf –&amp;gt; 478cbf&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #478cbf;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #478cbf;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Godot_Gray&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Gray&quot; aria-label=&quot;Anchor link for: Godot_Gray&quot;&gt;Godot Gray&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;414042 –&amp;gt; 414042&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #414042;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #414042;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_black&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_black&quot; aria-label=&quot;Anchor link for: Pure_black&quot;&gt;Pure black&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;000000 –&amp;gt; bfbfbf&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #000000;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bfbfbf;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_red&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_red&quot; aria-label=&quot;Anchor link for: Pure_red&quot;&gt;Pure red&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ff0000 –&amp;gt; ff0000&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff0000;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff0000;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_green&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_green&quot; aria-label=&quot;Anchor link for: Pure_green&quot;&gt;Pure green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;00ff00 –&amp;gt; 00ff00&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #00ff00;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #00ff00;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pure_blue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pure_blue&quot; aria-label=&quot;Anchor link for: Pure_blue&quot;&gt;Pure blue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;0000ff –&amp;gt; 0000ff&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #0000ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #0000ff;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;GUI_disabled_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GUI_disabled_color&quot; aria-label=&quot;Anchor link for: GUI_disabled_color&quot;&gt;GUI disabled color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;808080 –&amp;gt; 808080&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #808080;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #808080;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;GUI_disabled_light_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GUI_disabled_light_color&quot; aria-label=&quot;Anchor link for: GUI_disabled_light_color&quot;&gt;GUI disabled light color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;b3b3b3 –&amp;gt; 363636&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b3b3b3;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #363636;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;GUI_highlight_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GUI_highlight_color&quot; aria-label=&quot;Anchor link for: GUI_highlight_color&quot;&gt;GUI highlight color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;699ce8 –&amp;gt; 699ce8&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #699ce8;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #699ce8;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Scrollbar_grabber_highlight_color&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Scrollbar_grabber_highlight_color&quot; aria-label=&quot;Anchor link for: Scrollbar_grabber_highlight_color&quot;&gt;Scrollbar grabber highlight color&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f9f9f9 –&amp;gt; 606060&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f9f9f9;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #606060;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Spatial&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Spatial&quot; aria-label=&quot;Anchor link for: Spatial&quot;&gt;Spatial&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;fc7f7f –&amp;gt; cd3838&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #fc7f7f;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #cd3838;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;2D&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2D&quot; aria-label=&quot;Anchor link for: 2D&quot;&gt;2D&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;8da5f3 –&amp;gt; 3d64dd&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #8da5f3;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #3d64dd;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;2D_Dark&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2D_Dark&quot; aria-label=&quot;Anchor link for: 2D_Dark&quot;&gt;2D Dark&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;4b70ea –&amp;gt; 1a3eac&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4b70ea;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #1a3eac;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Control&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Control&quot; aria-label=&quot;Anchor link for: Control&quot;&gt;Control&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;8eef97 –&amp;gt; 2fa139&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #8eef97;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2fa139;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Selection_(darker_blue)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Selection_(darker_blue)&quot; aria-label=&quot;Anchor link for: Selection_(darker_blue)&quot;&gt;Selection (darker blue)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;003e7a –&amp;gt; 2b74bb&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #003e7a;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2b74bb;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Gizmo_(yellow)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Gizmo_(yellow)&quot; aria-label=&quot;Anchor link for: Gizmo_(yellow)&quot;&gt;Gizmo (yellow)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f7f5cf –&amp;gt; 615f3a&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f7f5cf;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #615f3a;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Green&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Green&quot; aria-label=&quot;Anchor link for: Green&quot;&gt;Green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;80ff45 –&amp;gt; 74ff34&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #80ff45;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #74ff34;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Aqua&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Aqua&quot; aria-label=&quot;Anchor link for: Aqua&quot;&gt;Aqua&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;45ffa2 –&amp;gt; 2cff98&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #45ffa2;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2cff98;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Blue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blue&quot; aria-label=&quot;Anchor link for: Blue&quot;&gt;Blue&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;45d7ff –&amp;gt; 22ccff&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #45d7ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #22ccff;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Purple&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Purple&quot; aria-label=&quot;Anchor link for: Purple&quot;&gt;Purple&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;8045ff –&amp;gt; 702aff&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #8045ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #702aff;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Pink&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pink&quot; aria-label=&quot;Anchor link for: Pink&quot;&gt;Pink&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ff4596 –&amp;gt; ff2781&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff4596;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff2781;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Frozen_gradient_middle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Frozen_gradient_middle&quot; aria-label=&quot;Anchor link for: Frozen_gradient_middle&quot;&gt;Frozen gradient middle&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;75d1e6 –&amp;gt; 41acc5&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #75d1e6;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #41acc5;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Frozen_gradient_bottom&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Frozen_gradient_bottom&quot; aria-label=&quot;Anchor link for: Frozen_gradient_bottom&quot;&gt;Frozen gradient bottom&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;84ffee –&amp;gt; 49ccba&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #84ffee;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #49ccba;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Color_track_orange&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Color_track_orange&quot; aria-label=&quot;Anchor link for: Color_track_orange&quot;&gt;Color track orange&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eec315 –&amp;gt; d58c0b&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eec315;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #d58c0b;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Color_track_yellow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Color_track_yellow&quot; aria-label=&quot;Anchor link for: Color_track_yellow&quot;&gt;Color track yellow&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;dbee15 –&amp;gt; b7d10a&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #dbee15;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b7d10a;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Color_track_green&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Color_track_green&quot; aria-label=&quot;Anchor link for: Color_track_green&quot;&gt;Color track green&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;288027 –&amp;gt; 218309&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #288027;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #218309;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Shape_resource_(light_blue)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Shape_resource_(light_blue)&quot; aria-label=&quot;Anchor link for: Shape_resource_(light_blue)&quot;&gt;Shape resource (light blue)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;a2d2ff –&amp;gt; 4998e3&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #a2d2ff;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4998e3;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;3D_Position_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3D_Position_track&quot; aria-label=&quot;Anchor link for: 3D_Position_track&quot;&gt;3D Position track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ea7940 –&amp;gt; bd5e2c&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ea7940;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bd5e2c;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;3D_Rotation_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3D_Rotation_track&quot; aria-label=&quot;Anchor link for: 3D_Rotation_track&quot;&gt;3D Rotation track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ff2b88 –&amp;gt; bd165f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ff2b88;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bd165f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;3D_Scale_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3D_Scale_track&quot; aria-label=&quot;Anchor link for: 3D_Scale_track&quot;&gt;3D Scale track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eac840 –&amp;gt; bd9d1f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eac840;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #bd9d1f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Call_Method_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Call_Method_track&quot; aria-label=&quot;Anchor link for: Call_Method_track&quot;&gt;Call Method track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;3cf34e –&amp;gt; 16a827&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #3cf34e;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #16a827;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Bezier_Curve_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Bezier_Curve_track&quot; aria-label=&quot;Anchor link for: Bezier_Curve_track&quot;&gt;Bezier Curve track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2877f6 –&amp;gt; 236be6&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2877f6;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #236be6;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Audio_Playback_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Audio_Playback_track&quot; aria-label=&quot;Anchor link for: Audio_Playback_track&quot;&gt;Audio Playback track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eae440 –&amp;gt; 9f9722&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eae440;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #9f9722;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Animation_Playback_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Animation_Playback_track&quot; aria-label=&quot;Anchor link for: Animation_Playback_track&quot;&gt;Animation Playback track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;a448f0 –&amp;gt; 9853ce&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #a448f0;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #9853ce;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Blend_Shape_track&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blend_Shape_track&quot; aria-label=&quot;Anchor link for: Blend_Shape_track&quot;&gt;Blend Shape track&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;5ad5c4 –&amp;gt; 0a9c88&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #5ad5c4;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #0a9c88;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Border_part&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Border_part&quot; aria-label=&quot;Anchor link for: Border_part&quot;&gt;Border part&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;919191 –&amp;gt; 6e6e6e&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #919191;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #6e6e6e;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;New_Atlas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#New_Atlas&quot; aria-label=&quot;Anchor link for: New_Atlas&quot;&gt;New Atlas&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;c6ced4 –&amp;gt; 828f9b&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #c6ced4;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #828f9b;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;int&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#int&quot; aria-label=&quot;Anchor link for: int&quot;&gt;int&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;5abbef –&amp;gt; 4fb2e9&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #5abbef;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4fb2e9;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;float&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#float&quot; aria-label=&quot;Anchor link for: float&quot;&gt;float&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;35d4f4 –&amp;gt; 27ccf0&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #35d4f4;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #27ccf0;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;String&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#String&quot; aria-label=&quot;Anchor link for: String&quot;&gt;String&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;4593ec –&amp;gt; 4690e7&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4593ec;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #4690e7;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Vector2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Vector2&quot; aria-label=&quot;Anchor link for: Vector2&quot;&gt;Vector2&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ac73f1 –&amp;gt; ad76ee&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ac73f1;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ad76ee;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Rect2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Rect2&quot; aria-label=&quot;Anchor link for: Rect2&quot;&gt;Rect2&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f1738f –&amp;gt; ee758e&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f1738f;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ee758e;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Vector3&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Vector3&quot; aria-label=&quot;Anchor link for: Vector3&quot;&gt;Vector3&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;de66f0 –&amp;gt; dc6aed&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #de66f0;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #dc6aed;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Transform2D&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Transform2D&quot; aria-label=&quot;Anchor link for: Transform2D&quot;&gt;Transform2D&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;b9ec41 –&amp;gt; 96ce1a&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b9ec41;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #96ce1a;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Plane&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Plane&quot; aria-label=&quot;Anchor link for: Plane&quot;&gt;Plane&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f74949 –&amp;gt; f77070&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f74949;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f77070;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Quaternion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Quaternion&quot; aria-label=&quot;Anchor link for: Quaternion&quot;&gt;Quaternion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ec418e –&amp;gt; ec69a3&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ec418e;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ec69a3;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;AABB&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#AABB&quot; aria-label=&quot;Anchor link for: AABB&quot;&gt;AABB&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ee5677 –&amp;gt; ee7991&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ee5677;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #ee7991;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Basis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Basis&quot; aria-label=&quot;Anchor link for: Basis&quot;&gt;Basis&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;e1ec41 –&amp;gt; b2bb19&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #e1ec41;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #b2bb19;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Transform3D&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Transform3D&quot; aria-label=&quot;Anchor link for: Transform3D&quot;&gt;Transform3D&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;f68f45 –&amp;gt; f49047&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f68f45;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #f49047;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;NodePath&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#NodePath&quot; aria-label=&quot;Anchor link for: NodePath&quot;&gt;NodePath&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;417aec –&amp;gt; 6993ec&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #417aec;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #6993ec;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;RID&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#RID&quot; aria-label=&quot;Anchor link for: RID&quot;&gt;RID&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;41ec80 –&amp;gt; 2ce573&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #41ec80;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #2ce573;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Object&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Object&quot; aria-label=&quot;Anchor link for: Object&quot;&gt;Object&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;55f3e3 –&amp;gt; 12d5c3&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #55f3e3;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #12d5c3;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Dictionary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Dictionary&quot; aria-label=&quot;Anchor link for: Dictionary&quot;&gt;Dictionary&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;54ed9e –&amp;gt; 57e99f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #54ed9e;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #57e99f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Functions_and_expressions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Functions_and_expressions&quot; aria-label=&quot;Anchor link for: Functions_and_expressions&quot;&gt;Functions and expressions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;cf68ea –&amp;gt; c050dd&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #cf68ea;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #c050dd;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h3 id=&quot;Textures_and_cubemaps&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Textures_and_cubemaps&quot; aria-label=&quot;Anchor link for: Textures_and_cubemaps&quot;&gt;Textures and cubemaps&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;eac968 –&amp;gt; d9b64f&lt;&#x2F;p&gt;
&lt;p style=&quot;color: #eac968;&quot;&gt; Example Light &amp;#9608; &lt;&#x2F;p&gt;
&lt;p style=&quot;color: #d9b64f;&quot;&gt; Example Dark &amp;#9608; &lt;&#x2F;p&gt;
&lt;h2 id=&quot;Why_does_this_exist?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Why_does_this_exist?&quot; aria-label=&quot;Anchor link for: Why_does_this_exist?&quot;&gt;Why does this exist?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I really like to make my SVG icons for tools and such to be reactive to light&#x2F;dark theme colouration swapping. The godot engine has a massive look up table (LUT) for hex codes that it will swap when going from light to dark themes. So long as you use these colours as a palette for your icons, they will look good in both light and dark themes. This page is mainly a reference page for the various colour codes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;How_to_use_this&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_to_use_this&quot; aria-label=&quot;Anchor link for: How_to_use_this&quot;&gt;How to use this&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This reference page is mainly intended for people who want to make editor icons for Godot. However you can assign custom icons for any global class you desire. If you are creating a plugin or some kind of code-base to be distributed to third party developers, it is highly recommended that you use these palette swapping colours so the icon will have a greater chance of having a decent contrast against the background. If not please ensure that your icon has enough internal contrast to be clearly visible. Also please be sure that your icon is not completely reliant on colour for users who may be colour blind. (A main example of this is how &lt;code&gt;Node&lt;&#x2F;code&gt;, &lt;code&gt;Control&lt;&#x2F;code&gt;, &lt;code&gt;Node2D&lt;&#x2F;code&gt;, and &lt;code&gt;Node3D&lt;&#x2F;code&gt; are all the exact same shape but differentiated by colour. That’s a bad practice in general).&lt;&#x2F;p&gt;
&lt;p&gt;If you want more resources on how to author meaningful and efficiently loaded icons, please refer to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;contributing&#x2F;development&#x2F;editor&#x2F;creating_icons.html&quot;&gt;the official godot documentation on this subject&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Shell Fur Breakdown</title>
        <published>2023-11-14T00:00:00+00:00</published>
        <updated>2023-11-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Queen Of Squiggles
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://queenofsquiggles.github.io/tech/shell-fur-breakdown/"/>
        <id>https://queenofsquiggles.github.io/tech/shell-fur-breakdown/</id>
        
        <content type="html" xml:base="https://queenofsquiggles.github.io/tech/shell-fur-breakdown/">&lt;h2 id=&quot;What_happened???&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_happened???&quot; aria-label=&quot;Anchor link for: What_happened???&quot;&gt;What happened???&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Well you see a little youtuber called “Acerola” made a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;9dr-tRQzij4&quot;&gt;little video&lt;&#x2F;a&gt; and put out a challenge. As a creature fueled by an unholy combination of caffeine and raw impulse, I had to take on this “Acerola Furry Challenge” and exceed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;The_Challenge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_Challenge&quot; aria-label=&quot;Anchor link for: The_Challenge&quot;&gt;The Challenge&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Acerola’s original video did a breakdown for how shell fur works and demonstrated how to get it working in Unity. As an elite Godot game dev, I was able to port most of it over quite easily. Acerola’s challenge was to implement the fur rendering he demonstrated in the video, and then extend the functionality in at least one key way.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;XfrqyR_-jzIAAAAC&amp;#x2F;anime-goku.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;8246706&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.43103&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Goku from Dragon Ball Z power up to &lt;em&gt;super saiyin&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Well_what_is_“Shell_Fur”?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Well_what_is_“Shell_Fur”?&quot; aria-label=&quot;Anchor link for: Well_what_is_“Shell_Fur”?&quot;&gt;Well what is “Shell Fur”?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you already know Shell Fur and just wanna get to the results, you don’t need to read this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Shell Fur is named for the way it implements fur rendering. It utilizes a common method for sub-vertex geometry visualization. If you do work with 3D game development and&#x2F;or tech art, you are probably at least familiar with normal maps, and possibly parallax rendering (height maps) for materials. Both add extra visual detail without requiring extra vertices. Shell fur does a similar effect by layering multiple meshes on top of each other and selectively discarding specific pixels based on some kind of algorithm.
Essentially, if you break the UV coordinates into a smaller grid and then discard pixels at the edges of each cell, you would get a square fur, similar to what Acerola references in the game &lt;em&gt;Viva Pinata&lt;&#x2F;em&gt;. By doing a little extra math you can discard anything outside of a circle in the cell. Then going out along the layers you can shrink the size of the circle. With enough layers, this creates a visual effect that resembles strands of fur.
Something that is incredibly helpful about this method is that while it does increase the vertex count, it does so by such a small margin compared to the details provided. Because we do a lot of our calculations on the pixel level, for a game where furry objects can’t be looked at too closely, it can look quite realistic while not incurring too much of a performance hit.
Of course I love games with style and I found that it can quite easily create stylized effects as well.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;6NRM5QqZja8AAAAC&amp;#x2F;boykisser.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;16777119058470997423&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.985944&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;boykisser-gif-16777119058470997423&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;The boykisser meme character smirking&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;So_what_did_I_do?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_what_did_I_do?&quot; aria-label=&quot;Anchor link for: So_what_did_I_do?&quot;&gt;So what did I do?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First, I simply wanted to get fur working. So I made a &lt;del&gt;simple&lt;&#x2F;del&gt; system that would make duplicates of the mesh and extrude every single vertex slightly out based on the provided “strand length” and “shell count”. Through that we could make the layers, or shells, very easily. Additionally, it felt appropriate to be placing fur on a character rather than on a cube or sphere. So I searched “furry” into sketchfab and found a League of Legends character called “Kindred”. So I used this mesh and it actually didn’t work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;How_do_extrusions_work?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_do_extrusions_work?&quot; aria-label=&quot;Anchor link for: How_do_extrusions_work?&quot;&gt;How do extrusions work?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I used a nifty tool in Godot called &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt;, which has some lovely documentation. Basically it can load a surface from one mesh, perform manipulations on the data, and then push that new mesh to a mesh object (which could be the original mesh but it wasn’t in this case). So what I did is I loaded each surface and iterated throught the vertices. The &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt; provides a lookup to get all face indices touching a given vertex index. Then I got the normals of each connected face and averaged them out. I normalized the average normal and then multiplied it by the shell layer depth. The original vertex is then offset by that value and we move to the next one.&lt;&#x2F;p&gt;
&lt;p&gt;I’m actually really interested to see what kinds of fun procedural mesh generation I can do with the &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt; in the future. I believe I could push new vertex data to it should I have something interesting for it. Maybe I could even make a voxel renderer with greedy tiling?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;It’s_rigged&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#It’s_rigged&quot; aria-label=&quot;Anchor link for: It’s_rigged&quot;&gt;It’s rigged&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So the character model was rigged for an animation, which I thought would be cool to try to make the fur work properly with it. However something about how rigged meshes work means that the original mesh would be properly deformed by the skeleton and the fur meshes would not. It actually resulted in the fur shell meshes doing a T-pose while laying on the ground behind the properly rendering character. Which was quite frustrating. I am not terribly familiar with how skeleton rigs and mesh deforms actually work in terms of the mesh data, so I decided to just strip the rig and make it a static mesh.&lt;&#x2F;p&gt;
&lt;p&gt;With the stripped mesh, everything was working wonderfully.&lt;&#x2F;p&gt;
&lt;p&gt;Next I took on working on different systems that could make the fur look nicer.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;EcSoC2eQGZMAAAAC&amp;#x2F;wow-t-posing.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;17657676&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.31687&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;wow-t-posing-spin-vocaloid-hatsune-miku-gif-17657676&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;A Hatsune Miku model in a t-pose rotating&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;Shader_improvements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Shader_improvements&quot; aria-label=&quot;Anchor link for: Shader_improvements&quot;&gt;Shader improvements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I wanted to make the fur look nicer, and one way to do that was to use some fun shader stuff. In Godot 4 we have &lt;code&gt;instance uniform&lt;&#x2F;code&gt; variables in shaders which are uniform values that can be assigned on a per-&lt;code&gt;MeshInstance3D&lt;&#x2F;code&gt; basis. So I was able to give each shell layer information on what percentage of the depth it was at and also assigning strand colours. Realistically, the strand colours didn’t need to be on a per-instance basis, but I did it so…yeah.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Simulation_improvements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Simulation_improvements&quot; aria-label=&quot;Anchor link for: Simulation_improvements&quot;&gt;Simulation improvements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So you may have noticed that the fur doesn’t really do anything and just sticks straight out. So what I wanted to do was add a basic physics simulation, especially a better one than Acerola made in the video (sorry not surry, bud). I used some basic physics lerping and damped the physics affect factor based on a curve resource.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot; aria-label=&quot;Anchor link for: Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot;&gt;Godot Resources Are Magical And You Better Use Them Or Else&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;VAn-KzIfuvIAAAAC&amp;#x2F;happy-cry.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;17477970&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.39738&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;happy-cry-tears-of-joy-pokemon-team-tocket-gif-17477970&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;James from Pokemon crying happy tears&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Something that was really awesome for me when I first moved to Godot from Unity way back in 2020 (yeah I switched before it was cool) was the sheer quantity of useful resources available to be as a developer. And the ability to just export that and use it to manipulate stuff was incredible. They’ve only gotten better over time. Though &lt;code&gt;Curve&lt;&#x2F;code&gt; is definitely a classic. It’s simply a curve that supports different handle types and can have multiple vertices as well. I generally used it for making a basic smoothstep function, but the curve resource is fully customizable to change the thickness of strands along their length.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to use &lt;code&gt;Curve&lt;&#x2F;code&gt;s not only for visual thickness but also for the simulated “stiffness” of the strands along the length. What that means is that you can choose which parts of the strand are stiff and which aren’t.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Working_in_realtime&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Working_in_realtime&quot; aria-label=&quot;Anchor link for: Working_in_realtime&quot;&gt;Working in realtime&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So all of this is &lt;strong&gt;technically&lt;&#x2F;strong&gt; working in real-time. One trouble is that the fur shells don’t exist until the game starts and a behemoth of mesh generation is done (at startup!!!)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;And_then…?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#And_then…?&quot; aria-label=&quot;Anchor link for: And_then…?&quot;&gt;And then…?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What comes next may surprise you… I made a plugin. Of course I made a plugin. I’m an addict for plugins. Tooling is love and tooling is life.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_Shell_Fur_Plugin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_Shell_Fur_Plugin&quot; aria-label=&quot;Anchor link for: A_Shell_Fur_Plugin&quot;&gt;A Shell Fur Plugin&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently I got to see the lovely GodotCon talk by Miguel (bitbrain) talking about tooling in Godot. It was a great talk and if you love Godot you should really check it out. One of the key things I learned from the talk (at least that is relevant here) is the difference between “addon” and “plugin” in godot. “addon” is literally just something third party. Plugins are specifically code that is registered with the engine and requires the &lt;code&gt;plugin.cfg&lt;&#x2F;code&gt; file for godot to handle it. Basically, all plugins are addons, but not all addons are plugins.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So I got to work on a proper plugin for this shell fur. I had a few hopes, but I wasn’t sure what would all work in-editor so I had to play around with.&lt;&#x2F;p&gt;
&lt;p&gt;A key difference in my approach was in my programming language. For my original development, I chose to use C# since it’s one of my favourite languages to use with Godot. However, for this plugin, I wanted to make it compatible with more projects (and most people don’t use C# to my knowledge. Yes you may gasp now.) So this was ported to GDScript. Since, to my knowledge, there is no transpiler from C# to GDscript, I did basically rewrite everything but in a different language. On the bright side, I got to play with some of the new GDScript features introduced to recent versions of Godot such as &lt;code&gt;static var&lt;&#x2F;code&gt; and typed arrays.&lt;&#x2F;p&gt;
&lt;p&gt;Once I had the basics up and running for the shell fur I wanted to make some spicy stuff (No, no, not that! Where’s the damn spray bottle?). I wanted to see how much of the fur I could get running in the editor. That means mesh generation, real-time editing of fur properties, and physics. It turned out surprisingly well, excepting a few key areas.
Basically, the mesh generation takes a ton of processing time (1.5 seconds in some instances). Which causes a huge stutter if I do it synchronously. But if I try to use a coroutine or a thread, I have to make sure I’m managing data access (async code is hell). I spent days just trying to get different asynchronous bits of code working. In the end I never actually got it to work. I opted to just have buttons at the top (inserted by a custom &lt;code&gt;InspectorPlugin&lt;&#x2F;code&gt;, which are surprisingly easy to set up!). The buttons would either trigger mesh regeneration, or purge the shell meshes. I did have to learn a bit more about editor instanced nodes. For example, if they don’t have an owner, they don’t save. If you don’t have an &lt;code&gt;EditorInterface&lt;&#x2F;code&gt; reference, you can’t tell the editor that it needs to be saved. Oh and that group you’re using to separate out your instanced meshes out from the other meshes in the scene that really need to not be messed with? Yeah you gotta add the group slightly differently to ensure it stays when saving, else it gets purged upon reload.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Lewd Joke Incoming) Plugin development is a either like sex or school team projects: either way I’m getting fucked, all that changes is if I’m having a good time or not.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I had to do a lot of work trying to make the asynchronous code work and ended up failing after trying for almost an entire week. And it’s probably worth mentioning that I’m currently (as of writing) unemployed. I was putting 9-10 hours a day for like 5 days into this and couldn’t make it work. I want to believe there is a fundamental gap in my knowledge that is causing this problem, but I was unable to figure it out with all that time so if you know how to make it work submit a PR or something? It’s open source.&lt;&#x2F;p&gt;
&lt;p&gt;That rant out of the way, what I did manage to get working was basically everything else on my checklist. Additionally, I added the option to provide a texture to the fur, which would let you do more intersting stylings for the fur. And this is where the strand colours being a per-instance and not a per-material uniform gets really fun. (And it was totally on purpose and definitely not a happy accident). The instance colours are multiplied on the texture colour, which lets you have colour variations across instances of the same fur material, for example if you wanted to have a slight variation across several furry creatures. (Frankly if you wanted to make a wetness system you could modify the colour and stiffness. However currently the roughness and metalness are on a per-material basis so a shader rewrite may be needed to make that totally work as desired.) Hey speaking of shader rewrites, I made an option so the fur tool will allow you to load a custom material instead of the default material. So while the default material is pretty robust, if you want a different style you can totally do that. You could even go so far as to have a custom shader so long as the uniforms match the expected names and types.&lt;&#x2F;p&gt;
&lt;p&gt;Also if you are super cool and awesome, there might be a few “easter eggs” in the plugin to find. Mainly because I can’t help myself when I’m banging my head into the wall for days. I needed something fun, so now you get to deal with it. XOXO&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;8mUbihM7AJAAAAAC&amp;#x2F;toradora-palm-top-tiger.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;22688840&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.95122&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;toradora-palm-top-tiger-taiga-aisaka-anime-gif-22688840&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Toradora laughing with the caption ‘menace to society’&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Future_Plans&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Future_Plans&quot; aria-label=&quot;Anchor link for: Future_Plans&quot;&gt;Future Plans&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’m not entirely certain if I have any plans for this addon. I did get an issue requesting support for older Godot version, since &lt;code&gt;static var&lt;&#x2F;code&gt; isn’t actually supported in Godot 4.0. So I rewrote some sections that would allow compatibilty for all currently available 4.X versions. If at some point people want to use it with 4.3 and there’s some breaking change, I could look into upgrading it, but with projects like this I generally do a “lazy maintenance” approach. That is, because I am not personally using this tool in my own projects, I don’t have any real needs for it. I could theoretically develop it forever. So instead I let it sit and if someone submits an issue I’ll look into fixing it, or mark the plugin as archived&#x2F;unmaintained. Really I probably have several repositories that I need to do that for, so if I ever have a boring afternoon I might have to spruce up my GitHub repos.&lt;&#x2F;p&gt;
&lt;p&gt;As this plugin is MIT licensed and fully open source, anyone is free to fork it and make it their own, or even better they can do a pull request for adding new features to the plugin. But that is only really meaningful if there are a decent number of people using the plugin, and as far as I am aware the total number is zero. That could definitely just be my limited ability to see who uses my tools. I really can only see when people star the repo on GitHub. Downloads from there and from the Godot Asset Library are completely opaque and provide no insights as to whether anyone is using my tools. Which can feel disheartening at times since I can’t ever be sure if all of this work is for nothing.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;HtRb68DqNPwAAAAC&amp;#x2F;little-witch-academia-sucy.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;25463727&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.09622&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;little-witch-academia-sucy-shrug-gif-25463727&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Sucy from Little Witch Academia shrugging&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Please_I_beg_of_you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Please_I_beg_of_you&quot; aria-label=&quot;Anchor link for: Please_I_beg_of_you&quot;&gt;Please I beg of you&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;4q5OwnFZJdEAAAAC&amp;#x2F;adorable-pleading.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;22150014&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.8625&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;adorable-pleading-eyes-anime-crying-gif-22150014&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;A young anime girl with a pleading look on her face (I don’t know the character or anime lol)&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If you use a plugin, even once, go tell the creator(s) that you used it. Tell them how you feel about it, especially if you really enjoyed it (And maybe keep things kind and constructive if you had a negative experience). It really means a lot. Frankly, everyone who creates things for others wants to know that people are enojying it. Can you imagine what it would be like if you published a game and the platform you published on didn’t have comments, views, downloads, or anything for analytics??&lt;&#x2F;p&gt;
&lt;p&gt;While I’m on this topic, it really stretches well beyond the confines of game development! I don’t talk about it much, but I recently self published a book. I spent maybe a year or two on it and to this day I have barely any insights into what people think besides my family members that tell me. Everyone who creates for others, deserves to hear that their creations sparked joy, even if it was just for a moment. Even if it was something dumb.&lt;&#x2F;p&gt;
&lt;p&gt;Also the reason I don’t talk about the book much is that it had some pretty personal stuff in it that if I linked in my socials would basically doxx me. My next novel is gonna have absolutely nothing unsafe and it’s gonna be published under a different pen name so I’ll be totally safe to hype it up for my online friends.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Showcase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Showcase&quot; aria-label=&quot;Anchor link for: Showcase&quot;&gt;Showcase&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;fuzzy.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;fuzzy.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;fuzzy.gif&quot; alt=&quot;Showing off how the fur reacts to motion (in a simulation of physics)&quot; title=&quot;Showing off how the fur reacts to motion (in a simulation of physics)&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                Showing off how the fur reacts to motion (in a simulation of physics)
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_pbr.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_pbr.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_pbr.png&quot; alt=&quot;The fur can handle PBR materials as well. Here it&amp;#x27;s a reflective gold, smoothed because it&amp;#x27;s using the base normals of the mesh instead of individual strands&quot; title=&quot;The fur can handle PBR materials as well. Here it&amp;#x27;s a reflective gold, smoothed because it&amp;#x27;s using the base normals of the mesh instead of individual strands&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                The fur can handle PBR materials as well. Here it’s a reflective gold, smoothed because it’s using the base normals of the mesh instead of individual strands
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_physics.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_physics.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_physics.gif&quot; alt=&quot;A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects&quot; title=&quot;A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_texture.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_texture.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_texture.gif&quot; alt=&quot;It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print&quot; title=&quot;It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Godot Lighting Exploration</title>
        <published>2023-10-05T00:00:00+00:00</published>
        <updated>2023-10-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Queen Of Squiggles
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://queenofsquiggles.github.io/tech/godot-lighting-exploration/"/>
        <id>https://queenofsquiggles.github.io/tech/godot-lighting-exploration/</id>
        
        <content type="html" xml:base="https://queenofsquiggles.github.io/tech/godot-lighting-exploration/">&lt;h2 id=&quot;The_goal&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_goal&quot; aria-label=&quot;Anchor link for: The_goal&quot;&gt;The goal&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I recently competed in Ludum Dare 54 (theme “Limited Space”). One of the problems players have mentioned is the poor performance. Mainly this is due to heavy leaning on &lt;code&gt;VoxelGI&lt;&#x2F;code&gt; and &lt;code&gt;SDFGI&lt;&#x2F;code&gt; which are Godot’s premier techniques for rendering realtime global illumination. What I wanted out of this is to explore what is possible with Godot, and what options are available if I want to lean towards supporting end users on lower end hardware.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at the techniques we have available to us!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;SDFGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#SDFGI&quot; aria-label=&quot;Anchor link for: SDFGI&quot;&gt;SDFGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;SDFGI is a light model managed not by a particular node but as a part of the &lt;code&gt;WorldEnvironment&lt;&#x2F;code&gt;. The technical details of it go way over my head, but basically it uses the geometry of the scene to approximate(?) the global illumination while making heavy use of Signed Distance Fields&lt;&#x2F;p&gt;
&lt;h2 id=&quot;VoxelGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#VoxelGI&quot; aria-label=&quot;Anchor link for: VoxelGI&quot;&gt;VoxelGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;VoxelGI is a semi-realtime model that makes use some some baked data as well as real time calculations. This does limit how fully an environment is able to be lit realistically. However it makes up for that by being quite easy to set up and immediately adds details to the game. The main downside is runtime performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;LightmapGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#LightmapGI&quot; aria-label=&quot;Anchor link for: LightmapGI&quot;&gt;LightmapGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Lightmap Global Illumination uses exclusively pre-baked data. Meaning that while requiring a large file that caches the lighting data, the runtime performance cost is extremely low. (But not zero because nothing is ever easy!)&lt;&#x2F;p&gt;
&lt;p&gt;Because the lighting model is baked ahead of time, you can have highly realistic simulated light for a given space. And on top of that, the node automatically places lighting probes based on your settings. Though there is a lightmap probe node if you want to set some specific probe locations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ReflectionProbe&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ReflectionProbe&quot; aria-label=&quot;Anchor link for: ReflectionProbe&quot;&gt;ReflectionProbe&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Reflection Probe might not be something you think of for lighting model. While extremely useful for creating &lt;em&gt;reflections&lt;&#x2F;em&gt;, it also provides some indirect lighting through the reflection contribution. Because of this, it can provide some added light while also making reflections appear more realistic.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are two modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update Once&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More performant&lt;&#x2F;li&gt;
&lt;li&gt;Does not detect changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Update Always&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Slower&lt;&#x2F;li&gt;
&lt;li&gt;Reacts to changes in the scene&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So when it comes to reflection probes, you may want to evaluate which mode is most effective for your scene in particular. Because I made a purely static scene for this experiment, I used “Update Once”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;The_experiment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_experiment&quot; aria-label=&quot;Anchor link for: The_experiment&quot;&gt;The experiment&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This experiment was to create a somewhat interesting scene. I recently saw the new Dune movie and liked the “mars” themes of this asset pack by Kay Lousberg. So I decided to make a desert planet themed scene.&lt;&#x2F;p&gt;
&lt;p&gt;The main reason I opted to use this asset pack (besides looking really cool) is that LightmapGI requires UV2 data from meshes. And Godot can only generate those for &lt;code&gt;MeshInstance3D&lt;&#x2F;code&gt; nodes that are using an &lt;code&gt;ArrayMesh&lt;&#x2F;code&gt; resource. At least as far as I could tell. With the GLTF models Kay produced, I was able to import them with static light baking enabled (which is &lt;strong&gt;not&lt;&#x2F;strong&gt; on by default)&lt;&#x2F;p&gt;
&lt;p&gt;The experiment was to see if individual light model nodes could all contribute to the same scene, and if disabling individual nodes would affect the illumination contributions negatively.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Designing_a_level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Designing_a_level&quot; aria-label=&quot;Anchor link for: Designing_a_level&quot;&gt;Designing a level&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With the assets I started to make a little story about a landing zone, some bases set up and trucks moving cargo around. The actual details of it were not super important, the goal was to show off the lighting anyway. But making little stories is one of my joys.&lt;&#x2F;p&gt;
&lt;p&gt;Something I discovered is all of the assets use a single material and texture, and it’s their UV coordinates that affect the colour of the mesh. Which is incredibly efficient for space when making a game. However it did not allow me to override individual “materials” of different models. For example I wanted to make the trucks have reflective windshields and more metallic hulls. Instead I opted to duplicate one of the rock meshes and replace the entire material with a slightly rough metallic material. Just to make sure the reflection probes were working as expected.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Initial_bugs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Initial_bugs&quot; aria-label=&quot;Anchor link for: Initial_bugs&quot;&gt;Initial bugs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As it would turn out, moving nodes arround, which I did to make the project easier to parse for people hoping to learn from it, actually breaks &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; nodes. As it would turn out, &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; nodes only search for meshes among their siblings and children (recursively). So if there are components of a specific branch of the scene tree that are inaccessible, the &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; will be unable to discover them!&lt;&#x2F;p&gt;
&lt;p&gt;While frustrating at first, this is actually &lt;em&gt;incredibly&lt;&#x2F;em&gt; useful! What this means is that you can have individual “segments” of your level with different light maps baked. So you could have a segment that the player will see all the time, and a segment that is only seen in cutscenes and even putting those in the same scene file, you can separate the lightmap baking and even use different settings!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Results&quot; aria-label=&quot;Anchor link for: Results&quot;&gt;Results&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It appears that layering static and dynamic light model nodes works rather well! There are some artifacts produced when the settings are changed, but it would appear that overall the quality is extremently high!&lt;&#x2F;p&gt;
&lt;p&gt;If you want to try out the application for yourself, it’s free on my itch. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;queenofsquiggles.itch.io&#x2F;squiggles-godot-lighting-demo&quot;&gt;Download here!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>

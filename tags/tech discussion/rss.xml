<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Queen Of Squiggles&#x27;s Blog - tech discussion</title>
      <link>https://queenofsquiggles.github.io/</link>
      <description>The personal blog for all of the Queen&#x27;s news, ramblings, portfolio stuffs, and more!</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://queenofsquiggles.github.io/tags/tech discussion/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Fri, 18 Oct 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Embedding GIFs</title>
          <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/guides/embedding-gifs/</link>
          <guid>https://queenofsquiggles.github.io/guides/embedding-gifs/</guid>
          <description xml:base="https://queenofsquiggles.github.io/guides/embedding-gifs/">&lt;h2 id=&quot;Hey_look!_A_new_post&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Hey_look!_A_new_post&quot; aria-label=&quot;Anchor link for: Hey_look!_A_new_post&quot;&gt;Hey look! A new post&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Yeah I’m moving the discussion about how I embed tenor GIFs out of the &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;guides&#x2F;fsm-vs-bt&#x2F;&quot;&gt;FSMs versus Behaviour Trees&lt;&#x2F;a&gt; page to make that page more readable and make a coherent page for different approaches to embedding gifs easily. As of writing, I’m adding a third recipe here so hopefully this is appreciated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;GIF_Embedding&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#GIF_Embedding&quot; aria-label=&quot;Anchor link for: GIF_Embedding&quot;&gt;GIF Embedding&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;In_Jekyll&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#In_Jekyll&quot; aria-label=&quot;Anchor link for: In_Jekyll&quot;&gt;In Jekyll&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;_includes&#x2F;tenor.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;margin: auto; width: {{ include.width }}; border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3px &lt;&#x2F;span&gt;&lt;span&gt;solid black; padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenor-gif-embed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_postid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ include.data_postid }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-share-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_aspect_ratio&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ include.data_aspect_ratio }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ include.url }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {% if include.caption %}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ include.caption }} &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in any article (or page) I can just use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;{% include tenor.html data_postid=&amp;quot;THE-POST-ID&amp;quot; data_aspect_ratio=&amp;quot;ASPECT&amp;quot; width=&amp;quot;DESIRED-WIDTH&amp;quot; url=&amp;#39;EMBED-URL&amp;#39; caption=&amp;quot;OPTIONAL-CAPTION&amp;quot; %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the three values are stripped from the embed code for the gif: &lt;code&gt;data_postid&lt;&#x2F;code&gt;, &lt;code&gt;data_aspect_ratio&lt;&#x2F;code&gt;, and &lt;code&gt;url&lt;&#x2F;code&gt;. Those ensure the image is actually loaded. Then &lt;code&gt;width&lt;&#x2F;code&gt; controls how wide on the screen they are. I prefer &lt;code&gt;50%&lt;&#x2F;code&gt; for my gifs in this article. The the &lt;code&gt;caption&lt;&#x2F;code&gt; is an optional tag that will add some text below the gif.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;In_Hugo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#In_Hugo&quot; aria-label=&quot;Anchor link for: In_Hugo&quot;&gt;In Hugo&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For Hugo you need to use shortcodes. Which are not terribly different from Jekyll’s includes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;layouts&#x2F;shortcodes&#x2F;tenor.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;margin: auto; width: {{ .Get &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}; border: 3px solid black; padding: 10px;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenor-gif-embed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_postid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_postid&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-share-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_aspect_ratio&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data_aspect_ratio&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ if .Get &amp;quot;fallback&amp;quot; }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;fallback&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ else }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;No fallback provided!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ end }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;GIF embed failed. &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ .Get &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Click to view source.&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ if .Get &amp;quot;caption&amp;quot; }}
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Caption: &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {{ .Get &amp;quot;caption&amp;quot; }} &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{ end }}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And loading the shortcode can be done in different ways (line breaks are ignored with Hugo’s shortcodes). Note that a space between &lt;code&gt;{{&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;&lt;&#x2F;code&gt; is only present because it would otherwise be rendered as normal in this page.&lt;&#x2F;p&gt;
&lt;p&gt;Easier to read:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;{{ &amp;lt; tenor 
&lt;&#x2F;span&gt;&lt;span&gt; data_postid=&amp;quot;8246706&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; data_aspect_ratio=&amp;quot;1.43103&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; width=&amp;quot;50%&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; url=&amp;#39;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt; caption=&amp;quot;Goku from Dragon Ball Z power up to &amp;#39;super saiyin&amp;#39;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt; fallback=&amp;quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Shorter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;{{ &amp;lt; tenor data_postid=&amp;quot;8246706&amp;quot; data_aspect_ratio=&amp;quot;1.43103&amp;quot; width=&amp;quot;50%&amp;quot; url=&amp;#39;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&amp;#39; caption=&amp;quot;Goku from Dragon Ball Z power up to &amp;#39;super saiyin&amp;#39;&amp;quot; fallback=&amp;quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&amp;quot; &amp;gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;In_Zola&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#In_Zola&quot; aria-label=&quot;Anchor link for: In_Zola&quot;&gt;In Zola&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Yet another update to this. Zola has a templating system much more similar to Jekyll than hugo. One step forwards; two steps back 😅&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;templates&#x2F;shortcodes&#x2F;tenor.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;display: flex; flex-direction: column; justify-items: center; align-items: center; &amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{% if background %} bg-{{background}} {% else %} bg-secondary {% endif %} rounded&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50%&lt;&#x2F;span&gt;&lt;span&gt;; padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.5rem&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tenor-gif-embed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-postid&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data_postid }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-share-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-aspect-ratio&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ data_aspect_ratio }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-width&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ fallback }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{{ url }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;GIF embed fallback in use. &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noscript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{% if background %} btn-{{background}} {% else %} btn-secondary {% endif %} rounded-bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.5rem&lt;&#x2F;span&gt;&lt;span&gt;; max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45%&lt;&#x2F;span&gt;&lt;span&gt;;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Caption: &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;{{ caption }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>Indie Game Design Using Obsidian</title>
          <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/guides/game-design-using-obsidian/</link>
          <guid>https://queenofsquiggles.github.io/guides/game-design-using-obsidian/</guid>
          <description xml:base="https://queenofsquiggles.github.io/guides/game-design-using-obsidian/">&lt;blockquote&gt;
&lt;p&gt;This guide is primarily aimed at game developers who may not have explored options for project organization and management. If that’s not you, enjoy learning about my personal workflow&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;Obsidian,_a_note-taking_app_with_(mostly)_good_features&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Obsidian,_a_note-taking_app_with_(mostly)_good_features&quot; aria-label=&quot;Anchor link for: Obsidian,_a_note-taking_app_with_(mostly)_good_features&quot;&gt;Obsidian, a note-taking app with (mostly) good features&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As much as I do love FOSS (Free and Open Source Software), &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;&quot;&gt;Obsidian&lt;&#x2F;a&gt; is my favourite app to use for notes and organizing my ideas. I’ve used it for everything from project management, sequence planning, personal to-do lists, notes for a story I’m writing, and even school notes!&lt;&#x2F;p&gt;
&lt;p&gt;One of the most valuable uses I’ve found is organizing my thoughts for game design!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Scaffolding_Ideas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Scaffolding_Ideas&quot; aria-label=&quot;Anchor link for: Scaffolding_Ideas&quot;&gt;Scaffolding Ideas&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Obsidian uses a superset of Markdown, which is a pretty nifty language for formatting text. (I’m even using it for formatting this blog!)&lt;&#x2F;p&gt;
&lt;p&gt;Because of this, the text is pretty quick to format without needing to leave your keyboard.&lt;&#x2F;p&gt;
img::render(src, alt)&lt;h3 id=&quot;Callouts_in_Obsidian&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Callouts_in_Obsidian&quot; aria-label=&quot;Anchor link for: Callouts_in_Obsidian&quot;&gt;Callouts in Obsidian&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can see in the picture above that I’m using a “callout” to mark some useful resources for developing &lt;em&gt;Contact Range&lt;&#x2F;em&gt;. I didn’t end up using all of them to be fair. But the callouts can be super helpful for specific ideas and there’s a few different kinds of them with associated colours and names.&lt;&#x2F;p&gt;
&lt;p&gt;This is the syntax I used above. Note that it acts as an extension of the ‘quote’ formatting that uses &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; prefix to each line. The heading is specified by square brackets (&lt;code&gt;[]&lt;&#x2F;code&gt;), and an exclamation point (&lt;code&gt;!&lt;&#x2F;code&gt;) prefixed key-word.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Markdown &quot;&gt;&lt;code class=&quot;language-Markdown&quot; data-lang=&quot;Markdown&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt;[!hint]+ Useful Resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt; ... text ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also if you note that the square brackets are ended by &lt;code&gt;+&lt;&#x2F;code&gt;, that’s a collapse notation. It tells Obsidian that we want to be able to collapse the callout down to the header, but by default we want it to display as full. For defaulting to collapsed, you would rather use &lt;code&gt;-&lt;&#x2F;code&gt;. Following that is the title of the callout. If you omit it, the keyword default title will be used as a heading. For example &lt;code&gt;!help&lt;&#x2F;code&gt; would become “Help”&lt;&#x2F;p&gt;
&lt;p&gt;My most used key-words are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hint&lt;&#x2F;li&gt;
&lt;li&gt;help&lt;&#x2F;li&gt;
&lt;li&gt;info&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is usually because my notes focus on expressing information. And so the callouts are extra information that would be used.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Headings&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Headings&quot; aria-label=&quot;Anchor link for: Headings&quot;&gt;Headings&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Headings in any text document are incredibly useful. In obsidian, they are automatically built into a table of contents on the right pane.&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;p&gt;This pane is collapseable for when you really want to focus, but is super helpful for larger documents.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Super-charged_Links&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Super-charged_Links&quot; aria-label=&quot;Anchor link for: Super-charged_Links&quot;&gt;Super-charged Links&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Remember what I said about Obsidian using a &lt;em&gt;superset&lt;&#x2F;em&gt; of Markdown. Here’s where that matters. So links work just like regular markdown, even for images. To review, the format is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Markdown &quot;&gt;&lt;code class=&quot;language-Markdown&quot; data-lang=&quot;Markdown&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;[Link Text](https:&#x2F;&#x2F;www.your-link.net)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![Image Alt-Text](&#x2F;path&#x2F;to&#x2F;your&#x2F;image.jpg)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Obsidian introduces a new type of link called a “Note Link”. It allows you to reference other note pages you have written which helps to connect different elements that each have their own concise pages. I use this more for writing stories, so each character, faction, location, etc… will get their own page with links connecting everything where relevant.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Markdown &quot;&gt;&lt;code class=&quot;language-Markdown&quot; data-lang=&quot;Markdown&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[Full Name Of The Note You Want To Link]]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Important to note:&lt;&#x2F;strong&gt; the page name will provide auto-complete suggestions, but it is most helpful when your pages uses unique names across the “vault” (obsidian’s currently scoped directory).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Let’s_Make_a_Game&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Let’s_Make_a_Game&quot; aria-label=&quot;Anchor link for: Let’s_Make_a_Game&quot;&gt;Let’s Make a Game&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that you’re equipped with a basic understanding of how to write effective notes in Obsidian, let’s look at how that relates to game development and design.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Putting_Down_Ideas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Putting_Down_Ideas&quot; aria-label=&quot;Anchor link for: Putting_Down_Ideas&quot;&gt;Putting Down Ideas&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You will probably want to start with a document where you just “brain dump” on the page. Text notes are good. All you are doing at this phase is getting ideas on ‘paper’, or page perhaps. Once it’s all written down you can start to review what you wrote and see if any ideas coalesce. If you are working as part of a team, sharing the document and reviewing it together could be better. But most of my experience is solo dev, so &lt;em&gt;it’s just me babyyyy&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;After getting the ideas organized and cleaned up, you can start working on the next few phases.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Organizing_Sequences&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Organizing_Sequences&quot; aria-label=&quot;Anchor link for: Organizing_Sequences&quot;&gt;Organizing Sequences&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So you’ve got a game idea now and you want the player to do X, Y, Z, using items Alpha, Beta, Gamma, and talking to NPCs 1, 2, and 3. How do we organize that!?!?&lt;&#x2F;p&gt;
&lt;p&gt;My solution is to use a “core plugin” called “canvas”.&lt;&#x2F;p&gt;
&lt;p&gt;To setup canvas you need to open the settings menu with the cog icon in the bottom left corner. Then go to “Core Plugins” and enable “Canvas”. Optionally, you can fiddle with the options for Canvas using the cog button on the same line, or in the left pane under the “Core Plugins” header. My preferred change is to set “Default location for new canvas files” to “Same folder as current file”. By default they drop to the vault’s root directory.&lt;&#x2F;p&gt;
&lt;p&gt;A canvas is a generic node graphing tool that you can use to make &lt;em&gt;beautiful spaghetti&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;p&gt;You might want to open that image in a separate tab if you want to be able to read the text. Otherwise, just trust that I’m being truthful.&lt;&#x2F;p&gt;
&lt;p&gt;There are three main types of nodes allowed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Generic Text&lt;&#x2F;li&gt;
&lt;li&gt;Note&lt;&#x2F;li&gt;
&lt;li&gt;Picture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Generic text is just a block that you can put text into and style it how you like. If you look closely I used headers in some nodes to mark the “quest lines”. Note Nodes allow you to link an existing notes into the canvas as a resizable node. You can even scroll through the entire document from the canvas if you like. Finally Image Nodes are as expected, an embedded image. Combined with the ability to create connections between nodes, assign directional arrows, colours for node blocks and connections, and a theoretically infinite canvas, organizing structures of information is definitely possible.&lt;&#x2F;p&gt;
&lt;p&gt;For my purposes I made every room, item, and ‘quest action’ into a node. Then I connected them to help me map the players progress through the ship. I wanted to ensure they spent time in all of the rooms since the aliens were going to spread throughout the ship and attack the player in any of the rooms.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are reading through the canvas above and have played Contact Range, you might have noticed that not everything from the canvas was implemented. Sorry about that! That’s what happens during game jams, ruthless feature cutting&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;Managing_the_Project&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Managing_the_Project&quot; aria-label=&quot;Anchor link for: Managing_the_Project&quot;&gt;Managing the Project&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have experience with DevOps you’re probably good to skip this. Unless you wanna help me find any mistakes I made &amp;lt;3&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So with your ideas put together and some rough (or maybe not so rough) sequencing figured out, now you need to break it down into manageable and–most importantly–actionable tasks. This is where “Project Management” (PM) rears its ugly head. Most of PM work is not exceptionally difficult in theory, but almost always is difficult in practice. There are so many different methods for organizing tasks into small chunks that can be assigned to individual team members. My favourite is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kanban&quot;&gt;Kanban Board&lt;&#x2F;a&gt;. It’s a fairly simple process. You organize tasks into “cards” that describe the task and maybe some additional meta-data like who’s assigned to it and&#x2F;or what category of task it is (art, code, sfx, etc…). For me, I usually skip the assignment step since it’s usually all me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;game-design-using-obsidian&#x2F;personal-todo-kanban.jpg&quot; alt=&quot;A Kanban Board of my personal life tasks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example of a kanban board. Specifically one I use to organize my personal life tasks. Once something makes it to the “Done” channel I like to archive it so it doesn’t clutter up the view. If you are perceptive, you probably noticed that I’m still using Obsidian. There is a “Community Plugin” (not maintained by the Obsidian Devs) called “Kanban” by “mgmeyers” that I use almost religiously. It adds a type of note that is a Kanban board which allows you to specify which lanes you want. There is also tools for things like due dates, tagging, and styles. You can even make styles react to the tags or date proximity on the card. For example, when I used this for school I made green, orange, and red colour styles based on how urgently the task needed to be done (based on 7+ days out, 3+ days out, or less than 3 days away, respectively)&lt;&#x2F;p&gt;
&lt;p&gt;You can even add styling specific to a single Kanban board or have those settings globally. Which is super powerful.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Endless_Cards&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Endless_Cards&quot; aria-label=&quot;Anchor link for: Endless_Cards&quot;&gt;Endless Cards&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;A simple approach is to make a card for each “thing” you need to do. So for each asset to make, it gets a card. For every system that needs code, that’s a card. For every QA work done at a step in the process, that’s another card! And when the moon hits your eye like a big pizza pie, that’s &lt;del&gt;another card&lt;&#x2F;del&gt; &lt;em&gt;amore!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There’s a ton of solutions for figuring out how to organize your cards. In my experience the solution that’s best is &lt;em&gt;the one that works for you and your needs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One such solution that I use for projects larger than a game jam are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scrumandkanban.co.uk&#x2F;theme-epic-story-task&#x2F;&quot;&gt;“Epic Cards”&lt;&#x2F;a&gt;. It’s a way to create a hierarchy of tasks and categorize them into a particular order. I’ve seen many people use Epics almost like versioning. So once that “Epic” is complete that’s 0.1 more version points. (For clarity, I mean a project at version 1.2 would go to 1.3 after the 1.3.X epic is compeleted. And subversions, 1.2.X, would increment as stable changes are made.)&lt;&#x2F;p&gt;
&lt;p&gt;Of course that’s not the only way to organize your tasks. I highly recommend looking into modern technique of project management if you are more interested in this. Without being more familiar with what industry standards look like, I’m hesitant to make a particular recommendation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Building_to_Completion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Building_to_Completion&quot; aria-label=&quot;Anchor link for: Building_to_Completion&quot;&gt;Building to Completion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Now you’ve got your idea, the sequences, and your tasks all organized. That was the easy part. Your next steps are to make it all happen. This is where you “get your hands dirty” and work on the code&#x2F;art&#x2F;model&#x2F;shader&#x2F;SFX&#x2F;music&#x2F;VFX&#x2F;API&#x2F;etc… necessary for your project!&lt;&#x2F;p&gt;
&lt;p&gt;From here I can’t quite help you. Or rather, I can’t in this article. Obsidian is an excellent tool for organizing all of the game design components. But once you transition to the development, Obsidian is mostly useful as a refernce. Best of luck. I hope you have an enjoyable project! Or at least an &lt;em&gt;interesting&lt;&#x2F;em&gt; one!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Shell Fur Breakdown</title>
          <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tech/shell-fur-breakdown/</link>
          <guid>https://queenofsquiggles.github.io/tech/shell-fur-breakdown/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tech/shell-fur-breakdown/">&lt;h2 id=&quot;What_happened???&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_happened???&quot; aria-label=&quot;Anchor link for: What_happened???&quot;&gt;What happened???&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Well you see a little youtuber called “Acerola” made a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;9dr-tRQzij4&quot;&gt;little video&lt;&#x2F;a&gt; and put out a challenge. As a creature fueled by an unholy combination of caffeine and raw impulse, I had to take on this “Acerola Furry Challenge” and exceed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;The_Challenge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_Challenge&quot; aria-label=&quot;Anchor link for: The_Challenge&quot;&gt;The Challenge&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Acerola’s original video did a breakdown for how shell fur works and demonstrated how to get it working in Unity. As an elite Godot game dev, I was able to port most of it over quite easily. Acerola’s challenge was to implement the fur rendering he demonstrated in the video, and then extend the functionality in at least one key way.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;XfrqyR_-jzIAAAAC&amp;#x2F;anime-goku.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;8246706&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.43103&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Goku from Dragon Ball Z power up to &lt;em&gt;super saiyin&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Well_what_is_“Shell_Fur”?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Well_what_is_“Shell_Fur”?&quot; aria-label=&quot;Anchor link for: Well_what_is_“Shell_Fur”?&quot;&gt;Well what is “Shell Fur”?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you already know Shell Fur and just wanna get to the results, you don’t need to read this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Shell Fur is named for the way it implements fur rendering. It utilizes a common method for sub-vertex geometry visualization. If you do work with 3D game development and&#x2F;or tech art, you are probably at least familiar with normal maps, and possibly parallax rendering (height maps) for materials. Both add extra visual detail without requiring extra vertices. Shell fur does a similar effect by layering multiple meshes on top of each other and selectively discarding specific pixels based on some kind of algorithm.
Essentially, if you break the UV coordinates into a smaller grid and then discard pixels at the edges of each cell, you would get a square fur, similar to what Acerola references in the game &lt;em&gt;Viva Pinata&lt;&#x2F;em&gt;. By doing a little extra math you can discard anything outside of a circle in the cell. Then going out along the layers you can shrink the size of the circle. With enough layers, this creates a visual effect that resembles strands of fur.
Something that is incredibly helpful about this method is that while it does increase the vertex count, it does so by such a small margin compared to the details provided. Because we do a lot of our calculations on the pixel level, for a game where furry objects can’t be looked at too closely, it can look quite realistic while not incurring too much of a performance hit.
Of course I love games with style and I found that it can quite easily create stylized effects as well.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;6NRM5QqZja8AAAAC&amp;#x2F;boykisser.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;16777119058470997423&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.985944&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;boykisser-gif-16777119058470997423&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;The boykisser meme character smirking&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;So_what_did_I_do?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_what_did_I_do?&quot; aria-label=&quot;Anchor link for: So_what_did_I_do?&quot;&gt;So what did I do?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First, I simply wanted to get fur working. So I made a &lt;del&gt;simple&lt;&#x2F;del&gt; system that would make duplicates of the mesh and extrude every single vertex slightly out based on the provided “strand length” and “shell count”. Through that we could make the layers, or shells, very easily. Additionally, it felt appropriate to be placing fur on a character rather than on a cube or sphere. So I searched “furry” into sketchfab and found a League of Legends character called “Kindred”. So I used this mesh and it actually didn’t work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;How_do_extrusions_work?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#How_do_extrusions_work?&quot; aria-label=&quot;Anchor link for: How_do_extrusions_work?&quot;&gt;How do extrusions work?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I used a nifty tool in Godot called &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt;, which has some lovely documentation. Basically it can load a surface from one mesh, perform manipulations on the data, and then push that new mesh to a mesh object (which could be the original mesh but it wasn’t in this case). So what I did is I loaded each surface and iterated throught the vertices. The &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt; provides a lookup to get all face indices touching a given vertex index. Then I got the normals of each connected face and averaged them out. I normalized the average normal and then multiplied it by the shell layer depth. The original vertex is then offset by that value and we move to the next one.&lt;&#x2F;p&gt;
&lt;p&gt;I’m actually really interested to see what kinds of fun procedural mesh generation I can do with the &lt;code&gt;MeshDataTool&lt;&#x2F;code&gt; in the future. I believe I could push new vertex data to it should I have something interesting for it. Maybe I could even make a voxel renderer with greedy tiling?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;It’s_rigged&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#It’s_rigged&quot; aria-label=&quot;Anchor link for: It’s_rigged&quot;&gt;It’s rigged&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So the character model was rigged for an animation, which I thought would be cool to try to make the fur work properly with it. However something about how rigged meshes work means that the original mesh would be properly deformed by the skeleton and the fur meshes would not. It actually resulted in the fur shell meshes doing a T-pose while laying on the ground behind the properly rendering character. Which was quite frustrating. I am not terribly familiar with how skeleton rigs and mesh deforms actually work in terms of the mesh data, so I decided to just strip the rig and make it a static mesh.&lt;&#x2F;p&gt;
&lt;p&gt;With the stripped mesh, everything was working wonderfully.&lt;&#x2F;p&gt;
&lt;p&gt;Next I took on working on different systems that could make the fur look nicer.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;EcSoC2eQGZMAAAAC&amp;#x2F;wow-t-posing.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;17657676&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.31687&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;wow-t-posing-spin-vocaloid-hatsune-miku-gif-17657676&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;A Hatsune Miku model in a t-pose rotating&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;Shader_improvements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Shader_improvements&quot; aria-label=&quot;Anchor link for: Shader_improvements&quot;&gt;Shader improvements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I wanted to make the fur look nicer, and one way to do that was to use some fun shader stuff. In Godot 4 we have &lt;code&gt;instance uniform&lt;&#x2F;code&gt; variables in shaders which are uniform values that can be assigned on a per-&lt;code&gt;MeshInstance3D&lt;&#x2F;code&gt; basis. So I was able to give each shell layer information on what percentage of the depth it was at and also assigning strand colours. Realistically, the strand colours didn’t need to be on a per-instance basis, but I did it so…yeah.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Simulation_improvements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Simulation_improvements&quot; aria-label=&quot;Anchor link for: Simulation_improvements&quot;&gt;Simulation improvements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So you may have noticed that the fur doesn’t really do anything and just sticks straight out. So what I wanted to do was add a basic physics simulation, especially a better one than Acerola made in the video (sorry not surry, bud). I used some basic physics lerping and damped the physics affect factor based on a curve resource.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot; aria-label=&quot;Anchor link for: Godot_Resources_Are_Magical_And_You_Better_Use_Them_Or_Else&quot;&gt;Godot Resources Are Magical And You Better Use Them Or Else&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;VAn-KzIfuvIAAAAC&amp;#x2F;happy-cry.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;17477970&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.39738&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;happy-cry-tears-of-joy-pokemon-team-tocket-gif-17477970&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;James from Pokemon crying happy tears&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Something that was really awesome for me when I first moved to Godot from Unity way back in 2020 (yeah I switched before it was cool) was the sheer quantity of useful resources available to be as a developer. And the ability to just export that and use it to manipulate stuff was incredible. They’ve only gotten better over time. Though &lt;code&gt;Curve&lt;&#x2F;code&gt; is definitely a classic. It’s simply a curve that supports different handle types and can have multiple vertices as well. I generally used it for making a basic smoothstep function, but the curve resource is fully customizable to change the thickness of strands along their length.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to use &lt;code&gt;Curve&lt;&#x2F;code&gt;s not only for visual thickness but also for the simulated “stiffness” of the strands along the length. What that means is that you can choose which parts of the strand are stiff and which aren’t.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Working_in_realtime&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Working_in_realtime&quot; aria-label=&quot;Anchor link for: Working_in_realtime&quot;&gt;Working in realtime&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;So all of this is &lt;strong&gt;technically&lt;&#x2F;strong&gt; working in real-time. One trouble is that the fur shells don’t exist until the game starts and a behemoth of mesh generation is done (at startup!!!)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;And_then…?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#And_then…?&quot; aria-label=&quot;Anchor link for: And_then…?&quot;&gt;And then…?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What comes next may surprise you… I made a plugin. Of course I made a plugin. I’m an addict for plugins. Tooling is love and tooling is life.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_Shell_Fur_Plugin&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_Shell_Fur_Plugin&quot; aria-label=&quot;Anchor link for: A_Shell_Fur_Plugin&quot;&gt;A Shell Fur Plugin&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently I got to see the lovely GodotCon talk by Miguel (bitbrain) talking about tooling in Godot. It was a great talk and if you love Godot you should really check it out. One of the key things I learned from the talk (at least that is relevant here) is the difference between “addon” and “plugin” in godot. “addon” is literally just something third party. Plugins are specifically code that is registered with the engine and requires the &lt;code&gt;plugin.cfg&lt;&#x2F;code&gt; file for godot to handle it. Basically, all plugins are addons, but not all addons are plugins.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So I got to work on a proper plugin for this shell fur. I had a few hopes, but I wasn’t sure what would all work in-editor so I had to play around with.&lt;&#x2F;p&gt;
&lt;p&gt;A key difference in my approach was in my programming language. For my original development, I chose to use C# since it’s one of my favourite languages to use with Godot. However, for this plugin, I wanted to make it compatible with more projects (and most people don’t use C# to my knowledge. Yes you may gasp now.) So this was ported to GDScript. Since, to my knowledge, there is no transpiler from C# to GDscript, I did basically rewrite everything but in a different language. On the bright side, I got to play with some of the new GDScript features introduced to recent versions of Godot such as &lt;code&gt;static var&lt;&#x2F;code&gt; and typed arrays.&lt;&#x2F;p&gt;
&lt;p&gt;Once I had the basics up and running for the shell fur I wanted to make some spicy stuff (No, no, not that! Where’s the damn spray bottle?). I wanted to see how much of the fur I could get running in the editor. That means mesh generation, real-time editing of fur properties, and physics. It turned out surprisingly well, excepting a few key areas.
Basically, the mesh generation takes a ton of processing time (1.5 seconds in some instances). Which causes a huge stutter if I do it synchronously. But if I try to use a coroutine or a thread, I have to make sure I’m managing data access (async code is hell). I spent days just trying to get different asynchronous bits of code working. In the end I never actually got it to work. I opted to just have buttons at the top (inserted by a custom &lt;code&gt;InspectorPlugin&lt;&#x2F;code&gt;, which are surprisingly easy to set up!). The buttons would either trigger mesh regeneration, or purge the shell meshes. I did have to learn a bit more about editor instanced nodes. For example, if they don’t have an owner, they don’t save. If you don’t have an &lt;code&gt;EditorInterface&lt;&#x2F;code&gt; reference, you can’t tell the editor that it needs to be saved. Oh and that group you’re using to separate out your instanced meshes out from the other meshes in the scene that really need to not be messed with? Yeah you gotta add the group slightly differently to ensure it stays when saving, else it gets purged upon reload.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Lewd Joke Incoming) Plugin development is a either like sex or school team projects: either way I’m getting fucked, all that changes is if I’m having a good time or not.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I had to do a lot of work trying to make the asynchronous code work and ended up failing after trying for almost an entire week. And it’s probably worth mentioning that I’m currently (as of writing) unemployed. I was putting 9-10 hours a day for like 5 days into this and couldn’t make it work. I want to believe there is a fundamental gap in my knowledge that is causing this problem, but I was unable to figure it out with all that time so if you know how to make it work submit a PR or something? It’s open source.&lt;&#x2F;p&gt;
&lt;p&gt;That rant out of the way, what I did manage to get working was basically everything else on my checklist. Additionally, I added the option to provide a texture to the fur, which would let you do more intersting stylings for the fur. And this is where the strand colours being a per-instance and not a per-material uniform gets really fun. (And it was totally on purpose and definitely not a happy accident). The instance colours are multiplied on the texture colour, which lets you have colour variations across instances of the same fur material, for example if you wanted to have a slight variation across several furry creatures. (Frankly if you wanted to make a wetness system you could modify the colour and stiffness. However currently the roughness and metalness are on a per-material basis so a shader rewrite may be needed to make that totally work as desired.) Hey speaking of shader rewrites, I made an option so the fur tool will allow you to load a custom material instead of the default material. So while the default material is pretty robust, if you want a different style you can totally do that. You could even go so far as to have a custom shader so long as the uniforms match the expected names and types.&lt;&#x2F;p&gt;
&lt;p&gt;Also if you are super cool and awesome, there might be a few “easter eggs” in the plugin to find. Mainly because I can’t help myself when I’m banging my head into the wall for days. I needed something fun, so now you get to deal with it. XOXO&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;8mUbihM7AJAAAAAC&amp;#x2F;toradora-palm-top-tiger.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;22688840&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.95122&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;toradora-palm-top-tiger-taiga-aisaka-anime-gif-22688840&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Toradora laughing with the caption ‘menace to society’&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Future_Plans&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Future_Plans&quot; aria-label=&quot;Anchor link for: Future_Plans&quot;&gt;Future Plans&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’m not entirely certain if I have any plans for this addon. I did get an issue requesting support for older Godot version, since &lt;code&gt;static var&lt;&#x2F;code&gt; isn’t actually supported in Godot 4.0. So I rewrote some sections that would allow compatibilty for all currently available 4.X versions. If at some point people want to use it with 4.3 and there’s some breaking change, I could look into upgrading it, but with projects like this I generally do a “lazy maintenance” approach. That is, because I am not personally using this tool in my own projects, I don’t have any real needs for it. I could theoretically develop it forever. So instead I let it sit and if someone submits an issue I’ll look into fixing it, or mark the plugin as archived&#x2F;unmaintained. Really I probably have several repositories that I need to do that for, so if I ever have a boring afternoon I might have to spruce up my GitHub repos.&lt;&#x2F;p&gt;
&lt;p&gt;As this plugin is MIT licensed and fully open source, anyone is free to fork it and make it their own, or even better they can do a pull request for adding new features to the plugin. But that is only really meaningful if there are a decent number of people using the plugin, and as far as I am aware the total number is zero. That could definitely just be my limited ability to see who uses my tools. I really can only see when people star the repo on GitHub. Downloads from there and from the Godot Asset Library are completely opaque and provide no insights as to whether anyone is using my tools. Which can feel disheartening at times since I can’t ever be sure if all of this work is for nothing.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;HtRb68DqNPwAAAAC&amp;#x2F;little-witch-academia-sucy.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;25463727&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.09622&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;little-witch-academia-sucy-shrug-gif-25463727&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Sucy from Little Witch Academia shrugging&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Please_I_beg_of_you&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Please_I_beg_of_you&quot; aria-label=&quot;Anchor link for: Please_I_beg_of_you&quot;&gt;Please I beg of you&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;4q5OwnFZJdEAAAAC&amp;#x2F;adorable-pleading.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;22150014&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.8625&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;adorable-pleading-eyes-anime-crying-gif-22150014&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;A young anime girl with a pleading look on her face (I don’t know the character or anime lol)&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If you use a plugin, even once, go tell the creator(s) that you used it. Tell them how you feel about it, especially if you really enjoyed it (And maybe keep things kind and constructive if you had a negative experience). It really means a lot. Frankly, everyone who creates things for others wants to know that people are enojying it. Can you imagine what it would be like if you published a game and the platform you published on didn’t have comments, views, downloads, or anything for analytics??&lt;&#x2F;p&gt;
&lt;p&gt;While I’m on this topic, it really stretches well beyond the confines of game development! I don’t talk about it much, but I recently self published a book. I spent maybe a year or two on it and to this day I have barely any insights into what people think besides my family members that tell me. Everyone who creates for others, deserves to hear that their creations sparked joy, even if it was just for a moment. Even if it was something dumb.&lt;&#x2F;p&gt;
&lt;p&gt;Also the reason I don’t talk about the book much is that it had some pretty personal stuff in it that if I linked in my socials would basically doxx me. My next novel is gonna have absolutely nothing unsafe and it’s gonna be published under a different pen name so I’ll be totally safe to hype it up for my online friends.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Showcase&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Showcase&quot; aria-label=&quot;Anchor link for: Showcase&quot;&gt;Showcase&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;

&lt;div class=&quot;flex flex-row flex-wrap bg-base-200 p-2 rounded-box container mx-auto gap-4 justify-center&quot;&gt;
    
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;fuzzy.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;fuzzy.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;fuzzy.gif&quot; alt=&quot;Showing off how the fur reacts to motion (in a simulation of physics)&quot; title=&quot;Showing off how the fur reacts to motion (in a simulation of physics)&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                Showing off how the fur reacts to motion (in a simulation of physics)
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_pbr.png&quot; target=&quot;_blank&quot;&gt;

        
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_pbr.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_pbr.png&quot; alt=&quot;The fur can handle PBR materials as well. Here it&amp;#x27;s a reflective gold, smoothed because it&amp;#x27;s using the base normals of the mesh instead of individual strands&quot; title=&quot;The fur can handle PBR materials as well. Here it&amp;#x27;s a reflective gold, smoothed because it&amp;#x27;s using the base normals of the mesh instead of individual strands&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                The fur can handle PBR materials as well. Here it’s a reflective gold, smoothed because it’s using the base normals of the mesh instead of individual strands
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_physics.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_physics.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_physics.gif&quot; alt=&quot;A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects&quot; title=&quot;A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                A little tool allows setting the stiffness of the strands along their length, which can create some interesting effects
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
    
    

    &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;tech&#x2F;shell-fur-breakdown&#x2F;demo_texture.gif&quot; target=&quot;_blank&quot;&gt;
        

&lt;div class=&quot;flex justify-center not-prose&quot;&gt;
    &lt;div class=&quot;card card-compact shadow-2xl bg-neutral max-w-lg&quot;&gt;
        &lt;figure&gt;
            &lt;a href=&quot;demo_texture.gif&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;
                &lt;img class=&quot;rounded-box shadow-md&quot; src=&quot;demo_texture.gif&quot; alt=&quot;It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print&quot; title=&quot;It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print&quot; &#x2F;&gt;
            &lt;&#x2F;a&gt;
        &lt;&#x2F;figure&gt;
        
        &lt;div class=&quot;card-body&quot;&gt;
            &lt;p class=&quot;prose&quot;&gt;
                It also supports realtime texturing. In this example I used a noise map to make a weird cheetah print
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Behaviour Trees versus State Machines</title>
          <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/guides/fsm-vs-bt/</link>
          <guid>https://queenofsquiggles.github.io/guides/fsm-vs-bt/</guid>
          <description xml:base="https://queenofsquiggles.github.io/guides/fsm-vs-bt/">&lt;!-- 
 Hey hey! this is hard-coded for my-kofi to ensure the classes get injected into tailwind. 
 You&#x27;ll need to make an overriding shortcode in your `templates&#x2F;shortcodes` called `kofi.html
 Just do your best to copy this styling if you want the same as I have. Else use Kofi&#x27;s style
--&gt;

&lt;div class=&quot;flex not-prose container mx-auto justify-center&quot;&gt;
    &lt;div class=&quot;bg-accent p-2 rounded-box shadow-2xl&quot;&gt;
        &lt;a class=&quot;flex flex-col flex-wrap justify-center&quot; href=&#x27;https:&#x2F;&#x2F;ko-fi.com&#x2F;G2G3AP0TR&#x27; target=&#x27;_blank&#x27;
            rel=&quot;noopener noreferrer&quot;&gt;
            &lt;img class=&quot;rounded-full shadow-md&quot; src=&#x27;https:&#x2F;&#x2F;storage.ko-fi.com&#x2F;cdn&#x2F;kofi4.png?v=3&#x27;
                alt=&#x27;Buy Me a Coffee at ko-fi.com&#x27; &#x2F;&gt;
        &lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m trying out a different layout for this post so the text is easier to read. it looked super dense in the typical layout. Let me know what you think! If this style is ugly I might just change it back&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I also activated full &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Weeb_(disambiguation)&quot;&gt;“weeb”&lt;&#x2F;a&gt; mode for this post. I can remove it if it detracts from people’s enjoyment, but I’m hoping it makes reading this &lt;em&gt;even more enjoyable&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;update: the GIF inclusion can break &lt;em&gt;some&lt;&#x2F;em&gt; rss feeds. If you have the option to “load full text” that should fix it. Otherwise the actual website should work too.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;Wait…AI??&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Wait…AI??&quot; aria-label=&quot;Anchor link for: Wait…AI??&quot;&gt;Wait…AI??&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First to dismiss anyone who came in here thinking I was going to talk about &lt;em&gt;ChatGPT&lt;&#x2F;em&gt; or &lt;em&gt;Midjourney&lt;&#x2F;em&gt;. While those are also referred generally as “AI”, the term itself is infinitely more general than “Large Language Model used for generating arbitrary content while also violating every license known to humanity.” This article is focusing on a different sector of artificial intelligence. Specifically one of the more “smoke and mirrors” type of intelligence, which is really where games development thrives!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;AI_and_Games_🤖&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#AI_and_Games_🤖&quot; aria-label=&quot;Anchor link for: AI_and_Games_🤖&quot;&gt;AI and Games 🤖&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Generally, it is easiest to think of AI in games to be primarily used for creating interesting hostile enemies such as the guards in &lt;em&gt;Metal Gear Solid&lt;&#x2F;em&gt; games or the Alien (Xenomorph) in &lt;em&gt;Alien: Isolation&lt;&#x2F;em&gt;. However they are also used for the cute characters in the &lt;em&gt;Animal Crossing&lt;&#x2F;em&gt; games, or the slimes in &lt;em&gt;Slime Rancher&lt;&#x2F;em&gt;. But then getting even past tangible characters, there is “The Director” in &lt;em&gt;Left For Dead 2&lt;&#x2F;em&gt;, which is an AI solution that dynamically adjusts the game based on current conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully I’m getting across the idea that AI in games is significantly more simple than the “AIs” that are sweeping public consciousness right now. In fact they can get so simple that there’s really only two kinds that I’ve ever used. That isn’t to say there &lt;strong&gt;aren’t&lt;&#x2F;strong&gt; other kinds. But that I’ve never had a problem that needed a different solution than either one or the other.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Behaviour_Trees_my_beloved_💕&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Behaviour_Trees_my_beloved_💕&quot; aria-label=&quot;Anchor link for: Behaviour_Trees_my_beloved_💕&quot;&gt;Behaviour Trees my beloved 💕&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Behaviour Trees were my first love. They are absolutely incredible and I would argue that they are functional enough to do some basic scripting with them should the need arise. Now to actually talk about them 😅&lt;&#x2F;p&gt;
&lt;p&gt;Behaviour Trees are closest to a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Flowchart&quot;&gt;“Flow Chart”&lt;&#x2F;a&gt;, which is probably the best way to think about them if you’re just getting started.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;What_is_a_tree?_(In_programming_at_least)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_is_a_tree?_(In_programming_at_least)&quot; aria-label=&quot;Anchor link for: What_is_a_tree?_(In_programming_at_least)&quot;&gt;What is a tree? (In programming at least)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A tree is a generic data structure that is used to hold “nodes” (which generally have some kind of data associated with them), and their relationships between each other. Now technically that description would be called a “Graph”, which is a less restrictive type of data structure.&lt;&#x2F;p&gt;
&lt;p&gt;Trees have some particular rules that each node can have children , which is a one-way relationship where the parent knows its children but the children do not know their parent. Additionally each node can only have a single parent. If you are used to Godot, the “Scene Tree” is a type of tree.&lt;&#x2F;p&gt;
&lt;p&gt;Technically some extra flavour is added such that child nodes &lt;em&gt;can&lt;&#x2F;em&gt; access their parent nodes, but this is distinctly against recommended workflow. You might have heard “Call down; Signal Up”. This is a method that preserves the Tree rules by ensuring that only parent nodes need to know about their child nodes. And never the other way around.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Back_to_Behaviour_Trees&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Back_to_Behaviour_Trees&quot; aria-label=&quot;Anchor link for: Back_to_Behaviour_Trees&quot;&gt;Back to Behaviour Trees&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So knowing that it is a tree data structure used to model some kind of “behaviour”, you might already have some ideas. The nodes available come in a few key types that serve specific purposes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;root (in some cases isn’t technically a node)&lt;&#x2F;li&gt;
&lt;li&gt;compositor&lt;&#x2F;li&gt;
&lt;li&gt;decorator&lt;&#x2F;li&gt;
&lt;li&gt;query&#x2F;condition&lt;&#x2F;li&gt;
&lt;li&gt;action&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The root is fairly boring because all it does is call down whatever child node it has (only one is usually allowed).&lt;&#x2F;p&gt;
&lt;p&gt;All nodes in a behaviour tree use a “tick” (or otherwise named) method to perform their own logic, and then return a state value for that node. Usually “Success”, “Failure”, or “Running” (for when it takes multiple ticks to accomplish the task).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Queries&#x2F;Conditions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Queries&amp;#x2F;Conditions&quot; aria-label=&quot;Anchor link for: Queries&amp;#x2F;Conditions&quot;&gt;Queries&#x2F;Conditions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A query node simply checks against some logical condition and returns “Success” if true and “Failure” if false. Specifically the positive affirmation leaning is helpful such that we don’t use “Is thing not true” conditions, since those can get messy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Actions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Actions&quot; aria-label=&quot;Anchor link for: Actions&quot;&gt;Actions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;An action node tries to do something. Ideally some kind of transformation that creates an external effect. Like applying a force to the character or triggering a VFX. Returns “Success” when completed, “Running” while processing, and “Failure” if something goes wrong.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Compsitors&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Compsitors&quot; aria-label=&quot;Anchor link for: Compsitors&quot;&gt;Compsitors&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A compositor is a node that can have one or more children. Based on the type of compositor (typically two core types), the way the children are iterated through is different.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Result&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Sequence&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Children are iterated through until the first child that returns “Failure”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Select&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;Children are iterated through until the first child that returns “Success”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Sequences are really useful for prefixing with conditions in order to have pre-requisites for a particular action. That way you can determine under what condition an action (or actions!) is&#x2F;are taken.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Decorators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Decorators&quot; aria-label=&quot;Anchor link for: Decorators&quot;&gt;Decorators&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Decorators are nodes that can only have a single child node. They “decorate” the result of their child node by transforming it in some way. There are a few key types that are generally useful:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Type&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Result&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Succeeder&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns “Success” always (except for when child returns “Running”)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Failer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns “Failure” always (except for when child returns “Running”)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Inverter&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns the opposite of the childs result (except for when child returns “Running”)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Limiter&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns the child’s result the first time (or a customizable number of times) and then always returns “Failure” without calling the child node&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Timer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Returns the child’s result at first, then uses a countdown timer to determine the next time to use the child node’s result. If not time yet, returns “Failure”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Decorators are pretty fun to apply a logical transformation for results. Remember how conditions are supposed to be positive affirmations? Inverters are where you can check for negative affirmations. ( &lt;em&gt;Don’t tell your therapist about this!&lt;&#x2F;em&gt; 😏 )&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Putting_it_all_together&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Putting_it_all_together&quot; aria-label=&quot;Anchor link for: Putting_it_all_together&quot;&gt;Putting it all together&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
img::render(src, alt)
&lt;p&gt;Here’s a behaviour tree example I mocked up in Obsidian.&lt;&#x2F;p&gt;
&lt;p&gt;You can see the “root” node connects to a “Sequence” which then has two children which are also “sequence” nodes. In certain contexts, it’s usually helpful to name different branches based on what they are supposed to accomplish in totality. So if we read through the tree, it goes through these steps:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Jump_Branch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Jump_Branch&quot; aria-label=&quot;Anchor link for: Jump_Branch&quot;&gt;Jump Branch&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Checking if it’s on the ground&lt;&#x2F;li&gt;
&lt;li&gt;Checking if the “JUMP” input is pressed&lt;&#x2F;li&gt;
&lt;li&gt;Passing both checks, applying a positive Y force.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;Idle_Branch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Idle_Branch&quot; aria-label=&quot;Anchor link for: Idle_Branch&quot;&gt;Idle Branch&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Invert result of
&lt;ul&gt;
&lt;li&gt;Checking if the actors velocity vector length (speed technically) is greater than zero&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Passing the check, requesting the animation “IDLE” to play&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;More_complexity?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#More_complexity?&quot; aria-label=&quot;Anchor link for: More_complexity?&quot;&gt;More complexity?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The awesome thing about behaviuour trees is that the same core nodes apply no matter what scale your tree operates at. There are some more advanced solutions for incredibly massive behaviour trees like in for the enemies in recent &lt;em&gt;Far Cry&lt;&#x2F;em&gt; games. But the same core logic is always being applied.&lt;&#x2F;p&gt;
&lt;p&gt;Also I didn’t even get into the concept of the “Blackboard”, which is basically a &lt;code&gt;Dictionary&lt;&#x2F;code&gt; of values (&lt;code&gt;Variant&lt;&#x2F;code&gt; would be a good choice for Godot) that is accessible to all nodes in the tree when they perform their tick process. The blackboard is used to communicate information across nodes. Such as caching a particular jump strength based on a condition, then using that jump strength in the “Jump Branch”.&lt;&#x2F;p&gt;
&lt;p&gt;Complex logic is pretty easy to do, once you get over the hurdle of the boiler plate. I promise I’m getting to the pros and cons, but first I gotta talk about State Machines!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Finally_talking_about_State_Machines&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Finally_talking_about_State_Machines&quot; aria-label=&quot;Anchor link for: Finally_talking_about_State_Machines&quot;&gt;Finally talking about State Machines&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;State Machines are so incredibly old compared to all of the kinds of AI available to use in games. They are originally a concept from Electrical Engineering. Specifically in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moore_machine&quot;&gt;“Moore”&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mealy_machine&quot;&gt;“Mealy”&lt;&#x2F;a&gt; machines. Those two types of state machines are pretty much the end of what was stolen from electrical engineering and robotics. From there, we added a bit of our own &lt;em&gt;spice&lt;&#x2F;em&gt; to make things more fun.&lt;&#x2F;p&gt;
&lt;p&gt;State machines are actually incredibly simple when we get down to it. Though there are some implementations that are more robust than others. We usually refer to them as “Finite State Machines” because there is a limited (finite) number of states the “machine” can be in. And specifically the machine can only ever be in one state at a single time.&lt;&#x2F;p&gt;
&lt;p&gt;Here an example image first might be more helpful:&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;p&gt;Each state handles it’s own logic as if it was completely independant of the other states. Which should be super familiar for you if you have programming experience. Essentially, if you are using a long &lt;code&gt;if...elseif...elseif...elseif...else&lt;&#x2F;code&gt; chain, or a super massive &lt;code&gt;switch&lt;&#x2F;code&gt; statement, then you might benefit from extracting each clause into a state definition.&lt;&#x2F;p&gt;
&lt;p&gt;In the above example we can see three core states, and the conditions by which they transition to the particular state. It is imporant to note those transitions are one-way directional. States themselves are actually incredibly simple. The complexity comes in when we need to orchestrate transitions based on conditions. A very Godot approach is to use signals, and then have a parent node connect those signals to state change calls. &lt;em&gt;Which is exactly what I did in Squiggles Core 4X (SC4X)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;void _Ready&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateCutscene&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnStateFinished &lt;&#x2F;span&gt;&lt;span&gt;+= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_fsm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChangeState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateMoving&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateMoving&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnStateFinished &lt;&#x2F;span&gt;&lt;span&gt;+= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_fsm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChangeState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_stateCutscene&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case you aren’t super familiar with C# code, the above code is connecting the &lt;code&gt;OnStateFinished&lt;&#x2F;code&gt; signal from the two types of states available to a lambda expression that calls the &lt;code&gt;_fsm&lt;&#x2F;code&gt; (an instance of &lt;code&gt;FiniteStateMachine&lt;&#x2F;code&gt;) to change the state to a new state. The signals are emitted from the state when they detect a condition where they need to exit and the orchestating node (in this case a “Player Controller”) defines how those are handled. Additionally, we can use external triggers to force a switch if we like. And subclasses of &lt;code&gt;State&lt;&#x2F;code&gt; can even define their own signals to allow multiple types of transitions out.&lt;&#x2F;p&gt;
&lt;p&gt;So we have it working great! A small number of states and the transtions handled by an orchestrating node. Now imagine we have 9 possible states with 16 total transitions! That sounds like a whole lot! How would we even begin to create a solution to that, let alone an &lt;em&gt;elegant&lt;&#x2F;em&gt; one!?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Adding_completixity_to_FSMs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Adding_completixity_to_FSMs&quot; aria-label=&quot;Anchor link for: Adding_completixity_to_FSMs&quot;&gt;Adding completixity to FSMs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
img::render(src, alt)
&lt;p&gt;So this is what would be called a “Hierarchical Finite State Machine” (HFSM). Bascially the solution to complexity is just layering more and more states on top. In the example the “top level states” would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;State Overworld&lt;&#x2F;li&gt;
&lt;li&gt;State Cutscene&lt;&#x2F;li&gt;
&lt;li&gt;State Fishing Minigame&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then “Overworld” and “Fishing Minigame” each have their own sub-FSMs for controlling logic within that state. An essential guide is that for any state implementation, if you are asking it to store more state information and changing behaviour based on that, you should extract that into multiple states. And if those multiple states are closely tied as a coherent group, group them in a sub-state machine (&lt;em&gt;kinky&lt;&#x2F;em&gt; &#x2F;j).&lt;&#x2F;p&gt;
&lt;p&gt;That hierarchy of state machines embedded into state machines is why it is called “Hierarchical.” As far as my experience goes, HFSMs are best used for more complex AI problems. For example, the above example is for a player controller which allows the game to react to the current game state and handle the player’s actions based on that. So the mini-games are just another top-level state (with sub-space). In fact if the game requires &lt;em&gt;many&lt;&#x2F;em&gt; mini-games each with their own needed controls, it may be prudent to make a new top-level state for all mini-games and then have a sub-level for each game state and then another sub-level for the individual action states for those mini-games.&lt;&#x2F;p&gt;
&lt;p&gt;Which, I would argue is rather &lt;em&gt;&lt;strong&gt;elegant&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;MWuIYnle2BsAAAAd&amp;#x2F;spy-x-family-elegant.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;3561089886890940443&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.56604&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;spy-x-family-elegant-elegance-gif-3561089886890940443&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Spy X Family character shouting ‘elegant!’&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;Pros_and_Cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Pros_and_Cons&quot; aria-label=&quot;Anchor link for: Pros_and_Cons&quot;&gt;Pros and Cons&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at the two now that we’ve gone over how they each work!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Behaviour_Tree_Pros&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Behaviour_Tree_Pros&quot; aria-label=&quot;Anchor link for: Behaviour_Tree_Pros&quot;&gt;Behaviour Tree Pros&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Behaviour trees are absolutely incredible at modelling more complex behaviours and interactions. A lot of enemy AIs in recent years that felt “alive” are because of super-charged behaviour trees. (As well as incredibly smart AI designers!!!) This structure is incredibly powerful for organizing behaviours and conditions in a way that can react to dynamic alterations to the structure. Yeah you can hot-swap branches at runtime and Behaviour Trees will shrug it off like a light rain (when done correctly).&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;mBgSW3COdJUAAAAd&amp;#x2F;yor-forger-spy-x-family.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;26816185&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1.77778&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;yor-forger-spy-x-family-spy-x-family-season2-spy-x-family-part2-yor-gif-26816185&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Yor from Spy X Family spinning a blade in a dark forest. It ends with her catching a falling flower at the very tip of the blade.&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;State_Machine_(FSM&#x2F;HFSM)_Pros&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#State_Machine_(FSM&amp;#x2F;HFSM)_Pros&quot; aria-label=&quot;Anchor link for: State_Machine_(FSM&amp;#x2F;HFSM)_Pros&quot;&gt;State Machine (FSM&#x2F;HFSM) Pros&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;FSMs are incredibly simple to build from scratch, and can re-use existing code if you are going through a refactor. Additionally, you can extract them into HFSMs if the need arises. They are incredibly powerful at handling logic when you know a discrete number of states you want the AI to be in, and you have very specific transitions between them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Behaviour_Tree_Cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Behaviour_Tree_Cons&quot; aria-label=&quot;Anchor link for: Behaviour_Tree_Cons&quot;&gt;Behaviour Tree Cons&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There is &lt;strong&gt;so much boilerplate&lt;&#x2F;strong&gt; to get a behaviour tree system up and running. As well as needing to write custom nodes for each unique type of action that you want. If you have a lot of smaller actions that you want various different entities to be able to do slightly differently, that would be a use case, but it is still going to be a huge pain assuming you even are able to overcome the steep learning curve of thinking in trees!&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media.tenor.com&amp;#x2F;A2ihJ4zvpOkAAAAC&amp;#x2F;anya-anya-forger.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;245623370932004073&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;0.854839&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;anya-anya-forger-spy-x-family-brain-fried-gif-245623370932004073&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Anya from Spy X Family looking confused and burnt out&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;State_Machine_(FSM&#x2F;HFSM)_Cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#State_Machine_(FSM&amp;#x2F;HFSM)_Cons&quot; aria-label=&quot;Anchor link for: State_Machine_(FSM&amp;#x2F;HFSM)_Cons&quot;&gt;State Machine (FSM&#x2F;HFSM) Cons&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;State Machines are much less resiliant to run-time changes because a run-time change would necessitate a re-orchestration of all of the transitions. And if that is something you are doing, you should &lt;em&gt;really&lt;&#x2F;em&gt; make sure you wouldn’t rather use an HFSM for the same solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Conclusion&quot; aria-label=&quot;Anchor link for: Conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I really wish I could just tell you, “X is better than Y and Z, so just use that for everything.” But that’s not how this works. &lt;em&gt;Nothing is ever easy&lt;&#x2F;em&gt;. The lesson I hope you are taking from this article is that you need to find the right &lt;em&gt;&lt;strong&gt;tool&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; for the &lt;em&gt;&lt;strong&gt;job&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;!--
Embeds a GIF from tenor with some styling to ensure it looks good while not dominating the page
===
data_postid: id of the post on tenor (take from embed code)
data_aspect_ratio: the aspect ratio of the gif (take from embed code)
url: embed url (take from embed code)
width: a standard CSS width value to determine how big to display the gif at. (50% usually looks good)
caption (optional): a text caption that will display below the image and serve as a link to the image. Supports markdown!
===
Example Data:
data_postid=&quot;8246706&quot; 
data_aspect_ratio=&quot;1.43103&quot; 
url=&#x27;https:&#x2F;&#x2F;tenor.com&#x2F;view&#x2F;anime-goku-dbz-dragon-ball-super-saiyan-gif-8246706&#x27; 
caption=&quot;Goku from Dragon Ball Z power up to &#x27;super saiyin&#x27;&quot; 
fallback=&quot;https:&#x2F;&#x2F;media.tenor.com&#x2F;XfrqyR_-jzIAAAAC&#x2F;anime-goku.gif&quot;

--&gt;
&lt;div class=&quot;flex justify-center&quot;&gt;
    &lt;div class=&quot;not-prose card bg-base-200 max-w-md&quot;&gt;
        &lt;noscript&gt;
            &lt;figure&gt;
                &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;media1.tenor.com&amp;#x2F;m&amp;#x2F;7W75SiCsuJUAAAAC&amp;#x2F;tails-speech-bubble.gif&quot; &#x2F;&gt;
            &lt;&#x2F;figure&gt;
        &lt;&#x2F;noscript&gt;
        &lt;div class=&quot;card-body mx-2&quot;&gt;
            &lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;26158321&quot; data-share-method=&quot;host&quot;
                data-aspect-ratio=&quot;1&quot; data-width=&quot;100%&quot;&gt;
            &lt;&#x2F;div&gt;
            &lt;script type=&quot;text&#x2F;javascript&quot; async src=&quot;https:&#x2F;&#x2F;tenor.com&#x2F;embed.js&quot;&gt;
            &lt;&#x2F;script&gt;
            &lt;div class=&quot;prose px-2 md:px-4&quot;&gt;
                &lt;noscript&gt;
                    &lt;p class=&quot;bg-info text-neutral not-prose rounded-box py-2 text-center&quot;&gt;
                        &lt;i class=&quot;fas fa-solid fa-info&quot;&gt;&lt;&#x2F;i&gt;
                        &lt;b&gt;GIF embed fallback in use.&lt;&#x2F;b&gt;
                        &lt;a class=&quot;link&quot; href=&quot;https:&amp;#x2F;&amp;#x2F;tenor.com&amp;#x2F;view&amp;#x2F;tails-speech-bubble-soup-gif-26158321&quot;&gt;
                            Open remote
                        &lt;&#x2F;a&gt;
                    &lt;&#x2F;p&gt;
                &lt;&#x2F;noscript&gt;
                &lt;p&gt;Tails from Sonic Boom trying to eat soup with a fork and laughing&lt;&#x2F;p&gt;

            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;In case you haven’t noticed, I have emojis now! Thanks to a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;jemoji&quot;&gt;jekyll plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note: this is actually a clever lie now that I’m no longer using Jekyll, or even the next SSG (Static Site Generator) that I used after. I’m onto Zola, which just has emoji shortcode support out of the box. Leaving the link though in case anyone in the future wants to add the feature to their jekyll based blog&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;So_you_want_to_learn_more?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_you_want_to_learn_more?&quot; aria-label=&quot;Anchor link for: So_you_want_to_learn_more?&quot;&gt;So you want to learn more?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s some resources to learn more about particular AIs in games and how to use them in interesting ways. Lotta youtube links because gamedev youtube is my &lt;em&gt;addiction&lt;&#x2F;em&gt; ❤️&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;Link&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;tthompso&quot;&gt;‘AI &amp;amp; Games’ (Tommy Thompson) YouTube channel&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Tommy is an excellent resource for learning about cutting edge AI techniques used in gaming, primarily focused on AAA solutions. But my entry to the subject was his channel which went into deep dives on different topics.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;qwOM3v8T33Q&quot;&gt;Heartbeast’s Amazing FSM Tutorial (GDscript)&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;A super straightforward approach to implementing a basic Finite State Machine in Godot 4 using GDScript. I used it as a guide for the State Machine implementation in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QueenOfSquiggles&#x2F;Squiggles-Core-4X&quot;&gt;Squiggles Core 4X&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;beehave&quot;&gt;BitBrain’s Behaviour Tree Addon “Beehave” (GDscript)(MIT)&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;A super amazing behaviour tree implementation that uses a few extra node types to make the trees more robust. Comes with debugging tools so you can inspect what the tree is doing at any given time (even in real-time!!!)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;Bonus!_You_like_memes?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Bonus!_You_like_memes?&quot; aria-label=&quot;Anchor link for: Bonus!_You_like_memes?&quot;&gt;Bonus! You like memes?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You might have noticed the GIFs I used in this post. I made a custom “include” type that I can use for my posts that specifically embeds any tenor GIF with a particular width and then centers it and adds a border. Optionally it can add a caption to the gif as well since I’m not sure how well tenor embedded gifs support captions. Plus that way if it fails to load, the meaning is still there. You can refer to my &lt;a href=&quot;https:&#x2F;&#x2F;queenofsquiggles.github.io&#x2F;guides&#x2F;embedding-gifs&#x2F;&quot;&gt;Embedding GIFs&lt;&#x2F;a&gt; page for details.&lt;&#x2F;p&gt;
&lt;!-- 
 Hey hey! this is hard-coded for my-kofi to ensure the classes get injected into tailwind. 
 You&#x27;ll need to make an overriding shortcode in your `templates&#x2F;shortcodes` called `kofi.html
 Just do your best to copy this styling if you want the same as I have. Else use Kofi&#x27;s style
--&gt;

&lt;div class=&quot;flex not-prose container mx-auto justify-center&quot;&gt;
    &lt;div class=&quot;bg-accent p-2 rounded-box shadow-2xl&quot;&gt;
        &lt;a class=&quot;flex flex-col flex-wrap justify-center&quot; href=&#x27;https:&#x2F;&#x2F;ko-fi.com&#x2F;G2G3AP0TR&#x27; target=&#x27;_blank&#x27;
            rel=&quot;noopener noreferrer&quot;&gt;
            &lt;img class=&quot;rounded-full shadow-md&quot; src=&#x27;https:&#x2F;&#x2F;storage.ko-fi.com&#x2F;cdn&#x2F;kofi4.png?v=3&#x27;
                alt=&#x27;Buy Me a Coffee at ko-fi.com&#x27; &#x2F;&gt;
        &lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>Godot Lighting Exploration</title>
          <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/tech/godot-lighting-exploration/</link>
          <guid>https://queenofsquiggles.github.io/tech/godot-lighting-exploration/</guid>
          <description xml:base="https://queenofsquiggles.github.io/tech/godot-lighting-exploration/">&lt;h2 id=&quot;The_goal&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_goal&quot; aria-label=&quot;Anchor link for: The_goal&quot;&gt;The goal&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I recently competed in Ludum Dare 54 (theme “Limited Space”). One of the problems players have mentioned is the poor performance. Mainly this is due to heavy leaning on &lt;code&gt;VoxelGI&lt;&#x2F;code&gt; and &lt;code&gt;SDFGI&lt;&#x2F;code&gt; which are Godot’s premier techniques for rendering realtime global illumination. What I wanted out of this is to explore what is possible with Godot, and what options are available if I want to lean towards supporting end users on lower end hardware.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at the techniques we have available to us!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;SDFGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#SDFGI&quot; aria-label=&quot;Anchor link for: SDFGI&quot;&gt;SDFGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;SDFGI is a light model managed not by a particular node but as a part of the &lt;code&gt;WorldEnvironment&lt;&#x2F;code&gt;. The technical details of it go way over my head, but basically it uses the geometry of the scene to approximate(?) the global illumination while making heavy use of Signed Distance Fields&lt;&#x2F;p&gt;
&lt;h2 id=&quot;VoxelGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#VoxelGI&quot; aria-label=&quot;Anchor link for: VoxelGI&quot;&gt;VoxelGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;VoxelGI is a semi-realtime model that makes use some some baked data as well as real time calculations. This does limit how fully an environment is able to be lit realistically. However it makes up for that by being quite easy to set up and immediately adds details to the game. The main downside is runtime performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;LightmapGI&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#LightmapGI&quot; aria-label=&quot;Anchor link for: LightmapGI&quot;&gt;LightmapGI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Lightmap Global Illumination uses exclusively pre-baked data. Meaning that while requiring a large file that caches the lighting data, the runtime performance cost is extremely low. (But not zero because nothing is ever easy!)&lt;&#x2F;p&gt;
&lt;p&gt;Because the lighting model is baked ahead of time, you can have highly realistic simulated light for a given space. And on top of that, the node automatically places lighting probes based on your settings. Though there is a lightmap probe node if you want to set some specific probe locations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ReflectionProbe&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ReflectionProbe&quot; aria-label=&quot;Anchor link for: ReflectionProbe&quot;&gt;ReflectionProbe&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Reflection Probe might not be something you think of for lighting model. While extremely useful for creating &lt;em&gt;reflections&lt;&#x2F;em&gt;, it also provides some indirect lighting through the reflection contribution. Because of this, it can provide some added light while also making reflections appear more realistic.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are two modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update Once&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More performant&lt;&#x2F;li&gt;
&lt;li&gt;Does not detect changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Update Always&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Slower&lt;&#x2F;li&gt;
&lt;li&gt;Reacts to changes in the scene&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So when it comes to reflection probes, you may want to evaluate which mode is most effective for your scene in particular. Because I made a purely static scene for this experiment, I used “Update Once”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;The_experiment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_experiment&quot; aria-label=&quot;Anchor link for: The_experiment&quot;&gt;The experiment&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This experiment was to create a somewhat interesting scene. I recently saw the new Dune movie and liked the “mars” themes of this asset pack by Kay Lousberg. So I decided to make a desert planet themed scene.&lt;&#x2F;p&gt;
&lt;p&gt;The main reason I opted to use this asset pack (besides looking really cool) is that LightmapGI requires UV2 data from meshes. And Godot can only generate those for &lt;code&gt;MeshInstance3D&lt;&#x2F;code&gt; nodes that are using an &lt;code&gt;ArrayMesh&lt;&#x2F;code&gt; resource. At least as far as I could tell. With the GLTF models Kay produced, I was able to import them with static light baking enabled (which is &lt;strong&gt;not&lt;&#x2F;strong&gt; on by default)&lt;&#x2F;p&gt;
&lt;p&gt;The experiment was to see if individual light model nodes could all contribute to the same scene, and if disabling individual nodes would affect the illumination contributions negatively.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Designing_a_level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Designing_a_level&quot; aria-label=&quot;Anchor link for: Designing_a_level&quot;&gt;Designing a level&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With the assets I started to make a little story about a landing zone, some bases set up and trucks moving cargo around. The actual details of it were not super important, the goal was to show off the lighting anyway. But making little stories is one of my joys.&lt;&#x2F;p&gt;
&lt;p&gt;Something I discovered is all of the assets use a single material and texture, and it’s their UV coordinates that affect the colour of the mesh. Which is incredibly efficient for space when making a game. However it did not allow me to override individual “materials” of different models. For example I wanted to make the trucks have reflective windshields and more metallic hulls. Instead I opted to duplicate one of the rock meshes and replace the entire material with a slightly rough metallic material. Just to make sure the reflection probes were working as expected.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Initial_bugs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Initial_bugs&quot; aria-label=&quot;Anchor link for: Initial_bugs&quot;&gt;Initial bugs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As it would turn out, moving nodes arround, which I did to make the project easier to parse for people hoping to learn from it, actually breaks &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; nodes. As it would turn out, &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; nodes only search for meshes among their siblings and children (recursively). So if there are components of a specific branch of the scene tree that are inaccessible, the &lt;code&gt;LightmapGI&lt;&#x2F;code&gt; will be unable to discover them!&lt;&#x2F;p&gt;
&lt;p&gt;While frustrating at first, this is actually &lt;em&gt;incredibly&lt;&#x2F;em&gt; useful! What this means is that you can have individual “segments” of your level with different light maps baked. So you could have a segment that the player will see all the time, and a segment that is only seen in cutscenes and even putting those in the same scene file, you can separate the lightmap baking and even use different settings!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Results&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Results&quot; aria-label=&quot;Anchor link for: Results&quot;&gt;Results&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It appears that layering static and dynamic light model nodes works rather well! There are some artifacts produced when the settings are changed, but it would appear that overall the quality is extremently high!&lt;&#x2F;p&gt;
&lt;p&gt;If you want to try out the application for yourself, it’s free on my itch. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;queenofsquiggles.itch.io&#x2F;squiggles-godot-lighting-demo&quot;&gt;Download here!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>

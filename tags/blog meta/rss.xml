<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Queen Of Squiggles&#x27;s Blog - blog meta</title>
      <link>https://queenofsquiggles.github.io/</link>
      <description>The personal blog for all of the Queen&#x27;s news, ramblings, portfolio stuffs, and more!</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://queenofsquiggles.github.io/tags/blog meta/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Fri, 27 Sep 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Engine Switch 2024</title>
          <pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/engine-switch-2024/</link>
          <guid>https://queenofsquiggles.github.io/meta/engine-switch-2024/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/engine-switch-2024/">&lt;p&gt;To be real, this post has been a long time coming. I’ve been toying in my head with how I want to go about this. So hey, here it goes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Godot_is_seriously_awesome&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Godot_is_seriously_awesome&quot; aria-label=&quot;Anchor link for: Godot_is_seriously_awesome&quot;&gt;Godot is seriously awesome&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before anyone gets all tribalistic about this: Godot is incredible. It is an amazing software that lets people with even the most minimal experience make games. And almost every week I personally see another reason to love this funky little game engine. So before we begin, please please please don’t think that just becauses I have a newfound love of bevy that it means it’s better than Godot. Game Engines are (usually) subjective. Use the tool that works for you and is enjoyable to use!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Bevy_is_also_seriously_awesome&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Bevy_is_also_seriously_awesome&quot; aria-label=&quot;Anchor link for: Bevy_is_also_seriously_awesome&quot;&gt;Bevy is also seriously awesome&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll lead with a brief description, shamelessly stolen from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;&quot;&gt;Bevy’s website&lt;&#x2F;a&gt;. Bevy is “A refreshingly simple data-driven game engine built in Rust[;] Free and Open Source Forever!”&lt;&#x2F;p&gt;
&lt;p&gt;There are a few key areas that I wanna drill down for why I think Bevy is so cool, without needing to compare it to any other engines.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a side note, my hot take is that Bevy is more accurately a “framework” rather than an “engine” since my definition of engines, frameworks, and libraries break down as such:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An engine is an executable software that dispatches your code (typically a scripting language) as it sees fit based on the engine’s design&lt;&#x2F;li&gt;
&lt;li&gt;A framework is code that gets compiled (or included for non compiled languages) into your application and takes control of the application’s main thread.&lt;&#x2F;li&gt;
&lt;li&gt;A library is code that gets compiled into your application but does not take control over the application’s main thead (save situations like blocking and sleeping)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It is probably of note that these definitions are distinctly different from existing attempts such as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gamefromscratch.com&#x2F;gamedev-glossary-library-vs-framework-vs-engine&#x2F;&quot;&gt;GameFromScratch&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- I think I like using this label system for managing hardcoded links --&gt;
&lt;h3 id=&quot;Rust&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Rust&quot; aria-label=&quot;Anchor link for: Rust&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy is written in rust, users write in rust, and (with some limitations) any platform that rust supports targeting should be able to run the compiled application.&lt;&#x2F;p&gt;
&lt;p&gt;Because of Rust’s language features, memory safety is just inherent to the development of the game.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ECS&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ECS&quot; aria-label=&quot;Anchor link for: ECS&quot;&gt;ECS&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;ECS (Entity Component System) is a style of development you may have heard of if you’ve been in game development long enough. It’s a design that allows everything to be broken down into &lt;em&gt;entities&lt;&#x2F;em&gt; which are defined by their attached &lt;em&gt;components&lt;&#x2F;em&gt; which store data that can be queried and transformed by &lt;em&gt;systems&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Overall it is really conducive to Data Driven Design, which is a really cool paradigm that operates fairly differently than traditional OOP (Object Oriented Programming) that you’d find in Unity or Godot.&lt;&#x2F;p&gt;
&lt;p&gt;Yeah I know it’s a comparison to other engines but I wanted to illuminate a key detail here as a fun tool we can use later!.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Free_and_Open_Source&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Free_and_Open_Source&quot; aria-label=&quot;Anchor link for: Free_and_Open_Source&quot;&gt;Free and Open Source&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you’re someone reading this blog and know me from social media, you’re probably already on this and hopefully agree that having open source code for the tools you use (especially as a programmer) is a massive boon. Adding in that the engine itself is written the same as the games, and that drops the barrier to contribute code by a significant margin!.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Simple&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Simple&quot; aria-label=&quot;Anchor link for: Simple&quot;&gt;Simple&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This might not get a whole lot of attention but a key detail about Bevy is the simplicity. Components are typical rust structs, systems are just rust functions. Everything is fairly simple to set up and makes liberal usage of &lt;code&gt;Default::default()&lt;&#x2F;code&gt; and builder patterns. And this simplicity doesn’t get in the way of writing more advanced code systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What_I’ve_been_up_to&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_I’ve_been_up_to&quot; aria-label=&quot;Anchor link for: What_I’ve_been_up_to&quot;&gt;What I’ve been up to&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Since checking out bevy, I started working on a couple different projects to whet my appetite for this engine.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Games&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Games&quot; aria-label=&quot;Anchor link for: Games&quot;&gt;Games&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’ve started out on one game and I’m planning to get working on a second as time allows.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Watery_Wails&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Watery_Wails&quot; aria-label=&quot;Anchor link for: Watery_Wails&quot;&gt;Watery Wails&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Watery Wails is a horror game inspired by the &lt;em&gt;Five Nights At Freddy’s&lt;&#x2F;em&gt; series of games. Notably the original few games. It is also heavily inspired by experiences in my past including working at a pool as a lifeguard and some pretty tragic things I ended up witnessing there. Which is why I joke that it’s “made with trauma” (probably not a great joke but it helps me cope).&lt;&#x2F;p&gt;
&lt;p&gt;This game is planned to include a breadth of changes from my previous style of development. Notably usage of Bevy, unit testing, Hierarchical Task Network Planning (think super-charged GOAP), and tools for making translation files.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Magical_Farming,_Cooking,_and_Ranching_Game_(Title_TBD)&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Magical_Farming,_Cooking,_and_Ranching_Game_(Title_TBD)&quot; aria-label=&quot;Anchor link for: Magical_Farming,_Cooking,_and_Ranching_Game_(Title_TBD)&quot;&gt;Magical Farming, Cooking, and Ranching Game (Title TBD)&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This is a game both new and old. Previously I had tried to make a magical farming game in Godot that was inspired by Slime Rancher. It had cheesefruit crops, cute rats to ranch, and a super basic “spell” that acted as the vacuum tool.&lt;&#x2F;p&gt;
&lt;p&gt;The new addition is the cooking component. I think it would be fun to make the player play through little mini-games to prepare different foods. And then they could serve these magically imbued foods to their clients: adventuring parties! I’m hoping I can even add some fun references to some more well known “adventuring parties”. Though I may need to be vague is cases of copyright and such.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Prioritization&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Prioritization&quot; aria-label=&quot;Anchor link for: Prioritization&quot;&gt;Prioritization&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I’m not certain how I want to prioritize the different games. I’ve found my interest in horror wanes the more stable of a situation I’m in. So if I’m stressed,  I find solace in horror. But without that stress the horror is still enjoyable, but less interesting than ther swath of other games I could be working on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;So_why_leave_Godot?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_why_leave_Godot?&quot; aria-label=&quot;Anchor link for: So_why_leave_Godot?&quot;&gt;So why leave Godot?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have various reasons, but I would boil it down to primarily &lt;em&gt;Object Oriented Programming&lt;&#x2F;em&gt;. While I can’t blame OOP for everything , one of the major pain points I have hadc in various game projects was in rooted in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inheritance_(object-oriented_programming)&quot;&gt;Inheritance&lt;&#x2F;a&gt;. Modern day Object Oriented Design (OOD) has so many different solutions to resolve this. One such solution pushed among the Godot community is “Design By Composition”. That being, create new objects by compositing different components that are at least mostly self-contained. And that is definitely a solution I employed while working with Godot. But I’ve been working on games for over a decade now. And almost that entire time has been in OOD contexts. A brief history of the systems I’ve used to make games in the past:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MIT’s Scratch&lt;&#x2F;li&gt;
&lt;li&gt;Raw Java&lt;&#x2F;li&gt;
&lt;li&gt;LWJGL (Java)&lt;&#x2F;li&gt;
&lt;li&gt;LibGDX (Java)&lt;&#x2F;li&gt;
&lt;li&gt;Unity (C#)&lt;&#x2F;li&gt;
&lt;li&gt;Godot (C#)&lt;&#x2F;li&gt;
&lt;li&gt;Godot (GDscript)&lt;&#x2F;li&gt;
&lt;li&gt;Godot (Rust)&lt;&#x2F;li&gt;
&lt;li&gt;Bevy (Rust)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While the journey has not been entirely linear, this journey has been heavily in the trenches of Object Oriented Programming. And in many ways I was starting to feel like I was just going through the motions to make some features. I craved some novelty, to return to the original reason I had started learning to make games in the first place.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Where_did_I_start?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Where_did_I_start?&quot; aria-label=&quot;Anchor link for: Where_did_I_start?&quot;&gt;Where did I start?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I started learning to write code in seventh grade (roughly age 12 for non-Americans). I was going to a private school that had such a weird mix of pivilige and non-privilige. Like it was still a private school with funding and such, but I was the “poor kid” in that group for where I lived, dressed, and such. The other side that was strange about the school, is there was no system for advanced learning. A trait I seemingly have always possessed is being a fast learner. My greatest strength will always be my ability to learn. And in the classes I was taking, I was exceptionally bored. Another fun fact about that school is that because of how America&#x2F;Minnesota handled education (at the time), none of the teachers were actually required to have a teaching license or even really any experience teaching. I had a Math teacher I would try to ask questions of and I’d just get a blank stare. I remember asking “Hey do we ever get to use &lt;em&gt;modulus&lt;&#x2F;em&gt; in this year?” and my teacher didn’t even know what that was. Which I guess modulus is a Discrete Math concept, not necessary for teaching trigonometry, but it would have been nice.&lt;&#x2F;p&gt;
&lt;p&gt;So I was exceptionally bored, I rarely had homework because it was so dumbed down. So I dove headfirst into what was immediately available: &lt;del&gt;becoming a better person&lt;&#x2F;del&gt; &lt;strong&gt;videogames&lt;&#x2F;strong&gt;. I was priviliged enough to basically always have a computer. I never really did console gaming besides Gameboy and DS. Of course Minecraft had just come out and I was obsessed. It was full of wonder and mystery, crying myself to sleep because someone online called me a “noob” and I didn’t know what it meant, and vast creativity. It didn’t take long for me to find mods and started wanted to make my own.&lt;&#x2F;p&gt;
&lt;p&gt;I got into programming, crucially, because I lacked the intellectual stimulation that makes me feel complete. I don’t just crave new challenges, I need them. What better challenge to tackle creating games using an entirely new design paradigm?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;So_why_Bevy?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#So_why_Bevy?&quot; aria-label=&quot;Anchor link for: So_why_Bevy?&quot;&gt;So why Bevy?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Besides all of the previous reasons to like Bevy that I mentioned earlier, Bevy is much closer to the kind of development that I enjoy. Bevy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Provides me with new design challenges to overcome&lt;&#x2F;li&gt;
&lt;li&gt;Gives me much more breathing room to tinker as I see fit.&lt;&#x2F;li&gt;
&lt;li&gt;Enables a modular development approach that I much prefer
&lt;ul&gt;
&lt;li&gt;You can even see my attempts to make modularity work in Godot through several of my Squiggles Zone &#x2F; Sqore based projects such as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QueenOfSquiggles&#x2F;WhereTheDeadLie&quot;&gt;Where The Dead Lie&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QueenOfSquiggles&#x2F;squiggle-pt&quot;&gt;Gruesome Claim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;Why_now?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Why_now?&quot; aria-label=&quot;Anchor link for: Why_now?&quot;&gt;Why now?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Recently I’ve been working on applying to some game industry jobs. And a few of them had quite interesting application requirements that really forced me to look past recent history and see my “career” with code in its entirety. Having done that, I realized how prolific I’ve been over the years. I’ve privated so many of the games I made because they included my full deadname as well as my ex’s name that I worked with back in highschool. But seriously I’ve been making a ton of games over the years. And my driving light has always been facing a challenge and overcoming it. The human spirit is indominatible and deserves all the spoils.&lt;&#x2F;p&gt;
&lt;p&gt;For me, this has become such an intrinsic element of my personal identity. I am a game &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.merriam-webster.com&#x2F;dictionary&#x2F;artisan&quot;&gt;artisan&lt;&#x2F;a&gt; before I’m a game developer. And I much prefer that terminology. Ity truely is an art for me. And no doubt I’m not alone in feeling that way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What’s_the_plan?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What’s_the_plan?&quot; aria-label=&quot;Anchor link for: What’s_the_plan?&quot;&gt;What’s the plan?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My plan, for the foreseeable future, is to pull on this thread of Bevy and Rust. Given I can easily create unit tests for different systems without needing to mock all the other modules affected by it, I can make better guarantees on functionality than I could with Godot. Stripping the shackles of OOD frees me to develop more systemic approaches to different functionalities. And I hope will be much more conducive to the types of games I want to make. Of course time will tell. But for now, I gotta say I’m having the most fun making games I’ve had in a long while. Even if my free time is severely limited recently.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Blog Update Feb. 2024 - C++ Development</title>
          <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/blog-update-cpp-engine-dev/</link>
          <guid>https://queenofsquiggles.github.io/meta/blog-update-cpp-engine-dev/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/blog-update-cpp-engine-dev/">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Caution&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hot Takes Inside!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;General_Update&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#General_Update&quot; aria-label=&quot;Anchor link for: General_Update&quot;&gt;General Update&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hey y’all! I haven’t been making much “Content™️” but I’ve been doing a lot of stuff otherwise! I’ve been talking with more professional game developers trying to figure out how I can break into the game development industry and actuall start a career. It’ll be one year since my graduation soon and I’d like to find some kind of employment in my field 😅&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Blog_Technical&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blog_Technical&quot; aria-label=&quot;Anchor link for: Blog_Technical&quot;&gt;Blog Technical&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As a technical detail, I switched the system used to create the blog. I was using Jekyll to create a static website and I switched to Hugo for doing the same. There’s a lot of benefits to switched to hugo. Writing is easier because it automatically refreshes my browser when detecting a change, manages images a lot nicer, and generally supports a much more robust website. I’m using a custom framework “HB (Hugo Bootstrap) Framework” (see the footer for links &amp;amp; details).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Resume_updates&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Resume_updates&quot; aria-label=&quot;Anchor link for: Resume_updates&quot;&gt;Resume updates&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I imagine unless you’re a tech recruiter (which if you are, why are you reading this? Hire me already!) you’re probably not watching my resume. But now after taking with several more professional developers I was able to garner some critiques on my resume. I’ve even had a recruiter say they remembered me based off of the pictures in my resume. (Go put pictures in your resume right now!)&lt;&#x2F;p&gt;
&lt;p&gt;I added some posts for some recent games that I had forgotten to do write-ups for. But they are currently really bare-bones at best. Mostly just showing off screenshots more than anything. I’m nervous I won’t be able to write a proper write-up for these games since its been so long since I made them, and I’d have to re-learn my own code-base to remember what I was doing and why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;C++???&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#C++???&quot; aria-label=&quot;Anchor link for: C++???&quot;&gt;C++???&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Yes! It has been a long while since I’ve done any development in C++. Mainly because I have had no reason to. I started programming with Java and made games with a pixel-raster system written in pure Java. And eventually worked up to LWJGL (which gave access to OpenGL draw calls). But for the most part, I have been doing scripting with game engines since I wanted to make games, and was less concerned with having fine-grain control over the intricacies of the runtime.&lt;&#x2F;p&gt;
&lt;p&gt;Some people have told me that any moment I spend brushing up on my C++ is not a moment wasted, with respect towards employment in the game industry. So I wanted to make sure I am not just capable but highly proficient in C++ game development.&lt;&#x2F;p&gt;
&lt;p&gt;I had two main project goals. One of which is complete with patches added from time to time. The other is a bit larger and I am still working through it as it is a full game written in C++.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_new_standard&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_new_standard&quot; aria-label=&quot;Anchor link for: A_new_standard&quot;&gt;A new standard&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
img::render(src, alt)
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;927&quot;&gt;XKCD reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am rather picky about build systems. And one of my biggest complaints when it comes to c++ build systems is how non-opinionated (wishy-washy) they are! What I really love about a build system like rust’s &lt;code&gt;cargo build&lt;&#x2F;code&gt; or C#’s &lt;code&gt;dotnet build&lt;&#x2F;code&gt; is that they expect a particular project layout, with a specific configuration file that details exactly what the build system needs to know to prep the code into an executable state.&lt;&#x2F;p&gt;
&lt;p&gt;When I searched for C++ build systems. The main ones that got recommended were “Make” and “CMake”.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;The_problem_with_Make&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_problem_with_Make&quot; aria-label=&quot;Anchor link for: The_problem_with_Make&quot;&gt;The problem with Make&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Make is a super generic build system for linux. You define a serious of tasks and each task and list zero or more tasks that it depends on. And by chaining these with arcane combinations of symbols, you can craft a moderately usable build system. And in that sense I’d consider it only slightly more efficient than just writing a shell script for all the &lt;code&gt;g++&lt;&#x2F;code&gt; calls I want.&lt;&#x2F;p&gt;
&lt;p&gt;The trouble as well is there is little to be said about a standard. The only standard is the name of the script file (I dare not call it a configuration file!). From there you can actually use Make to do just about anything. You could have a make-file that downloads images from a website, formats them, and exports them to a particular directory. Which is impressive. But again, that’s scripting, not necessarily a build system.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;The_problem_with_CMake&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#The_problem_with_CMake&quot; aria-label=&quot;Anchor link for: The_problem_with_CMake&quot;&gt;The problem with CMake&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;CMake, or “the build system for creating make files”. It is arguably a very robust system which enables cross platform development and coordination of large code bases with less effort than most major build systems. Additionally, it is truely not a scripting system but an actual build system. Using the incredibly odd language system you can define variables and perform processes and… I promise it’s technically not a scripting system again.&lt;&#x2F;p&gt;
&lt;p&gt;The main detail in CMake that makes it more promising is that it doesn’t require you to write out your &lt;code&gt;g++&lt;&#x2F;code&gt; calls (since that would really break the cross platform capabilities). So all you have to do is define a project target and attach source files to that target. Simple right? Well every time you make, delete, or move a file, you need to change one &lt;strong&gt;or more&lt;&#x2F;strong&gt; &lt;code&gt;CMakeLists.txt&lt;&#x2F;code&gt; files.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;My_best_effort&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#My_best_effort&quot; aria-label=&quot;Anchor link for: My_best_effort&quot;&gt;My best effort&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I wanted a stupid simple build system that expects a specific project layout but uses that to create a very dynamic build approach. I never really intended for it to be used by anyone but myself so I named it “SSBS”, which is an acronym for “Squiggles Stupid Build System” but also sounds like a ship name, “S.S. Bullshit”. Please clap I am very clever 😢.&lt;&#x2F;p&gt;
&lt;p&gt;The build system itself is rather small and written in C++ for compiling C++ on linux specifically. I considered developing for cross platform. But the appeal of a simple Makefile to bootstrap the project was appealing.&lt;&#x2F;p&gt;
&lt;p&gt;Basically what it does is searches recursively in a &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt; directory for any &lt;code&gt;.c&lt;&#x2F;code&gt;, &lt;code&gt;.h&lt;&#x2F;code&gt;, &lt;code&gt;.cpp&lt;&#x2F;code&gt;, and &lt;code&gt;.hpp&lt;&#x2F;code&gt; files and adds them to a source list. It then generates &lt;code&gt;g++&lt;&#x2F;code&gt; commands for each source file and emits the objects into a similar tree structure as source in the &lt;code&gt;build&#x2F;&lt;&#x2F;code&gt; directory. Additionally, the output of the &lt;code&gt;g++&lt;&#x2F;code&gt; call is emitted to a log file. Then once the calls are complete, it reads the log files to parse out errors, warnings, and notes. (For now, I couldn’t manage to capture the actual output of the &lt;code&gt;g++&lt;&#x2F;code&gt; call and this is the best solution since linux has a piping system for commands).&lt;&#x2F;p&gt;
&lt;p&gt;Then it prints out all of the errors, warnings, and notes (with a little bit of style using a single-header library). It also ends with a breakdown of whether it succeeded or failed and how many errors, warnings, and notes were found.&lt;&#x2F;p&gt;
&lt;p&gt;I could probably write a lot more about SSBS. But unless literally anyone besides me finds interest in it, I might not? But I realize I might have to because it’s pretty telling for my skills and drive to create solutions for problems and easing friction of development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;A_new_game?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#A_new_game?&quot; aria-label=&quot;Anchor link for: A_new_game?&quot;&gt;A new game?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I’m still playing around with name ideas. So far I like, “Watery Wails” since it is an interesting title, gives some but not all details of the content, and is also relatively unique. (I had considered “Sunken Souls” briefly but I know people working on a game called “Sunken …” that I don’t wanna be terribly similar in name to. To avoid competition.)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Engine_Development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Engine_Development&quot; aria-label=&quot;Anchor link for: Engine_Development&quot;&gt;Engine Development&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The area of the games industry I am most excited about is engine &amp;amp; tool development. And so for that purpose, this game is mostly an excuse to make a super basic game engine. Though unlike popular game engines such as “Godot” and less important engines like “Unity” have robust scripting capabilities, a straightforward GUI, and decent scene structure systems, the engine I am making is much closer to a library or framework. Technically it is a framework but I really want to be able to say I  made a custom engine so I’m calling it an engine.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of this engine is to be highly specialized. The reason for that is the more specialized a system is, the easier it is to get it feature complete. I really like making 3D PBR horror games with as much style as I can muster.&lt;&#x2F;p&gt;
img::render(src, alt)
&lt;blockquote&gt;
&lt;p&gt;Important note: I got this model online, I didn’t model it myself.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here you can see a few interesting details:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The object with multiple different PBR materials attached&lt;&#x2F;li&gt;
&lt;li&gt;Albedo, Normal, ORM mapping enabled&lt;&#x2F;li&gt;
&lt;li&gt;ImGUI used to display basic debug information (for now!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some details you can’t really see here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Resource management system (prevents loading the same file twice)&lt;&#x2F;li&gt;
&lt;li&gt;Smart-pointer backed systems&lt;&#x2F;li&gt;
&lt;li&gt;Render batching through single render passes for objects with a common shader program.
&lt;ul&gt;
&lt;li&gt;I’m toying with the idea of further sorting by material, but that would be a bit extra work and I’m not going to optimize much until I actually encounter performance issues.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Robust input action system through a TOML file specification
&lt;ul&gt;
&lt;li&gt;Includes gamepad support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Game Objects&lt;&#x2F;li&gt;
&lt;li&gt;Transform objects (position, rotation, and scale packaged together and easily loaded into model &lt;em&gt;transform&lt;&#x2F;em&gt; matrix)&lt;&#x2F;li&gt;
&lt;li&gt;A custom GLSL &lt;code&gt;#include&lt;&#x2F;code&gt; system (which allows for shared information across many shader files).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My goals for the engine, “Next Steps”:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Support static environment irradiance maps in the PBR rendering (to make reflections and such more realistic)&lt;&#x2F;li&gt;
&lt;li&gt;Access mouse input from the input system (very little work, it’s just a bit lower priority than others)&lt;&#x2F;li&gt;
&lt;li&gt;OpenAL integration for sound effects and streamed music. (My current task as of writing)&lt;&#x2F;li&gt;
&lt;li&gt;Some kind of GUI system
&lt;ul&gt;
&lt;li&gt;I’m tempted to opt for ImGUI as the GUI system for the game as a whole, but I think making my own GUI system would be significantly better because it would give me skills I could translate into a UI&#x2F;UX position if that’s what gets my “foot in the door” in the game industry.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;Game_Development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Development&quot; aria-label=&quot;Anchor link for: Game_Development&quot;&gt;Game Development&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The actual gameplay of this game is almost entirely theoretical at this moment. Since I really need a ton of engine systems in place before I’m comfortable actually building gameplay systems.&lt;&#x2F;p&gt;
&lt;p&gt;The overall goal is to be similar to &lt;em&gt;Five Nights At Freddy’s&lt;&#x2F;em&gt; (Specifically the first game) and &lt;em&gt;I’m On Observation Duty&lt;&#x2F;em&gt; (maybe I should give my game a longer title to fit in?? More syllables == better game right?)&lt;&#x2F;p&gt;
&lt;p&gt;The game will take place at a pool since I’m drawing on my experience when I worked as a lifeguard. I had my fair share of terrifying experiences there, and I want to try to translate the fear and axiety of literally having people’s lives in your hands into the game. And a hefty amount of frustration for the parents that would literally abandon their kids to the pool because it was cheaper than daycare. (Basically take all of the corporatism parody of later FNAF games and translate that into parody of negligent parents and I think I’m there?)&lt;&#x2F;p&gt;
&lt;p&gt;One of my main struggles is finding ways to share what I’m making. Until I am ready to work on the game itself, any screenshots would just be “Hey look at this raw code that made such and such system more efficient!” (Imagine trying to write alt text for that!)&lt;&#x2F;p&gt;
&lt;h5 id=&quot;Release?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Release?&quot; aria-label=&quot;Anchor link for: Release?&quot;&gt;Release?&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;I have absolutely no clue when a release date would be. But I can say that it will be available for linux and &lt;em&gt;possibly&lt;&#x2F;em&gt; windows. I need to do a bit more research into how cross compilation for MacOS is on linux, but if I have to buy a developer’s license the cost is too high for whatever meager profit I’ll be making on this game. If I somehow break $50 I’m literally going to have a party or something.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Why_this_blog_post?&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Why_this_blog_post?&quot; aria-label=&quot;Anchor link for: Why_this_blog_post?&quot;&gt;Why this blog post?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Well I wanted to give a lot of general updates. But also I wanted to talk about my C++ development a little bit since it’s probably going to take a long while before it’s actually done.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Blog Update 2023</title>
          <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/blog-update-october-2023/</link>
          <guid>https://queenofsquiggles.github.io/meta/blog-update-october-2023/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/blog-update-october-2023/">&lt;h2 id=&quot;Happy_Halloween&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Happy_Halloween&quot; aria-label=&quot;Anchor link for: Happy_Halloween&quot;&gt;Happy Halloween&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hi there y’all! It’s October, a great time to indulge in horror and spooky things. I’m doing something pretty scary myself, and that’s trying to use this blog more!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What_this_blog_is_for&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#What_this_blog_is_for&quot; aria-label=&quot;Anchor link for: What_this_blog_is_for&quot;&gt;What this blog is for&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Originally this blog was intended to be a portfolio to help me get a job working in tech, but time and time again I get rejected because “games aren’t real experience.” So if this blog isn’t doing anything helpful for my job prospects, I might as well focus it in more on my interests than anything else!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Game_Post-Mortums&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Game_Post-Mortums&quot; aria-label=&quot;Anchor link for: Game_Post-Mortums&quot;&gt;Game Post-Mortums&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While I’m not a huge fan of the naming, I do like writing up articles talking about the games I’ve made, why I made them and any challenges I faced while doing so. Additionally I like to talk about any interesting tech problems I had to solve as well. I’ve definitely lapsed in writing those, so I do have a backlog to work through!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Tutorials_and_Informational_Guides&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Tutorials_and_Informational_Guides&quot; aria-label=&quot;Anchor link for: Tutorials_and_Informational_Guides&quot;&gt;Tutorials and Informational Guides&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you have already been following my blog, you probably saw my last article, which was definitely in the “Informational Guide” category. I really enjoy sharing information in a way that people can more easily read. Additionally, I want to serve as a way for people to get practice with parts of game development and specifically Godot that they may not have before.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve definitely heard different opinions on shelving my YouTube channel and writing more. But what’s most important to me is that I actually have the time to put things out. If I force myself to do YouTube, I don’t end up posting anything for months because of the time investment. Whereas with this blog, I’m literally taking the first step of making a YouTube video (writing the script), and posting that directly, with some formatting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Games_Discussions&#x2F;Reviews&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Games_Discussions&amp;#x2F;Reviews&quot; aria-label=&quot;Anchor link for: Games_Discussions&amp;#x2F;Reviews&quot;&gt;Games Discussions&#x2F;Reviews&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Another thing that I really enjoy that I haven’t done yet is discussing existing games. I usually jot down notes about different game elements as I play a game and then I refer to those notes when I want to implement a similar result. It’s really helpful for those squishy design things like, “I want the player to feel anxious.” It’s not really a difficult problem to solve, but doing so in a way that also doesn’t hurt the overall enjoyment and gameplay mechanics can be incredibly difficult.&lt;&#x2F;p&gt;
&lt;p&gt;I’m not sure I would be so narcissitic to call myself a games reviewer. But perhaps what I would like to do is rather similar. More so than just pumping out opinions as fast as possible, I like to dig deep. For example, I’ve been trying to beat &lt;em&gt;The Forest&lt;&#x2F;em&gt; pretty much since it came out (arguably starting well before I should have given my age and the content). I want to do this with more games. I’ve already worked on picking apart notes for &lt;em&gt;Resident Evil 7&lt;&#x2F;em&gt;. The only component missing is my hard-mode replay, which got incredibly difficult for me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Closing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Closing&quot; aria-label=&quot;Anchor link for: Closing&quot;&gt;Closing&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have strong aspirations. If you’ve followed me for any length of time you might be skeptical of whether I can actually accomplish this. I think the best I can say is that &lt;strong&gt;I want to do this&lt;&#x2F;strong&gt;. My most common struggle is against the tension between doing what I love, and having an income. So often the two seem to be mutually exclusive. I may start putting a “support me” badge on my posts in hope that people will want to throw me a dollar or two for the information I write. Though without comments implemented on this blog there isn’t a lot of back and forth.&lt;&#x2F;p&gt;
&lt;p&gt;I suppose if you want to contact me, I have a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blobfox.coffee&#x2F;@queenofsquiggles&quot;&gt;mastodon account&lt;&#x2F;a&gt; and an &lt;a href=&quot;mailto:thequeenofsquiggles@gmail.com&quot;&gt;email account&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Blog Introduction</title>
          <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
          <author>Queen Of Squiggles</author>
          <link>https://queenofsquiggles.github.io/meta/blog-intro/</link>
          <guid>https://queenofsquiggles.github.io/meta/blog-intro/</guid>
          <description xml:base="https://queenofsquiggles.github.io/meta/blog-intro/">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Introduction&quot; aria-label=&quot;Anchor link for: Introduction&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hello hello! This is the blog introduction. I’m porting over from a hand-crafted HTML website to a Github Pages Jekyll generated static website. This change allows me to have a much more visually appealing website with a fraction of the effort, which leaves me more time to focus on what I love, which is making games!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Notable_Tech_Changes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Notable_Tech_Changes&quot; aria-label=&quot;Anchor link for: Notable_Tech_Changes&quot;&gt;Notable Tech Changes&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;Blog&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Blog&quot; aria-label=&quot;Anchor link for: Blog&quot;&gt;Blog&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Due to the change, I took the opportunity to switch over to a blog style website. This will allow me to manage individual posts on their own pages without needing to sift through a massive &lt;code&gt;index.html&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;RSS&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#RSS&quot; aria-label=&quot;Anchor link for: RSS&quot;&gt;RSS&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Because of using Jekyll to generate a blog, this website &lt;em&gt;should&lt;&#x2F;em&gt; support RSS feeds, and possibly Atom feeds as well. Although as of writing I haven’t tested that. I’m trying to have the bare-bones of the website put together before pushing it to production.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;Portfolio&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#Portfolio&quot; aria-label=&quot;Anchor link for: Portfolio&quot;&gt;Portfolio&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I am using this website not just as a blog but also as a portfolio&#x2F;CV. Because of this the about page is going to be more fomal information about my projects. And I’ll try to share some more technical information about making the games and non-game projects. I’m not entirely sure if this website will help me make it into the game development industry, but at the very least, I’ll have a nice place to make cool posts about my games. Also people more interested in my process can read what I write here, since Mastodon’s microblogging system doesn’t work for the longer posts I want to make.&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
